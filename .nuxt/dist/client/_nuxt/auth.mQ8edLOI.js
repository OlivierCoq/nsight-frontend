import{y as l,a3 as _,a0 as S,a4 as p,a5 as g,a6 as m,a7 as f,E as T,A as b,G as d}from"./entry.edFZpnpL.js";const i=()=>{const e=S(),{medusa:a}=l().public;return a.global?e.$medusa:(e._medusaClient||(e._medusaClient=new _(a)),e._medusaClient)},j=p();j.use(g);const h=m({id:"productsStore",state:()=>({merchant:null,categories:null,products:null,cart:null,cart_obj:null}),actions:{async initCart(){U()}},getters:{},persist:{enabled:!0,storage:f.localStorage}}),C={async onRequest({request:e,options:a}){const s=l();a.headers={"X-Authorization":s.apiSecret}}},$=()=>$fetch.create(C),w=p();w.use(g);const c=l();$();const U=m({id:"authStore",state:()=>({user:null,medusa_user:null,token:null,loggedIn:!1,errors:!1,medusa_client:null}),actions:{async login(e){const a=h(),s=await $fetch(`${c.public.NUXT_STRAPI_URL}/api/auth/local`,{method:"POST",headers:{"Content-Type":"application/json",accept:"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify(e)});s.statusCode===400?this.errors=s.data.message[0].messages[0].message:(this.errors=!1,globalThis.$fetch=T.create({headers:{"Content-Type":"application/json",Authorization:`Bearer ${s.jwt}`}}),await $fetch(`${c.public.NUXT_STRAPI_URL}/api/users/${s.user.id}?populate=*`,{method:"GET",headers:{"Content-Type":"application/json",accept:"application/json",Authorization:`Bearer ${s.jwt}`}}).then(o=>{this.errors=!1,this.user=o,this.token=s.jwt,this.loggedIn=!0,localStorage.setItem("token",s.jwt),localStorage.setItem("user",JSON.stringify(o));const n=i();n.auth.getToken({email:e.identifier,password:e.password}).then(A=>{n.auth.authenticate({email:e.identifier,password:e.password}).then(({customer:r})=>{console.log("Medusa customer",r.id),this.medusa_user=r;let u;n.regions.list().then(({regions:t})=>{console.log("regionssss",t[0]),u=t[0]}),this.user.cart?(console.log("cart exists."),n.carts.retrieve(this.user.cart).then(t=>{a.cart_obj=t}).catch(t=>{console.log("Medusa cart",t)})):(console.log("no cart."),n.carts.create(u).then(t=>{console.log("Created new cart",t),this.user.cart=t.cart.id,a.cart_obj=t.cart,b(()=>{this.updateUser()})}).catch(t=>{console.log("Medusa cart",t)}))}).catch(r=>{console.log("Medusa err",r)})}),setTimeout(()=>{d("/dashboard")},1e3)}))},async logout(){const e=h();this.token=null,this.loggedIn=!1,e.cart=null,this.user=null,i().auth.deleteSession(),this.medusa_user=null,d("/")},async updateUser(){$fetch(`${c.public.NUXT_STRAPI_URL}/api/users/${this.user.id}`,{method:"PUT",headers:{Authorization:`Bearer ${this.token}`,"Content-Type":"application/json",accept:"application/json"},body:JSON.stringify(this.user)}).then(e=>{console.log("Updated user",e);const a=i();let s={email:this.user.email,first_name:this.user.first_name,last_name:this.user.last_name,phone:this.user.phone};a.customers.update(s).then(o=>{console.log("Updated Medusa user",o)}).catch(o=>{console.log("Update Medusa user error",o)})}).catch(e=>{console.log("Update user error",e)})}},getters:{},persist:{enabled:!0,storage:f.localStorage}});export{U as a,h as p,i as u};
