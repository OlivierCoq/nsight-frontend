{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/cardsApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createCardRequestSchema, } from '../models/createCardRequest';\nimport { createCardResponseSchema, } from '../models/createCardResponse';\nimport { disableCardResponseSchema, } from '../models/disableCardResponse';\nimport { listCardsResponseSchema, } from '../models/listCardsResponse';\nimport { retrieveCardResponseSchema, } from '../models/retrieveCardResponse';\nimport { boolean, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class CardsApi extends BaseApi {\n    /**\n     * Retrieves a list of cards owned by the account making the request.\n     * A max of 25 cards will be returned.\n     *\n     * @param cursor           A pagination cursor returned by a previous call to this endpoint. Provide this\n     *                                    to retrieve the next set of results for your original query.  See\n     *                                    [Pagination](https://developer.squareup.com/docs/build-basics/common-api-\n     *                                    patterns/pagination) for more information.\n     * @param customerId       Limit results to cards associated with the customer supplied. By default, all\n     *                                    cards owned by the merchant are returned.\n     * @param includeDisabled  Includes disabled cards. By default, all enabled cards owned by the merchant\n     *                                    are returned.\n     * @param referenceId      Limit results to cards associated with the reference_id supplied.\n     * @param sortOrder        Sorts the returned list by when the card was created with the specified order.\n     *                                    This field defaults to ASC.\n     * @return Response from the API call\n     */\n    async listCards(cursor, customerId, includeDisabled, referenceId, sortOrder, requestOptions) {\n        const req = this.createRequest('GET', '/v2/cards');\n        const mapped = req.prepareArgs({\n            cursor: [cursor, optional(string())],\n            customerId: [customerId, optional(string())],\n            includeDisabled: [includeDisabled, optional(boolean())],\n            referenceId: [referenceId, optional(string())],\n            sortOrder: [sortOrder, optional(string())],\n        });\n        req.query('cursor', mapped.cursor);\n        req.query('customer_id', mapped.customerId);\n        req.query('include_disabled', mapped.includeDisabled);\n        req.query('reference_id', mapped.referenceId);\n        req.query('sort_order', mapped.sortOrder);\n        return req.callAsJson(listCardsResponseSchema, requestOptions);\n    }\n    /**\n     * Adds a card on file to an existing merchant.\n     *\n     * @param body         An object containing the fields to POST for the request.  See the\n     *                                                 corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async createCard(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/cards');\n        const mapped = req.prepareArgs({ body: [body, createCardRequestSchema] });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createCardResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves details for a specific Card.\n     *\n     * @param cardId  Unique ID for the desired Card.\n     * @return Response from the API call\n     */\n    async retrieveCard(cardId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({ cardId: [cardId, string()] });\n        req.appendTemplatePath `/v2/cards/${mapped.cardId}`;\n        return req.callAsJson(retrieveCardResponseSchema, requestOptions);\n    }\n    /**\n     * Disables the card, preventing any further updates or charges.\n     * Disabling an already disabled card is allowed but has no effect.\n     *\n     * @param cardId  Unique ID for the desired Card.\n     * @return Response from the API call\n     */\n    async disableCard(cardId, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({ cardId: [cardId, string()] });\n        req.appendTemplatePath `/v2/cards/${mapped.cardId}/disable`;\n        return req.callAsJson(disableCardResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=cardsApi.js.map",
      "start": 1709003846709,
      "end": 1709003846762,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846762,
      "end": 1709003846762,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846762,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003846763,
      "end": 1709003846763,
      "order": "normal"
    }
  ]
}
