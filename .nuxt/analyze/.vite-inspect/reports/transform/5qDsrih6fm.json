{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/orderCustomAttributesApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { bulkDeleteOrderCustomAttributesRequestSchema, } from '../models/bulkDeleteOrderCustomAttributesRequest';\nimport { bulkDeleteOrderCustomAttributesResponseSchema, } from '../models/bulkDeleteOrderCustomAttributesResponse';\nimport { bulkUpsertOrderCustomAttributesRequestSchema, } from '../models/bulkUpsertOrderCustomAttributesRequest';\nimport { bulkUpsertOrderCustomAttributesResponseSchema, } from '../models/bulkUpsertOrderCustomAttributesResponse';\nimport { createOrderCustomAttributeDefinitionRequestSchema, } from '../models/createOrderCustomAttributeDefinitionRequest';\nimport { createOrderCustomAttributeDefinitionResponseSchema, } from '../models/createOrderCustomAttributeDefinitionResponse';\nimport { deleteOrderCustomAttributeDefinitionResponseSchema, } from '../models/deleteOrderCustomAttributeDefinitionResponse';\nimport { deleteOrderCustomAttributeResponseSchema, } from '../models/deleteOrderCustomAttributeResponse';\nimport { listOrderCustomAttributeDefinitionsResponseSchema, } from '../models/listOrderCustomAttributeDefinitionsResponse';\nimport { listOrderCustomAttributesResponseSchema, } from '../models/listOrderCustomAttributesResponse';\nimport { retrieveOrderCustomAttributeDefinitionResponseSchema, } from '../models/retrieveOrderCustomAttributeDefinitionResponse';\nimport { retrieveOrderCustomAttributeResponseSchema, } from '../models/retrieveOrderCustomAttributeResponse';\nimport { updateOrderCustomAttributeDefinitionRequestSchema, } from '../models/updateOrderCustomAttributeDefinitionRequest';\nimport { updateOrderCustomAttributeDefinitionResponseSchema, } from '../models/updateOrderCustomAttributeDefinitionResponse';\nimport { upsertOrderCustomAttributeRequestSchema, } from '../models/upsertOrderCustomAttributeRequest';\nimport { upsertOrderCustomAttributeResponseSchema, } from '../models/upsertOrderCustomAttributeResponse';\nimport { boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class OrderCustomAttributesApi extends BaseApi {\n    /**\n     * Lists the order-related [custom attribute definitions]($m/CustomAttributeDefinition) that belong to\n     * a Square seller account.\n     *\n     * When all response pages are retrieved, the results include all custom attribute definitions\n     * that are visible to the requesting application, including those that are created by other\n     * applications and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`. Note that\n     * seller-defined custom attributes (also known as custom fields) are always set to\n     * `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param visibilityFilter  Requests that all of the custom attributes be returned, or only those that are\n     *                                    read-only or read-write.\n     * @param cursor            The cursor returned in the paged response from the previous call to this\n     *                                    endpoint.  Provide this cursor to retrieve the next page of results for your\n     *                                    original request.  For more information, see [Pagination](https://developer.\n     *                                    squareup.com/docs/working-with-apis/pagination).\n     * @param limit             The maximum number of results to return in a single paged response. This limit\n     *                                    is advisory.  The response might contain more or fewer results. The minimum\n     *                                    value is 1 and the maximum value is 100.  The default value is 20. For more\n     *                                    information, see [Pagination](https://developer.squareup.com/docs/working-with-\n     *                                    apis/pagination).\n     * @return Response from the API call\n     */\n    async listOrderCustomAttributeDefinitions(visibilityFilter, cursor, limit, requestOptions) {\n        const req = this.createRequest('GET', '/v2/orders/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            visibilityFilter: [visibilityFilter, optional(string())],\n            cursor: [cursor, optional(string())],\n            limit: [limit, optional(number())],\n        });\n        req.query('visibility_filter', mapped.visibilityFilter);\n        req.query('cursor', mapped.cursor);\n        req.query('limit', mapped.limit);\n        return req.callAsJson(listOrderCustomAttributeDefinitionsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates an order-related custom attribute definition.  Use this endpoint to\n     * define a custom attribute that can be associated with orders.\n     *\n     * After creating a custom attribute definition, you can set the custom attribute for orders\n     * in the Square seller account.\n     *\n     * @param body         An object containing the fields to POST\n     *                                                                           for the request.  See the corresponding\n     *                                                                           object definition for field details.\n     * @return Response from the API call\n     */\n    async createOrderCustomAttributeDefinition(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/orders/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            body: [body, createOrderCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createOrderCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes an order-related [custom attribute definition]($m/CustomAttributeDefinition) from a Square\n     * seller account.\n     *\n     * Only the definition owner can delete a custom attribute definition.\n     *\n     * @param key The key of the custom attribute definition to delete.\n     * @return Response from the API call\n     */\n    async deleteOrderCustomAttributeDefinition(key, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({ key: [key, string()] });\n        req.appendTemplatePath `/v2/orders/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(deleteOrderCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves an order-related [custom attribute definition]($m/CustomAttributeDefinition) from a Square\n     * seller account.\n     *\n     * To retrieve a custom attribute definition created by another application, the `visibility`\n     * setting must be `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined\n     * custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param key     The key of the custom attribute definition to retrieve.\n     * @param version To enable [optimistic concurrency](https://developer.squareup.com/docs/build-\n     *                          basics/common-api-patterns/optimistic-concurrency) control, include this optional field\n     *                          and specify the current version of the custom attribute.\n     * @return Response from the API call\n     */\n    async retrieveOrderCustomAttributeDefinition(key, version, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            version: [version, optional(number())],\n        });\n        req.query('version', mapped.version);\n        req.appendTemplatePath `/v2/orders/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(retrieveOrderCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Updates an order-related custom attribute definition for a Square seller account.\n     *\n     * Only the definition owner can update a custom attribute definition. Note that sellers can view all\n     * custom attributes in exported customer data, including those set to `VISIBILITY_HIDDEN`.\n     *\n     * @param key          The key of the custom attribute\n     *                                                                           definition to update.\n     * @param body         An object containing the fields to POST\n     *                                                                           for the request.  See the corresponding\n     *                                                                           object definition for field details.\n     * @return Response from the API call\n     */\n    async updateOrderCustomAttributeDefinition(key, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            body: [body, updateOrderCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/orders/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(updateOrderCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes order [custom attributes]($m/CustomAttribute) as a bulk operation.\n     *\n     * Use this endpoint to delete one or more custom attributes from one or more orders.\n     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create\n     * a\n     * custom attribute definition, use the\n     * [CreateOrderCustomAttributeDefinition]($e/OrderCustomAttributes/CreateOrderCustomAttributeDefinition\n     * ) endpoint.)\n     *\n     * This `BulkDeleteOrderCustomAttributes` endpoint accepts a map of 1 to 25 individual delete\n     * requests and returns a map of individual delete responses. Each delete request has a unique ID\n     * and provides an order ID and custom attribute. Each delete response is returned with the ID\n     * of the corresponding request.\n     *\n     * To delete a custom attribute owned by another application, the `visibility` setting\n     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param body         An object containing the fields to POST for\n     *                                                                      the request.  See the corresponding object\n     *                                                                      definition for field details.\n     * @return Response from the API call\n     */\n    async bulkDeleteOrderCustomAttributes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/orders/custom-attributes/bulk-delete');\n        const mapped = req.prepareArgs({\n            body: [body, bulkDeleteOrderCustomAttributesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkDeleteOrderCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Creates or updates order [custom attributes]($m/CustomAttribute) as a bulk operation.\n     *\n     * Use this endpoint to delete one or more custom attributes from one or more orders.\n     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create\n     * a\n     * custom attribute definition, use the\n     * [CreateOrderCustomAttributeDefinition]($e/OrderCustomAttributes/CreateOrderCustomAttributeDefinition\n     * ) endpoint.)\n     *\n     * This `BulkUpsertOrderCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert\n     * requests and returns a map of individual upsert responses. Each upsert request has a unique ID\n     * and provides an order ID and custom attribute. Each upsert response is returned with the ID\n     * of the corresponding request.\n     *\n     * To create or update a custom attribute owned by another application, the `visibility` setting\n     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param body         An object containing the fields to POST for\n     *                                                                      the request.  See the corresponding object\n     *                                                                      definition for field details.\n     * @return Response from the API call\n     */\n    async bulkUpsertOrderCustomAttributes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/orders/custom-attributes/bulk-upsert');\n        const mapped = req.prepareArgs({\n            body: [body, bulkUpsertOrderCustomAttributesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkUpsertOrderCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Lists the [custom attributes]($m/CustomAttribute) associated with an order.\n     *\n     * You can use the `with_definitions` query parameter to also retrieve custom attribute definitions\n     * in the same call.\n     *\n     * When all response pages are retrieved, the results include all custom attributes that are\n     * visible to the requesting application, including those that are owned by other applications\n     * and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param orderId           The ID of the target [order](entity:Order).\n     * @param visibilityFilter  Requests that all of the custom attributes be returned, or only those that\n     *                                     are read-only or read-write.\n     * @param cursor            The cursor returned in the paged response from the previous call to this\n     *                                     endpoint.  Provide this cursor to retrieve the next page of results for your\n     *                                     original request.  For more information, see [Pagination](https://developer.\n     *                                     squareup.com/docs/working-with-apis/pagination).\n     * @param limit             The maximum number of results to return in a single paged response. This\n     *                                     limit is advisory.  The response might contain more or fewer results. The\n     *                                     minimum value is 1 and the maximum value is 100.  The default value is 20. For\n     *                                     more information, see [Pagination](https://developer.squareup.com/docs/working-\n     *                                     with-apis/pagination).\n     * @param withDefinitions   Indicates whether to return the [custom attribute definition](entity:\n     *                                     CustomAttributeDefinition) in the `definition` field of each custom attribute.\n     *                                     Set this parameter to `true` to get the name and description of each custom\n     *                                     attribute,  information about the data type, or other definition details. The\n     *                                     default value is `false`.\n     * @return Response from the API call\n     */\n    async listOrderCustomAttributes(orderId, visibilityFilter, cursor, limit, withDefinitions, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            orderId: [orderId, string()],\n            visibilityFilter: [visibilityFilter, optional(string())],\n            cursor: [cursor, optional(string())],\n            limit: [limit, optional(number())],\n            withDefinitions: [withDefinitions, optional(boolean())],\n        });\n        req.query('visibility_filter', mapped.visibilityFilter);\n        req.query('cursor', mapped.cursor);\n        req.query('limit', mapped.limit);\n        req.query('with_definitions', mapped.withDefinitions);\n        req.appendTemplatePath `/v2/orders/${mapped.orderId}/custom-attributes`;\n        return req.callAsJson(listOrderCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a [custom attribute]($m/CustomAttribute) associated with a customer profile.\n     *\n     * To delete a custom attribute owned by another application, the `visibility` setting must be\n     * `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param orderId              The ID of the target [order](entity:Order).\n     * @param customAttributeKey   The key of the custom attribute to delete.  This key must match the key of\n     *                                       an existing custom attribute definition.\n     * @return Response from the API call\n     */\n    async deleteOrderCustomAttribute(orderId, customAttributeKey, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({\n            orderId: [orderId, string()],\n            customAttributeKey: [customAttributeKey, string()],\n        });\n        req.appendTemplatePath `/v2/orders/${mapped.orderId}/custom-attributes/${mapped.customAttributeKey}`;\n        return req.callAsJson(deleteOrderCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a [custom attribute]($m/CustomAttribute) associated with an order.\n     *\n     * You can use the `with_definition` query parameter to also retrieve the custom attribute definition\n     * in the same call.\n     *\n     * To retrieve a custom attribute owned by another application, the `visibility` setting must be\n     * `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom\n     * attributes\n     * also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param orderId              The ID of the target [order](entity:Order).\n     * @param customAttributeKey   The key of the custom attribute to retrieve.  This key must match the key\n     *                                        of an existing custom attribute definition.\n     * @param version              To enable [optimistic concurrency](https://developer.squareup.\n     *                                        com/docs/build-basics/common-api-patterns/optimistic-concurrency) control,\n     *                                        include this optional field and specify the current version of the custom\n     *                                        attribute.\n     * @param withDefinition       Indicates whether to return the [custom attribute definition](entity:\n     *                                        CustomAttributeDefinition) in the `definition` field of each  custom\n     *                                        attribute. Set this parameter to `true` to get the name and description of\n     *                                        each custom attribute,  information about the data type, or other\n     *                                        definition details. The default value is `false`.\n     * @return Response from the API call\n     */\n    async retrieveOrderCustomAttribute(orderId, customAttributeKey, version, withDefinition, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            orderId: [orderId, string()],\n            customAttributeKey: [customAttributeKey, string()],\n            version: [version, optional(number())],\n            withDefinition: [withDefinition, optional(boolean())],\n        });\n        req.query('version', mapped.version);\n        req.query('with_definition', mapped.withDefinition);\n        req.appendTemplatePath `/v2/orders/${mapped.orderId}/custom-attributes/${mapped.customAttributeKey}`;\n        return req.callAsJson(retrieveOrderCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Creates or updates a [custom attribute]($m/CustomAttribute) for an order.\n     *\n     * Use this endpoint to set the value of a custom attribute for a specific order.\n     * A custom attribute is based on a custom attribute definition in a Square seller account. (To create\n     * a\n     * custom attribute definition, use the\n     * [CreateOrderCustomAttributeDefinition]($e/OrderCustomAttributes/CreateOrderCustomAttributeDefinition\n     * ) endpoint.)\n     *\n     * To create or update a custom attribute owned by another application, the `visibility` setting\n     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param orderId              The ID of the target [order](entity:\n     *                                                                         Order).\n     * @param customAttributeKey   The key of the custom attribute to create\n     *                                                                         or update.  This key must match the key\n     *                                                                         of an existing custom attribute definition.\n     * @param body                 An object containing the fields to POST\n     *                                                                         for the request.  See the corresponding\n     *                                                                         object definition for field details.\n     * @return Response from the API call\n     */\n    async upsertOrderCustomAttribute(orderId, customAttributeKey, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            orderId: [orderId, string()],\n            customAttributeKey: [customAttributeKey, string()],\n            body: [body, upsertOrderCustomAttributeRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/orders/${mapped.orderId}/custom-attributes/${mapped.customAttributeKey}`;\n        return req.callAsJson(upsertOrderCustomAttributeResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=orderCustomAttributesApi.js.map",
      "start": 1709003846789,
      "end": 1709003846889,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003846889,
      "end": 1709003846889,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003846889,
      "end": 1709003846890,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003846890,
      "end": 1709003846890,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003846890,
      "end": 1709003846890,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003846890,
      "end": 1709003846890,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003846890,
      "end": 1709003846890,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003846890,
      "end": 1709003846890,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003846890,
      "end": 1709003846890,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003846890,
      "end": 1709003846891,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003846891,
      "end": 1709003846891,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003846891,
      "end": 1709003846891,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003846891,
      "end": 1709003846891,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003846891,
      "end": 1709003846891,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003846891,
      "end": 1709003846891,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003846891,
      "end": 1709003846891,
      "order": "normal"
    }
  ]
}
