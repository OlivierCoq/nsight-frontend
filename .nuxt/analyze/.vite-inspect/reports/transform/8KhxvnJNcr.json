{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/helpers/parseDigits.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map",
      "start": 1709272110437,
      "end": 1709272110478,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272110478,
      "end": 1709272110478,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272110478,
      "end": 1709272110479,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272110479,
      "end": 1709272110479,
      "order": "normal"
    }
  ]
}
