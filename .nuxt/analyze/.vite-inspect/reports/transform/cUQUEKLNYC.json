{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/customerCustomAttributesApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { bulkUpsertCustomerCustomAttributesRequestSchema, } from '../models/bulkUpsertCustomerCustomAttributesRequest';\nimport { bulkUpsertCustomerCustomAttributesResponseSchema, } from '../models/bulkUpsertCustomerCustomAttributesResponse';\nimport { createCustomerCustomAttributeDefinitionRequestSchema, } from '../models/createCustomerCustomAttributeDefinitionRequest';\nimport { createCustomerCustomAttributeDefinitionResponseSchema, } from '../models/createCustomerCustomAttributeDefinitionResponse';\nimport { deleteCustomerCustomAttributeDefinitionResponseSchema, } from '../models/deleteCustomerCustomAttributeDefinitionResponse';\nimport { deleteCustomerCustomAttributeResponseSchema, } from '../models/deleteCustomerCustomAttributeResponse';\nimport { listCustomerCustomAttributeDefinitionsResponseSchema, } from '../models/listCustomerCustomAttributeDefinitionsResponse';\nimport { listCustomerCustomAttributesResponseSchema, } from '../models/listCustomerCustomAttributesResponse';\nimport { retrieveCustomerCustomAttributeDefinitionResponseSchema, } from '../models/retrieveCustomerCustomAttributeDefinitionResponse';\nimport { retrieveCustomerCustomAttributeResponseSchema, } from '../models/retrieveCustomerCustomAttributeResponse';\nimport { updateCustomerCustomAttributeDefinitionRequestSchema, } from '../models/updateCustomerCustomAttributeDefinitionRequest';\nimport { updateCustomerCustomAttributeDefinitionResponseSchema, } from '../models/updateCustomerCustomAttributeDefinitionResponse';\nimport { upsertCustomerCustomAttributeRequestSchema, } from '../models/upsertCustomerCustomAttributeRequest';\nimport { upsertCustomerCustomAttributeResponseSchema, } from '../models/upsertCustomerCustomAttributeResponse';\nimport { boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class CustomerCustomAttributesApi extends BaseApi {\n    /**\n     * Lists the customer-related [custom attribute definitions]($m/CustomAttributeDefinition) that belong\n     * to a Square seller account.\n     *\n     * When all response pages are retrieved, the results include all custom attribute definitions\n     * that are visible to the requesting application, including those that are created by other\n     * applications and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`. Note that\n     * seller-defined custom attributes (also known as custom fields) are always set to\n     * `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param limit  The maximum number of results to return in a single paged response. This limit is\n     *                         advisory. The response might contain more or fewer results. The minimum value is 1 and the\n     *                         maximum value is 100. The default value is 20. For more information, see\n     *                         [Pagination](https://developer.squareup.com/docs/build-basics/common-api-\n     *                         patterns/pagination).\n     * @param cursor The cursor returned in the paged response from the previous call to this endpoint.\n     *                         Provide this cursor to retrieve the next page of results for your original request. For\n     *                         more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-\n     *                         api-patterns/pagination).\n     * @return Response from the API call\n     */\n    async listCustomerCustomAttributeDefinitions(limit, cursor, requestOptions) {\n        const req = this.createRequest('GET', '/v2/customers/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n        });\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        return req.callAsJson(listCustomerCustomAttributeDefinitionsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a customer-related [custom attribute definition]($m/CustomAttributeDefinition) for a Square\n     * seller account.\n     * Use this endpoint to define a custom attribute that can be associated with customer profiles.\n     *\n     * A custom attribute definition specifies the `key`, `visibility`, `schema`, and other properties\n     * for a custom attribute. After the definition is created, you can call\n     * [UpsertCustomerCustomAttribute]($e/CustomerCustomAttributes/UpsertCustomerCustomAttribute) or\n     * [BulkUpsertCustomerCustomAttributes]($e/CustomerCustomAttributes/BulkUpsertCustomerCustomAttributes)\n     * to set the custom attribute for customer profiles in the seller's Customer Directory.\n     *\n     * Sellers can view all custom attributes in exported customer data, including those set to\n     * `VISIBILITY_HIDDEN`.\n     *\n     * @param body         An object containing the fields to\n     *                                                                              POST for the request.  See the\n     *                                                                              corresponding object definition for\n     *                                                                              field details.\n     * @return Response from the API call\n     */\n    async createCustomerCustomAttributeDefinition(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/customers/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            body: [body, createCustomerCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createCustomerCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a customer-related [custom attribute definition]($m/CustomAttributeDefinition) from a Square\n     * seller account.\n     *\n     * Deleting a custom attribute definition also deletes the corresponding custom attribute from\n     * all customer profiles in the seller's Customer Directory.\n     *\n     * Only the definition owner can delete a custom attribute definition.\n     *\n     * @param key The key of the custom attribute definition to delete.\n     * @return Response from the API call\n     */\n    async deleteCustomerCustomAttributeDefinition(key, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({ key: [key, string()] });\n        req.appendTemplatePath `/v2/customers/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(deleteCustomerCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a customer-related [custom attribute definition]($m/CustomAttributeDefinition) from a\n     * Square seller account.\n     *\n     * To retrieve a custom attribute definition created by another application, the `visibility`\n     * setting must be `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined\n     * custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param key     The key of the custom attribute definition to retrieve. If the requesting application is\n     *                          not the definition owner, you must use the qualified key.\n     * @param version The current version of the custom attribute definition, which is used for strongly\n     *                          consistent reads to guarantee that you receive the most up-to-date data. When included in\n     *                          the request, Square returns the specified version or a higher version if one exists. If\n     *                          the specified version is higher than the current version, Square returns a `BAD_REQUEST`\n     *                          error.\n     * @return Response from the API call\n     */\n    async retrieveCustomerCustomAttributeDefinition(key, version, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            version: [version, optional(number())],\n        });\n        req.query('version', mapped.version);\n        req.appendTemplatePath `/v2/customers/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(retrieveCustomerCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a customer-related [custom attribute definition]($m/CustomAttributeDefinition) for a Square\n     * seller account.\n     *\n     * Use this endpoint to update the following fields: `name`, `description`, `visibility`, or the\n     * `schema` for a `Selection` data type.\n     *\n     * Only the definition owner can update a custom attribute definition. Note that sellers can view\n     * all custom attributes in exported customer data, including those set to `VISIBILITY_HIDDEN`.\n     *\n     * @param key          The key of the custom attribute\n     *                                                                              definition to update.\n     * @param body         An object containing the fields to\n     *                                                                              POST for the request.  See the\n     *                                                                              corresponding object definition for\n     *                                                                              field details.\n     * @return Response from the API call\n     */\n    async updateCustomerCustomAttributeDefinition(key, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            body: [body, updateCustomerCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/customers/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(updateCustomerCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Creates or updates [custom attributes]($m/CustomAttribute) for customer profiles as a bulk operation.\n     *\n     * Use this endpoint to set the value of one or more custom attributes for one or more customer\n     * profiles.\n     * A custom attribute is based on a custom attribute definition in a Square seller account, which is\n     * created using the\n     * [CreateCustomerCustomAttributeDefinition]($e/CustomerCustomAttributes/CreateCustomerCustomAttributeD\n     * efinition) endpoint.\n     *\n     * This `BulkUpsertCustomerCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert\n     * requests and returns a map of individual upsert responses. Each upsert request has a unique ID\n     * and provides a customer ID and custom attribute. Each upsert response is returned with the ID\n     * of the corresponding request.\n     *\n     * To create or update a custom attribute owned by another application, the `visibility` setting\n     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param body         An object containing the fields to POST\n     *                                                                         for the request.  See the corresponding\n     *                                                                         object definition for field details.\n     * @return Response from the API call\n     */\n    async bulkUpsertCustomerCustomAttributes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/customers/custom-attributes/bulk-upsert');\n        const mapped = req.prepareArgs({\n            body: [body, bulkUpsertCustomerCustomAttributesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkUpsertCustomerCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Lists the [custom attributes]($m/CustomAttribute) associated with a customer profile.\n     *\n     * You can use the `with_definitions` query parameter to also retrieve custom attribute definitions\n     * in the same call.\n     *\n     * When all response pages are retrieved, the results include all custom attributes that are\n     * visible to the requesting application, including those that are owned by other applications\n     * and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param customerId       The ID of the target [customer profile](entity:Customer).\n     * @param limit            The maximum number of results to return in a single paged response. This limit\n     *                                    is advisory. The response might contain more or fewer results. The minimum\n     *                                    value is 1 and the maximum value is 100. The default value is 20. For more\n     *                                    information, see [Pagination](https://developer.squareup.com/docs/build-\n     *                                    basics/common-api-patterns/pagination).\n     * @param cursor           The cursor returned in the paged response from the previous call to this\n     *                                    endpoint. Provide this cursor to retrieve the next page of results for your\n     *                                    original request. For more information, see [Pagination](https://developer.\n     *                                    squareup.com/docs/build-basics/common-api-patterns/pagination).\n     * @param withDefinitions  Indicates whether to return the [custom attribute definition](entity:\n     *                                    CustomAttributeDefinition) in the `definition` field of each custom attribute.\n     *                                    Set this parameter to `true` to get the name and description of each custom\n     *                                    attribute, information about the data type, or other definition details. The\n     *                                    default value is `false`.\n     * @return Response from the API call\n     */\n    async listCustomerCustomAttributes(customerId, limit, cursor, withDefinitions, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            customerId: [customerId, string()],\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n            withDefinitions: [withDefinitions, optional(boolean())],\n        });\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        req.query('with_definitions', mapped.withDefinitions);\n        req.appendTemplatePath `/v2/customers/${mapped.customerId}/custom-attributes`;\n        return req.callAsJson(listCustomerCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a [custom attribute]($m/CustomAttribute) associated with a customer profile.\n     *\n     * To delete a custom attribute owned by another application, the `visibility` setting must be\n     * `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param customerId  The ID of the target [customer profile](entity:Customer).\n     * @param key         The key of the custom attribute to delete. This key must match the `key` of a custom\n     *                              attribute definition in the Square seller account. If the requesting application is\n     *                              not the definition owner, you must use the qualified key.\n     * @return Response from the API call\n     */\n    async deleteCustomerCustomAttribute(customerId, key, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({\n            customerId: [customerId, string()],\n            key: [key, string()],\n        });\n        req.appendTemplatePath `/v2/customers/${mapped.customerId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(deleteCustomerCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a [custom attribute]($m/CustomAttribute) associated with a customer profile.\n     *\n     * You can use the `with_definition` query parameter to also retrieve the custom attribute definition\n     * in the same call.\n     *\n     * To retrieve a custom attribute owned by another application, the `visibility` setting must be\n     * `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom\n     * attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param customerId      The ID of the target [customer profile](entity:Customer).\n     * @param key             The key of the custom attribute to retrieve. This key must match the `key` of a\n     *                                   custom attribute definition in the Square seller account. If the requesting\n     *                                   application is not the definition owner, you must use the qualified key.\n     * @param withDefinition  Indicates whether to return the [custom attribute definition](entity:\n     *                                   CustomAttributeDefinition) in the `definition` field of the custom attribute.\n     *                                   Set this parameter to `true` to get the name and description of the custom\n     *                                   attribute, information about the data type, or other definition details. The\n     *                                   default value is `false`.\n     * @param version         The current version of the custom attribute, which is used for strongly\n     *                                   consistent reads to guarantee that you receive the most up-to-date data. When\n     *                                   included in the request, Square returns the specified version or a higher\n     *                                   version if one exists. If the specified version is higher than the current\n     *                                   version, Square returns a `BAD_REQUEST` error.\n     * @return Response from the API call\n     */\n    async retrieveCustomerCustomAttribute(customerId, key, withDefinition, version, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            customerId: [customerId, string()],\n            key: [key, string()],\n            withDefinition: [withDefinition, optional(boolean())],\n            version: [version, optional(number())],\n        });\n        req.query('with_definition', mapped.withDefinition);\n        req.query('version', mapped.version);\n        req.appendTemplatePath `/v2/customers/${mapped.customerId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(retrieveCustomerCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Creates or updates a [custom attribute]($m/CustomAttribute) for a customer profile.\n     *\n     * Use this endpoint to set the value of a custom attribute for a specified customer profile.\n     * A custom attribute is based on a custom attribute definition in a Square seller account, which\n     * is created using the\n     * [CreateCustomerCustomAttributeDefinition]($e/CustomerCustomAttributes/CreateCustomerCustomAttributeD\n     * efinition) endpoint.\n     *\n     * To create or update a custom attribute owned by another application, the `visibility` setting\n     * must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes\n     * (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param customerId   The ID of the target [customer profile](entity:\n     *                                                                    Customer).\n     * @param key          The key of the custom attribute to create or\n     *                                                                    update. This key must match the `key` of a\n     *                                                                    custom attribute definition in the Square\n     *                                                                    seller account. If the requesting application\n     *                                                                    is not the definition owner, you must use the\n     *                                                                    qualified key.\n     * @param body         An object containing the fields to POST for\n     *                                                                    the request.  See the corresponding object\n     *                                                                    definition for field details.\n     * @return Response from the API call\n     */\n    async upsertCustomerCustomAttribute(customerId, key, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            customerId: [customerId, string()],\n            key: [key, string()],\n            body: [body, upsertCustomerCustomAttributeRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/customers/${mapped.customerId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(upsertCustomerCustomAttributeResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=customerCustomAttributesApi.js.map",
      "start": 1707436156472,
      "end": 1707436156565,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707436156565,
      "end": 1707436156565,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707436156565,
      "end": 1707436156566,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707436156566,
      "end": 1707436156566,
      "order": "normal"
    }
  ]
}
