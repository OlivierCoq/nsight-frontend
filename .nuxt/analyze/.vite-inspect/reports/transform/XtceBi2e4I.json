{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/webhookSubscriptionsApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createWebhookSubscriptionRequestSchema, } from '../models/createWebhookSubscriptionRequest';\nimport { createWebhookSubscriptionResponseSchema, } from '../models/createWebhookSubscriptionResponse';\nimport { deleteWebhookSubscriptionResponseSchema, } from '../models/deleteWebhookSubscriptionResponse';\nimport { listWebhookEventTypesResponseSchema, } from '../models/listWebhookEventTypesResponse';\nimport { listWebhookSubscriptionsResponseSchema, } from '../models/listWebhookSubscriptionsResponse';\nimport { retrieveWebhookSubscriptionResponseSchema, } from '../models/retrieveWebhookSubscriptionResponse';\nimport { testWebhookSubscriptionRequestSchema, } from '../models/testWebhookSubscriptionRequest';\nimport { testWebhookSubscriptionResponseSchema, } from '../models/testWebhookSubscriptionResponse';\nimport { updateWebhookSubscriptionRequestSchema, } from '../models/updateWebhookSubscriptionRequest';\nimport { updateWebhookSubscriptionResponseSchema, } from '../models/updateWebhookSubscriptionResponse';\nimport { updateWebhookSubscriptionSignatureKeyRequestSchema, } from '../models/updateWebhookSubscriptionSignatureKeyRequest';\nimport { updateWebhookSubscriptionSignatureKeyResponseSchema, } from '../models/updateWebhookSubscriptionSignatureKeyResponse';\nimport { boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class WebhookSubscriptionsApi extends BaseApi {\n    /**\n     * Lists all webhook event types that can be subscribed to.\n     *\n     * @param apiVersion  The API version for which to list event types. Setting this field overrides the\n     *                              default version used by the application.\n     * @return Response from the API call\n     */\n    async listWebhookEventTypes(apiVersion, requestOptions) {\n        const req = this.createRequest('GET', '/v2/webhooks/event-types');\n        const mapped = req.prepareArgs({\n            apiVersion: [apiVersion, optional(string())],\n        });\n        req.query('api_version', mapped.apiVersion);\n        return req.callAsJson(listWebhookEventTypesResponseSchema, requestOptions);\n    }\n    /**\n     * Lists all webhook subscriptions owned by your application.\n     *\n     * @param cursor           A pagination cursor returned by a previous call to this endpoint. Provide this\n     *                                    to retrieve the next set of results for your original query.  For more\n     *                                    information, see [Pagination](https://developer.squareup.com/docs/build-\n     *                                    basics/common-api-patterns/pagination).\n     * @param includeDisabled  Includes disabled [Subscription](entity:WebhookSubscription)s. By default, all\n     *                                    enabled [Subscription](entity:WebhookSubscription)s are returned.\n     * @param sortOrder        Sorts the returned list by when the [Subscription](entity:WebhookSubscription)\n     *                                    was created with the specified order. This field defaults to ASC.\n     * @param limit            The maximum number of results to be returned in a single page. It is possible\n     *                                    to receive fewer results than the specified limit on a given page. The default\n     *                                    value of 100 is also the maximum allowed value.  Default: 100\n     * @return Response from the API call\n     */\n    async listWebhookSubscriptions(cursor, includeDisabled, sortOrder, limit, requestOptions) {\n        const req = this.createRequest('GET', '/v2/webhooks/subscriptions');\n        const mapped = req.prepareArgs({\n            cursor: [cursor, optional(string())],\n            includeDisabled: [includeDisabled, optional(boolean())],\n            sortOrder: [sortOrder, optional(string())],\n            limit: [limit, optional(number())],\n        });\n        req.query('cursor', mapped.cursor);\n        req.query('include_disabled', mapped.includeDisabled);\n        req.query('sort_order', mapped.sortOrder);\n        req.query('limit', mapped.limit);\n        return req.callAsJson(listWebhookSubscriptionsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a webhook subscription.\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                                request.  See the corresponding object definition\n     *                                                                for field details.\n     * @return Response from the API call\n     */\n    async createWebhookSubscription(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/webhooks/subscriptions');\n        const mapped = req.prepareArgs({\n            body: [body, createWebhookSubscriptionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createWebhookSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a webhook subscription.\n     *\n     * @param subscriptionId  [REQUIRED] The ID of the [Subscription](entity:WebhookSubscription) to delete.\n     * @return Response from the API call\n     */\n    async deleteWebhookSubscription(subscriptionId, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n        });\n        req.appendTemplatePath `/v2/webhooks/subscriptions/${mapped.subscriptionId}`;\n        return req.callAsJson(deleteWebhookSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a webhook subscription identified by its ID.\n     *\n     * @param subscriptionId  [REQUIRED] The ID of the [Subscription](entity:WebhookSubscription) to retrieve.\n     * @return Response from the API call\n     */\n    async retrieveWebhookSubscription(subscriptionId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n        });\n        req.appendTemplatePath `/v2/webhooks/subscriptions/${mapped.subscriptionId}`;\n        return req.callAsJson(retrieveWebhookSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a webhook subscription.\n     *\n     * @param subscriptionId  [REQUIRED] The ID of the [Subscription](entity:\n     *                                                                   WebhookSubscription) to update.\n     * @param body            An object containing the fields to POST for the\n     *                                                                   request.  See the corresponding object\n     *                                                                   definition for field details.\n     * @return Response from the API call\n     */\n    async updateWebhookSubscription(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, updateWebhookSubscriptionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/webhooks/subscriptions/${mapped.subscriptionId}`;\n        return req.callAsJson(updateWebhookSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a webhook subscription by replacing the existing signature key with a new one.\n     *\n     * @param subscriptionId  [REQUIRED] The ID of the\n     *                                                                               [Subscription](entity:\n     *                                                                               WebhookSubscription) to update.\n     * @param body            An object containing the fields to\n     *                                                                               POST for the request.  See the\n     *                                                                               corresponding object definition for\n     *                                                                               field details.\n     * @return Response from the API call\n     */\n    async updateWebhookSubscriptionSignatureKey(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, updateWebhookSubscriptionSignatureKeyRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/webhooks/subscriptions/${mapped.subscriptionId}/signature-key`;\n        return req.callAsJson(updateWebhookSubscriptionSignatureKeyResponseSchema, requestOptions);\n    }\n    /**\n     * Tests a webhook subscription by sending a test event to the notification URL.\n     *\n     * @param subscriptionId  [REQUIRED] The ID of the [Subscription](entity:\n     *                                                                 WebhookSubscription) to test.\n     * @param body            An object containing the fields to POST for the\n     *                                                                 request.  See the corresponding object definition\n     *                                                                 for field details.\n     * @return Response from the API call\n     */\n    async testWebhookSubscription(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, testWebhookSubscriptionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/webhooks/subscriptions/${mapped.subscriptionId}/test`;\n        return req.callAsJson(testWebhookSubscriptionResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=webhookSubscriptionsApi.js.map",
      "start": 1707436156594,
      "end": 1707436156778,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707436156778,
      "end": 1707436156778,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707436156779,
      "end": 1707436156779,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707436156779,
      "end": 1707436156780,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707436156780,
      "end": 1707436156780,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707436156780,
      "end": 1707436156780,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707436156780,
      "end": 1707436156780,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707436156780,
      "end": 1707436156780,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707436156780,
      "end": 1707436156780,
      "order": "normal"
    }
  ]
}
