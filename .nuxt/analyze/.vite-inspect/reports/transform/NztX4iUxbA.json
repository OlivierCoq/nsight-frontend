{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/oAuthApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { obtainTokenRequestSchema, } from '../models/obtainTokenRequest';\nimport { obtainTokenResponseSchema, } from '../models/obtainTokenResponse';\nimport { renewTokenRequestSchema, } from '../models/renewTokenRequest';\nimport { renewTokenResponseSchema, } from '../models/renewTokenResponse';\nimport { retrieveTokenStatusResponseSchema, } from '../models/retrieveTokenStatusResponse';\nimport { revokeTokenRequestSchema, } from '../models/revokeTokenRequest';\nimport { revokeTokenResponseSchema, } from '../models/revokeTokenResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class OAuthApi extends BaseApi {\n    /**\n     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see\n     * [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-\n     * to-refresh-tokens).\n     *\n     * Renews an OAuth access token before it expires.\n     *\n     * OAuth access tokens besides your application's personal access token expire after 30 days.\n     * You can also renew expired tokens within 15 days of their expiration.\n     * You cannot renew an access token that has been expired for more than 15 days.\n     * Instead, the associated user must recomplete the OAuth flow from the beginning.\n     *\n     * __Important:__ The `Authorization` header for this endpoint must have the\n     * following format:\n     *\n     * ```\n     * Authorization: Client APPLICATION_SECRET\n     * ```\n     *\n     * Replace `APPLICATION_SECRET` with the application secret on the **Credentials**\n     * page in the [Developer Dashboard](https://developer.squareup.com/apps).\n     *\n     * @param clientId      Your application ID, which is available on the **OAuth** page in\n     *                                                  the [Developer Dashboard](https://developer.squareup.com/apps).\n     * @param body          An object containing the fields to POST for the request.  See\n     *                                                  the corresponding object definition for field details.\n     * @param authorization Client APPLICATION_SECRET\n     * @return Response from the API call\n     * @deprecated\n     */\n    async renewToken(clientId, body, authorization, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            clientId: [clientId, string()],\n            body: [body, renewTokenRequestSchema],\n            authorization: [authorization, string()],\n        });\n        req.header('Content-Type', 'application/json');\n        req.header('Authorization', mapped.authorization);\n        req.json(mapped.body);\n        req.appendTemplatePath `/oauth2/clients/${mapped.clientId}/access-token/renew`;\n        req.deprecated('OAuthApi.renewToken');\n        req.authenticate(false);\n        return req.callAsJson(renewTokenResponseSchema, requestOptions);\n    }\n    /**\n     * Revokes an access token generated with the OAuth flow.\n     *\n     * If an account has more than one OAuth access token for your application, this\n     * endpoint revokes all of them, regardless of which token you specify.\n     *\n     * __Important:__ The `Authorization` header for this endpoint must have the\n     * following format:\n     *\n     * ```\n     * Authorization: Client APPLICATION_SECRET\n     * ```\n     *\n     * Replace `APPLICATION_SECRET` with the application secret on the **OAuth**\n     * page for your application in the Developer Dashboard.\n     *\n     * @param body          An object containing the fields to POST for the request.  See\n     *                                                   the corresponding object definition for field details.\n     * @param authorization Client APPLICATION_SECRET\n     * @return Response from the API call\n     */\n    async revokeToken(body, authorization, requestOptions) {\n        const req = this.createRequest('POST', '/oauth2/revoke');\n        const mapped = req.prepareArgs({\n            body: [body, revokeTokenRequestSchema],\n            authorization: [authorization, string()],\n        });\n        req.header('Content-Type', 'application/json');\n        req.header('Authorization', mapped.authorization);\n        req.json(mapped.body);\n        req.authenticate(false);\n        return req.callAsJson(revokeTokenResponseSchema, requestOptions);\n    }\n    /**\n     * Returns an OAuth access token and a refresh token unless the\n     * `short_lived` parameter is set to `true`, in which case the endpoint\n     * returns only an access token.\n     *\n     * The `grant_type` parameter specifies the type of OAuth request. If\n     * `grant_type` is `authorization_code`, you must include the authorization\n     * code you received when a seller granted you authorization. If `grant_type`\n     * is `refresh_token`, you must provide a valid refresh token. If you're using\n     * an old version of the Square APIs (prior to March 13, 2019), `grant_type`\n     * can be `migration_token` and you must provide a valid migration token.\n     *\n     * You can use the `scopes` parameter to limit the set of permissions granted\n     * to the access token and refresh token. You can use the `short_lived` parameter\n     * to create an access token that expires in 24 hours.\n     *\n     * __Note:__ OAuth tokens should be encrypted and stored on a secure server.\n     * Application clients should never interact directly with OAuth tokens.\n     *\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                  the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async obtainToken(body, requestOptions) {\n        const req = this.createRequest('POST', '/oauth2/token');\n        const mapped = req.prepareArgs({ body: [body, obtainTokenRequestSchema] });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.authenticate(false);\n        return req.callAsJson(obtainTokenResponseSchema, requestOptions);\n    }\n    /**\n     * Returns information about an [OAuth access token](https://developer.squareup.com/docs/build-\n     * basics/access-tokens#get-an-oauth-access-token) or an application’s [personal access token](https:\n     * //developer.squareup.com/docs/build-basics/access-tokens#get-a-personal-access-token).\n     *\n     * Add the access token to the Authorization header of the request.\n     *\n     * __Important:__ The `Authorization` header you provide to this endpoint must have the following\n     * format:\n     *\n     * ```\n     * Authorization: Bearer ACCESS_TOKEN\n     * ```\n     *\n     * where `ACCESS_TOKEN` is a\n     * [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-\n     * tokens).\n     *\n     * If the access token is expired or not a valid access token, the endpoint returns an `UNAUTHORIZED`\n     * error.\n     *\n     * @param authorization Client APPLICATION_SECRET\n     * @return Response from the API call\n     */\n    async retrieveTokenStatus(authorization, requestOptions) {\n        const req = this.createRequest('POST', '/oauth2/token/status');\n        const mapped = req.prepareArgs({\n            authorization: [authorization, string()],\n        });\n        req.header('Authorization', mapped.authorization);\n        req.authenticate(false);\n        return req.callAsJson(retrieveTokenStatusResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=oAuthApi.js.map",
      "start": 1707437860320,
      "end": 1707437860477,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707437860477,
      "end": 1707437860477,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707437860477,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707437860478,
      "end": 1707437860478,
      "order": "normal"
    }
  ]
}
