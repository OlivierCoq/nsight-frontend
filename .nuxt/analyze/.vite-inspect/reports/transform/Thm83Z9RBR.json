{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/giftCardsApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createGiftCardRequestSchema, } from '../models/createGiftCardRequest';\nimport { createGiftCardResponseSchema, } from '../models/createGiftCardResponse';\nimport { linkCustomerToGiftCardRequestSchema, } from '../models/linkCustomerToGiftCardRequest';\nimport { linkCustomerToGiftCardResponseSchema, } from '../models/linkCustomerToGiftCardResponse';\nimport { listGiftCardsResponseSchema, } from '../models/listGiftCardsResponse';\nimport { retrieveGiftCardFromGANRequestSchema, } from '../models/retrieveGiftCardFromGANRequest';\nimport { retrieveGiftCardFromGANResponseSchema, } from '../models/retrieveGiftCardFromGANResponse';\nimport { retrieveGiftCardFromNonceRequestSchema, } from '../models/retrieveGiftCardFromNonceRequest';\nimport { retrieveGiftCardFromNonceResponseSchema, } from '../models/retrieveGiftCardFromNonceResponse';\nimport { retrieveGiftCardResponseSchema, } from '../models/retrieveGiftCardResponse';\nimport { unlinkCustomerFromGiftCardRequestSchema, } from '../models/unlinkCustomerFromGiftCardRequest';\nimport { unlinkCustomerFromGiftCardResponseSchema, } from '../models/unlinkCustomerFromGiftCardResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class GiftCardsApi extends BaseApi {\n    /**\n     * Lists all gift cards. You can specify optional filters to retrieve\n     * a subset of the gift cards. Results are sorted by `created_at` in ascending order.\n     *\n     * @param type        If a [type](entity:GiftCardType) is provided, the endpoint returns gift cards of the\n     *                              specified type. Otherwise, the endpoint returns gift cards of all types.\n     * @param state       If a [state](entity:GiftCardStatus) is provided, the endpoint returns the gift cards\n     *                              in the specified state. Otherwise, the endpoint returns the gift cards of all states.\n     * @param limit       If a limit is provided, the endpoint returns only the specified number of results\n     *                              per page. The maximum value is 200. The default value is 30. For more information,\n     *                              see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n     * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n     *                              cursor to retrieve the next set of results for the original query. If a cursor is not\n     *                              provided, the endpoint returns the first page of the results.  For more information,\n     *                              see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n     * @param customerId  If a customer ID is provided, the endpoint returns only the gift cards linked to the\n     *                              specified customer.\n     * @return Response from the API call\n     */\n    async listGiftCards(type, state, limit, cursor, customerId, requestOptions) {\n        const req = this.createRequest('GET', '/v2/gift-cards');\n        const mapped = req.prepareArgs({\n            type: [type, optional(string())],\n            state: [state, optional(string())],\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n            customerId: [customerId, optional(string())],\n        });\n        req.query('type', mapped.type);\n        req.query('state', mapped.state);\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        req.query('customer_id', mapped.customerId);\n        return req.callAsJson(listGiftCardsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a digital gift card or registers a physical (plastic) gift card. After the gift card\n     * is created, you must call [CreateGiftCardActivity]($e/GiftCardActivities/CreateGiftCardActivity)\n     * to activate the card with an initial balance before it can be used for payment.\n     *\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                     the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async createGiftCard(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/gift-cards');\n        const mapped = req.prepareArgs({\n            body: [body, createGiftCardRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createGiftCardResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a gift card using the gift card account number (GAN).\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                              request.  See the corresponding object definition for\n     *                                                              field details.\n     * @return Response from the API call\n     */\n    async retrieveGiftCardFromGAN(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/gift-cards/from-gan');\n        const mapped = req.prepareArgs({\n            body: [body, retrieveGiftCardFromGANRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(retrieveGiftCardFromGANResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a gift card using a secure payment token that represents the gift card.\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                                request.  See the corresponding object definition\n     *                                                                for field details.\n     * @return Response from the API call\n     */\n    async retrieveGiftCardFromNonce(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/gift-cards/from-nonce');\n        const mapped = req.prepareArgs({\n            body: [body, retrieveGiftCardFromNonceRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(retrieveGiftCardFromNonceResponseSchema, requestOptions);\n    }\n    /**\n     * Links a customer to a gift card, which is also referred to as adding a card on file.\n     *\n     * @param giftCardId   The ID of the gift card to be linked.\n     * @param body         An object containing the fields to POST for the\n     *                                                             request.  See the corresponding object definition for\n     *                                                             field details.\n     * @return Response from the API call\n     */\n    async linkCustomerToGiftCard(giftCardId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            giftCardId: [giftCardId, string()],\n            body: [body, linkCustomerToGiftCardRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/gift-cards/${mapped.giftCardId}/link-customer`;\n        return req.callAsJson(linkCustomerToGiftCardResponseSchema, requestOptions);\n    }\n    /**\n     * Unlinks a customer from a gift card, which is also referred to as removing a card on file.\n     *\n     * @param giftCardId   The ID of the gift card to be unlinked.\n     * @param body         An object containing the fields to POST for the\n     *                                                                 request.  See the corresponding object definition\n     *                                                                 for field details.\n     * @return Response from the API call\n     */\n    async unlinkCustomerFromGiftCard(giftCardId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            giftCardId: [giftCardId, string()],\n            body: [body, unlinkCustomerFromGiftCardRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/gift-cards/${mapped.giftCardId}/unlink-customer`;\n        return req.callAsJson(unlinkCustomerFromGiftCardResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a gift card using the gift card ID.\n     *\n     * @param id The ID of the gift card to retrieve.\n     * @return Response from the API call\n     */\n    async retrieveGiftCard(id, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({ id: [id, string()] });\n        req.appendTemplatePath `/v2/gift-cards/${mapped.id}`;\n        return req.callAsJson(retrieveGiftCardResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=giftCardsApi.js.map",
      "start": 1707436156484,
      "end": 1707436156581,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707436156581,
      "end": 1707436156581,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707436156581,
      "end": 1707436156585,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707436156585,
      "end": 1707436156585,
      "order": "normal"
    }
  ]
}
