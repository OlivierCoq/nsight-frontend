{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/ParseError.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map",
      "start": 1709272110525,
      "end": 1709272110577,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272110577,
      "end": 1709272110577,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272110577,
      "end": 1709272110578,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272110578,
      "end": 1709272110578,
      "order": "normal"
    }
  ]
}
