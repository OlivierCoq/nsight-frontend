{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nexport default function getCountryByNationalNumber(nationalPhoneNumber, _ref) {\n  var countries = _ref.countries,\n      defaultCountry = _ref.defaultCountry,\n      metadata = _ref.metadata;\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n  var matchingCountries = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(countries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // \"Leading digits\" patterns are only defined for about 20% of all countries.\n    // By definition, matching \"leading digits\" is a sufficient but not a necessary\n    // condition for a phone number to belong to a country.\n    // The point of \"leading digits\" check is that it's the fastest one to get a match.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // I'd suppose that \"leading digits\" patterns are mutually exclusive for different countries\n    // because of the intended use of that feature.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      // If the `defaultCountry` is among the `matchingCountries` then return it.\n      if (defaultCountry) {\n        if (country === defaultCountry) {\n          return country;\n        }\n\n        matchingCountries.push(country);\n      } else {\n        return country;\n      }\n    }\n  } // Return the first (\"main\") one of the `matchingCountries`.\n\n\n  if (matchingCountries.length > 0) {\n    return matchingCountries[0];\n  }\n}\n//# sourceMappingURL=getCountryByNationalNumber.js.map",
      "start": 1709272110614,
      "end": 1709272110657,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272110657,
      "end": 1709272110657,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272110657,
      "end": 1709272110657,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272110657,
      "end": 1709272110657,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272110657,
      "end": 1709272110657,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272110657,
      "end": 1709272110657,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272110657,
      "end": 1709272110657,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272110657,
      "end": 1709272110657,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272110658,
      "end": 1709272110658,
      "order": "normal"
    }
  ]
}
