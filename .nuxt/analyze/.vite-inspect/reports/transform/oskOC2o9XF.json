{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/pages/dashboard.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <v-row v-if=\"auth.user\" id=\"dashboard\" :class=\"auth.user.preferences[0].dark_mode ? 'bg-dark' : 'bg-light'\">\n    <v-col class=\"h-100\">\n      <v-card :theme=\"auth.user.preferences[0].dark_mode ? 'dark' : 'light'\" class=\"mx-3 my-3 h-100 overflow-auto\">\n        <v-card-title>let's get it</v-card-title>\n\n        <!-- Tabs -->\n        <v-card-text>\n          <v-tabs v-model=\"state.current_tab\">\n            <v-tab v-for=\"(tab, a) in state.tabs\" :key=\"a\">\n              {{ tab.name }}\n            </v-tab>\n          </v-tabs>\n\n          <!-- Tab content -->\n          <v-window v-model=\"state.current_tab\">\n            <div v-if=\"state.current_tab == 1\">\n              <v-row class=\"my-3\">\n\n                <!-- Member cards -->\n                <v-col v-for=\"(user, b) in auth.user.friends\" :key=\"b\" cols=\"12\" sm=\"6\" md=\"3\" lg=\"2\" xl=\"1\">\n                  <DashboardMemberCard :member=\"user\" />\n                </v-col>\n\n                <!-- Add new member card -->\n                <v-col cols=\"12\" sm=\"6\" md=\"3\" lg=\"2\" xl=\"1\">\n                  <v-card variant=\"tonal\" class=\"w-100 h-100\">\n                    <v-card-text class=\"d-flex w-100 h-100 justify-center align-center\">\n                      <v-btn @click=\"state.tabs[1].data.adding_new = true\" flat>\n                        <strong style=\"font-size: 200%\">+</strong>\n                        <v-tooltip activator=\"parent\" location=\"top\" open-delay=\"500\">Invite new member</v-tooltip>\n\n                        <!-- Add new member dialog -->\n                        <v-dialog v-model=\"state.tabs[1].data.adding_new\" width=\"600\">\n                          <v-row>\n                            <v-col>\n                              <v-card flat variant=\"flat\">\n                                <v-card-title>\n                                  <span class=\"headline\">invite new member</span>\n                                </v-card-title>\n                                <v-card-text>\n                                  <v-form>\n                                    <v-row>\n                                      <v-col>\n                                        <v-text-field v-model=\"state.tabs[1].data.new_member.first_name\"\n                                          label=\"First Name\" required />\n                                      </v-col>\n                                      <v-col>\n                                        <v-text-field v-model=\"state.tabs[1].data.new_member.last_name\" label=\"Last Name\"\n                                          required />\n                                      </v-col>\n                                    </v-row>\n                                    <v-text-field v-model=\"state.tabs[1].data.new_member.email\" label=\"Email\"\n                                      required></v-text-field>\n                                  </v-form>\n                                </v-card-text>\n                                <v-card-actions>\n                                  <v-spacer></v-spacer>\n                                  <v-btn color=\"blue darken-1\" text\n                                    @click=\"state.tabs[1].data.adding_new = false\">Cancel</v-btn>\n                                  <v-btn :disabled=\"!state.validate\" color=\"blue darken-1\" text\n                                    @click=\"post_new_member\">Invite</v-btn>\n                                </v-card-actions>\n                              </v-card>\n                            </v-col>\n                          </v-row>\n                        </v-dialog>\n                      </v-btn>\n                    </v-card-text>\n                  </v-card>\n                </v-col>\n              </v-row>\n            </div>\n          </v-window>\n        </v-card-text>\n      </v-card>\n    </v-col>\n  </v-row>\n</template>\n<script setup lang=\"ts\">\n\n// Page meta\ndefinePageMeta({\n  title: 'Dashboard',\n  description: 'Dashboard',\n  url: '/dashboard',\n  middleware: ['auth'],\n  layout: 'inner'\n})\n\n// necessary imports\nimport moment from 'moment'\nimport qs from 'qs'\n\n// oFetch\nimport { ofetch } from 'ofetch'\nconst runtimeConfig = useRuntimeConfig()\n\n// globalThis.$fetch = ofetch.create({ \n//   headers: {\n//     'Content-Type': 'application/json',\n//     'X-Authorization': runtimeConfig.apiSecret\n//   }\n// })\n\n// Medusa\nconst medusa_client = useMedusaClient()\n\n// Stores\nconst auth = authStore()\n\n// State\nconst state = reactive({\n  current_user: authStore.user,\n  current_tab: null,\n  dark_mode: false,\n  error: false,\n  use_the_force: false,\n  tabs: [\n    {\n      name: 'My Profile',\n      data: {}\n    },\n    {\n      name: 'My Members',\n      data: {\n        adding_new: false,\n        posting_new: false,\n        post: null,\n        new_member: {\n          email: '',\n          first_name: '',\n          last_name: '',\n          n_id: `nsight-${auth.user.id}-${moment().format('MMDDYYYY-hmmss')}`\n        }\n      }\n    }\n  ],\n  validate: false\n})\n\n// Methods\nconst generate_random_password = () => {\n  let pass = ``,\n    str = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$`\n  for (let i = 1; i <= 8; i++) {\n    var char = Math.floor(Math.random()\n      * str.length + 1);\n    pass += str.charAt(char)\n  }\n  return pass;\n}\nconst validateEmail = (email) => {\n  return email.toString().toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n}\nconst new_n_id = () => {\n  state.tabs[1].data.new_member.n_id = `nsight-${auth.user.id}-${moment().format('MMDDYYYY-hmmss')}`\n}\n\n\n/*\n  Steps:\n  1. Do a search to /api/nsight-ids to see if the n_id is already taken. Use the qs library to stringify the params:\n    qs.stringify({ n_id: state.tabs[1].data.new_member.n_id })\n  2. If the n_id is taken, generate a new one and try again? maybe\n    state.tabs[1].data.new_member.n_id = `nsight-${auth.user.id}-${moment().format('MMDDYYYY-hmmss')}`\n  3. Add the nsight_id to /api/nsight-ids:\n    globalThis.$fetch.post('/api/nsight-ids', { n_id: state.tabs[1].data.new_member.n_id })\n  4. Add the user to /api/users:\n    globalThis.$fetch.post('/api/users', {\n      email: state.tabs[1].data.new_member.email,\n      first_name: state.tabs[1].data.new_member.first_name,\n      last_name: state.tabs[1].data.new_member.last_name,\n      password: generate_random_password(),\n      nsight_id: state.tabs[1].data.new_member.n_id\n    })\n  5. Add user to Medusa by using medusa.customers.create()\n  6. Add user to your friends list\n  7. Send email confirmation to new member\n  8. Update on your DB that the user has been added\n\n*/\n\nconst post_new_member = async () => {\n\n  let active_tab = state.tabs[1]\n  active_tab.data.posting_new = true\n\n  const headers_obj = {\n    'Content-Type': 'application/json',\n    'accept': 'application/json',\n    'Authorization': `Bearer ${auth.token}`\n  }\n\n  active_tab.post = $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?${qs.stringify(\n    {\n      filters: {\n        nsight_id: state.tabs[1].data.new_member.n_id\n      }\n    })}`, {\n    method: 'GET',\n    headers: headers_obj\n  })\n    .then((res) => {\n\n      // If none found, add the nsight_id to the nsight-ids table\n      if (!res.data.length) {\n\n        // Add the nsight_id to the nsight-ids table\n        let new_nsight_id = {\n          data: {\n            authentic: true,\n            nsight_id: active_tab.data.new_member.n_id\n          }\n        }\n        $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?populate=*`, {\n          method: 'POST',\n          headers: headers_obj,\n          body: JSON.stringify(new_nsight_id)\n        })\n          .then((data) => {\n\n            console.log('New nsight id added', data)\n            const new_strapi_nsight_id = data.data\n\n            // Add the user to the users table\n            let new_nsight_member = {\n              blocked: false,\n              confirmed: false,\n              email: active_tab.data.new_member.email,\n              first_name: active_tab.data.new_member.first_name,\n              last_name: active_tab.data.new_member.last_name,\n              nsight_id: new_strapi_nsight_id,\n              preferences: [{\n                dark_mode: true\n              }],\n              username: active_tab.data.new_member.email,\n              // password: thisObj.generate_random_password()\n              password: 'P@ssW3rd9756',\n              users: [auth.user],\n              friends: [auth.user],\n              role: {\n                id: 1,\n                name: 'Authenticated',\n                description: 'Default role given to authenticated user.',\n                type: 'authenticated',\n                connect: [\n                  {\n                    id: 1,\n                  }\n                ]\n              }\n            }\n\n            $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/users`, {\n              method: 'POST',\n              headers: headers_obj,\n              body: JSON.stringify(new_nsight_member)\n            })\n              .then((data) => {\n                console.log('created new strapi member: ', data)\n                const new_strapi_user = data\n\n\n                // update nsight_id with new user\n                $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids/${new_strapi_nsight_id.id}`, {\n                  method: 'PUT',\n                  headers: headers_obj,\n                  body: JSON.stringify({\n                    data: {\n                      user: [new_strapi_user]\n                    }\n                  })\n                })\n                  .then((data) => {\n                    console.log('updated nsight_id with new user: ', data)\n\n\n                    // Add the user to Medusa\n                    medusa_client.customers.create({\n                      first_name: new_nsight_member.first_name,\n                      last_name: new_nsight_member.last_name,\n                      password: new_nsight_member.password,\n                      email: new_nsight_member.email\n                    })\n                      .then((data) => {\n                        console.log('created new medusa member: ', data)\n\n                        // Update Strapi with medusa_id\n                        $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${new_strapi_user.id}`, {\n                          method: 'PUT',\n                          headers: headers_obj,\n                          body: JSON.stringify({\n                            data: {\n                              medusa_id: data.id\n                            }\n                          })\n                        })\n                          .then((data) => {\n                            console.log('updated strapi user with medusa_id: ', data)\n\n\n                            // Add the user to your friends list\n                            // There's an issue right now with friends vs users. I'm adding to both for now.\n                            auth.user.friends.push(data)\n                            auth.user.users.push(data)\n                            state.tabs[1].data.adding_new = false\n\n                            nextTick(() => {\n                              $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${auth.user.id}`, {\n                                method: 'PUT',\n                                headers: headers_obj,\n                                body: JSON.stringify({ data: auth.user })\n                              })\n                                .then((data) => {\n                                  console.log('updated strapi user with new member: ', data)\n\n\n                                  // Send email confirmation to new member\n                                  $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/auth/send-email-confirmation`, {\n                                    method: 'POST',\n                                    headers: headers_obj,\n                                    body: JSON.stringify({ email: active_tab.data.new_member.email })\n                                  })\n                                    .then((data) => {\n                                      console.log('email confirmation sent to new member: ', data)\n                                      active_tab.data.posting_new = false\n                                    })\n                                    .catch((err) => { console.log('error sending email confirmation to new member: ', err); state.error = err })\n                                })\n                                .catch((err) => { console.log('error updating strapi user with new member: ', err); state.error = err })\n                            })\n\n                          })\n                          .catch((err) => { console.log('error updating strapi user with medusa_id: ', err); state.error = err })\n                      })\n                      .catch((err) => { console.log('error creating new medusa member: ', err); state.error = err })\n                  })\n                  .catch((err) => { console.log('error updating nsight_id with new user: ', err); state.error = err })\n              })\n              .catch((err) => { console.log('error creating new member: ', err); state.error = err })\n          })\n          .catch((err) => { state.error = err })\n      } else {\n        const mssg = `nsight id already exists. Please try again.`\n        console.log(mssg, res.data)\n        state.error = mssg\n      }\n    })\n    .catch((err) => {\n      console.log('nsight error', err)\n      return err\n    })\n\n}\n\n// Watch\n\n// email: \nwatch(() => state.tabs[1].data.new_member.email, (val) => {\n  state.validate = (val.length > 0) && (validateEmail(val))\n})\n// first_name:\nwatch(() => state.tabs[1].data.new_member.first_name, (val) => {\n  state.validate = val.length > 0\n})\n</script>\n<style lang=\"scss\" scoped>\n#dashboard {\n  height: 100vh;\n}\n</style>",
      "start": 1705807630190,
      "end": 1705807630413,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1705807630413,
      "end": 1705807630413,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1705807630413,
      "end": 1705807630413,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1705807630413,
      "end": 1705807630413,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1705807630413,
      "end": 1705807630413,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1705807630413,
      "end": 1705807630413,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1705807630413,
      "end": 1705807630413,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1705807630413,
      "end": 1705807630413,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import _sfc_main from \"/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/pages/dashboard.vue?vue&type=script&setup=true&lang.ts\";\nexport * from \"/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/pages/dashboard.vue?vue&type=script&setup=true&lang.ts\";\nimport \"/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/pages/dashboard.vue?vue&type=style&index=0&scoped=f1b6d948&lang.scss\";\nimport _export_sfc from \"\\0plugin-vue:export-helper\";\nexport default /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__scopeId\", \"data-v-f1b6d948\"]]);\n",
      "start": 1705807630413,
      "end": 1705807631880,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1705807631880,
      "end": 1705807631880,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1705807631880,
      "end": 1705807631880,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1705807631880,
      "end": 1705807631880,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1705807631880,
      "end": 1705807631880,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1705807631880,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1705807631881,
      "end": 1705807631881,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1705807631882,
      "end": 1705807631882,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1705807631882,
      "end": 1705807631882,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1705807631882,
      "end": 1705807631882,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1705807631882,
      "end": 1705807631882,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1705807631882,
      "end": 1705807631883,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1705807631883,
      "end": 1705807631883,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1705807631883,
      "end": 1705807631883,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1705807631883,
      "end": 1705807631883,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1705807631883,
      "end": 1705807631883,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1705807631883,
      "end": 1705807631883,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1705807631883,
      "end": 1705807631883,
      "order": "normal"
    }
  ]
}
