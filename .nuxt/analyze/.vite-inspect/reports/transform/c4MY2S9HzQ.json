{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map",
      "start": 1709003848995,
      "end": 1709003849047,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003849047,
      "end": 1709003849047,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003849047,
      "end": 1709003849048,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003849048,
      "end": 1709003849048,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003849048,
      "end": 1709003849048,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003849048,
      "end": 1709003849048,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003849048,
      "end": 1709003849048,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003849048,
      "end": 1709003849048,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003849048,
      "end": 1709003849048,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003849048,
      "end": 1709003849048,
      "order": "normal"
    }
  ]
}
