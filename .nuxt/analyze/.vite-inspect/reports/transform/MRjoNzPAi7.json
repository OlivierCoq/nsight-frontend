{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/@apimatic/schema/es/types/oneOf.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __values } from 'tslib';\nfunction oneOf(schemas, discriminatorMap, discriminatorField) {\n  if (discriminatorMap && discriminatorField) {\n    return createOneOfWithDiscriminator(schemas, discriminatorMap, discriminatorField);\n  } else {\n    return createOneOfWithoutDiscriminator(schemas);\n  }\n}\nfunction createOneOfWithDiscriminator(schemas, discriminatorMap, discriminatorField) {\n  return {\n    type: function () {\n      return \"OneOf<\" + schemas.map(function (schema) {\n        return schema.type();\n      }).join(' | ') + \">\";\n    },\n    validateBeforeMap: function (value, ctxt) {\n      var discriminatorValue = value && typeof value === 'object' && value[discriminatorField];\n      if (discriminatorValue && discriminatorMap[discriminatorValue]) {\n        return discriminatorMap[discriminatorValue].validateBeforeMap(value, ctxt);\n      }\n      return matchAndValidateBeforeMap(schemas, value, ctxt);\n    },\n    validateBeforeUnmap: function (value, ctxt) {\n      var discriminatorValue = value && typeof value === 'object' && value[discriminatorField];\n      if (discriminatorValue && discriminatorMap[discriminatorValue]) {\n        return discriminatorMap[discriminatorValue].validateBeforeUnmap(value, ctxt);\n      }\n      return matchAndValidateBeforeUnmap(schemas, value, ctxt);\n    },\n    map: function (value, ctxt) {\n      var discriminatorValue = value && value[discriminatorField];\n      if (discriminatorValue && discriminatorMap[discriminatorValue]) {\n        return discriminatorMap[discriminatorValue].map(value, ctxt);\n      }\n      return matchAndMap(schemas, value, ctxt);\n    },\n    unmap: function (value, ctxt) {\n      var discriminatorValue = value && value[discriminatorField];\n      if (discriminatorValue && discriminatorMap[discriminatorValue]) {\n        return discriminatorMap[discriminatorValue].unmap(value, ctxt);\n      }\n      return matchAndUnmap(schemas, value, ctxt);\n    },\n    validateBeforeMapXml: function (value, ctxt) {\n      var discriminatorValue = value && typeof value === 'object' && value[discriminatorField];\n      if (discriminatorValue && discriminatorMap[discriminatorValue]) {\n        return discriminatorMap[discriminatorValue].validateBeforeMapXml(value, ctxt);\n      }\n      return matchAndValidateBeforeMapXml(schemas, value, ctxt);\n    },\n    mapXml: function (value, ctxt) {\n      var discriminatorValue = value && value[discriminatorField];\n      if (discriminatorValue && discriminatorMap[discriminatorValue]) {\n        return discriminatorMap[discriminatorValue].mapXml(value, ctxt);\n      }\n      return matchAndMapXml(schemas, value, ctxt);\n    },\n    unmapXml: function (value, ctxt) {\n      var discriminatorValue = value && value[discriminatorField];\n      if (discriminatorValue && discriminatorMap[discriminatorValue]) {\n        return discriminatorMap[discriminatorValue].unmapXml(value, ctxt);\n      }\n      return matchAndUnmapXml(schemas, value, ctxt);\n    }\n  };\n}\nfunction createOneOfWithoutDiscriminator(schemas) {\n  return {\n    type: function () {\n      return \"OneOf<\" + schemas.map(function (schema) {\n        return schema.type();\n      }).join(' | ') + \">\";\n    },\n    validateBeforeMap: function (value, ctxt) {\n      return matchAndValidateBeforeMap(schemas, value, ctxt);\n    },\n    validateBeforeUnmap: function (value, ctxt) {\n      return matchAndValidateBeforeUnmap(schemas, value, ctxt);\n    },\n    map: function (value, ctxt) {\n      return matchAndMap(schemas, value, ctxt);\n    },\n    unmap: function (value, ctxt) {\n      return matchAndUnmap(schemas, value, ctxt);\n    },\n    validateBeforeMapXml: function (value, ctxt) {\n      return matchAndValidateBeforeMapXml(schemas, value, ctxt);\n    },\n    mapXml: function (value, ctxt) {\n      return matchAndMapXml(schemas, value, ctxt);\n    },\n    unmapXml: function (value, ctxt) {\n      return matchAndUnmapXml(schemas, value, ctxt);\n    }\n  };\n}\nfunction matchAndValidateBeforeMap(schemas, value, ctxt) {\n  var e_1, _a;\n  var matchedSchemas = [];\n  ctxt.strictValidation = true;\n  try {\n    for (var schemas_1 = __values(schemas), schemas_1_1 = schemas_1.next(); !schemas_1_1.done; schemas_1_1 = schemas_1.next()) {\n      var schema = schemas_1_1.value;\n      var validationErrors = schema.validateBeforeMap(value, ctxt);\n      if (validationErrors.length === 0) {\n        matchedSchemas.push(schema);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (schemas_1_1 && !schemas_1_1.done && (_a = schemas_1.return)) _a.call(schemas_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return validateSchemas(matchedSchemas, ctxt);\n}\nfunction matchAndValidateBeforeUnmap(schemas, value, ctxt) {\n  var e_2, _a;\n  var matchedSchemas = [];\n  ctxt.strictValidation = true;\n  try {\n    for (var schemas_2 = __values(schemas), schemas_2_1 = schemas_2.next(); !schemas_2_1.done; schemas_2_1 = schemas_2.next()) {\n      var schema = schemas_2_1.value;\n      var validationErrors = schema.validateBeforeUnmap(value, ctxt);\n      if (validationErrors.length === 0) {\n        matchedSchemas.push(schema);\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (schemas_2_1 && !schemas_2_1.done && (_a = schemas_2.return)) _a.call(schemas_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  return validateSchemas(matchedSchemas, ctxt);\n}\nfunction matchAndValidateBeforeMapXml(schemas, value, ctxt) {\n  var e_3, _a;\n  var matchedSchemas = [];\n  ctxt.strictValidation = true;\n  try {\n    for (var schemas_3 = __values(schemas), schemas_3_1 = schemas_3.next(); !schemas_3_1.done; schemas_3_1 = schemas_3.next()) {\n      var schema = schemas_3_1.value;\n      var validationErrors = schema.validateBeforeMapXml(value, ctxt);\n      if (validationErrors.length === 0) {\n        matchedSchemas.push(schema);\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (schemas_3_1 && !schemas_3_1.done && (_a = schemas_3.return)) _a.call(schemas_3);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n  return validateSchemas(matchedSchemas, ctxt);\n}\nfunction validateSchemas(schemas, ctxt) {\n  if (schemas.length === 1) {\n    return [];\n  }\n  if (schemas.length === 0) {\n    return ctxt.fail('Could not match against any acceptable type.');\n  }\n  return ctxt.fail(\"Matched more than one type. Matched types include: \" + schemas.map(function (schema) {\n    return schema.type();\n  }).join(', '));\n}\nfunction matchAndMap(schemas, value, ctxt) {\n  var e_4, _a;\n  var matchedSchemas = [];\n  ctxt.strictValidation = true;\n  try {\n    for (var schemas_4 = __values(schemas), schemas_4_1 = schemas_4.next(); !schemas_4_1.done; schemas_4_1 = schemas_4.next()) {\n      var schema = schemas_4_1.value;\n      if (schema.validateBeforeMap(value, ctxt).length === 0) {\n        matchedSchemas.push(schema);\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (schemas_4_1 && !schemas_4_1.done && (_a = schemas_4.return)) _a.call(schemas_4);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  return matchedSchemas.length === 1 ? matchedSchemas[0].map(value, ctxt) : undefined;\n}\nfunction matchAndUnmap(schemas, value, ctxt) {\n  var e_5, _a;\n  var matchedSchemas = [];\n  ctxt.strictValidation = true;\n  try {\n    for (var schemas_5 = __values(schemas), schemas_5_1 = schemas_5.next(); !schemas_5_1.done; schemas_5_1 = schemas_5.next()) {\n      var schema = schemas_5_1.value;\n      if (schema.validateBeforeUnmap(value, ctxt).length === 0) {\n        matchedSchemas.push(schema);\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (schemas_5_1 && !schemas_5_1.done && (_a = schemas_5.return)) _a.call(schemas_5);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n  return matchedSchemas.length === 1 ? matchedSchemas[0].unmap(value, ctxt) : undefined;\n}\nfunction matchAndMapXml(schemas, value, ctxt) {\n  var e_6, _a;\n  var matchedSchemas = [];\n  ctxt.strictValidation = true;\n  try {\n    for (var schemas_6 = __values(schemas), schemas_6_1 = schemas_6.next(); !schemas_6_1.done; schemas_6_1 = schemas_6.next()) {\n      var schema = schemas_6_1.value;\n      if (schema.validateBeforeMapXml(value, ctxt).length === 0) {\n        matchedSchemas.push(schema);\n      }\n    }\n  } catch (e_6_1) {\n    e_6 = {\n      error: e_6_1\n    };\n  } finally {\n    try {\n      if (schemas_6_1 && !schemas_6_1.done && (_a = schemas_6.return)) _a.call(schemas_6);\n    } finally {\n      if (e_6) throw e_6.error;\n    }\n  }\n  return matchedSchemas.length === 1 ? matchedSchemas[0].mapXml(value, ctxt) : undefined;\n}\nfunction matchAndUnmapXml(schemas, value, ctxt) {\n  var e_7, _a;\n  var matchedSchemas = [];\n  ctxt.strictValidation = true;\n  try {\n    for (var schemas_7 = __values(schemas), schemas_7_1 = schemas_7.next(); !schemas_7_1.done; schemas_7_1 = schemas_7.next()) {\n      var schema = schemas_7_1.value;\n      if (schema.validateBeforeMapXml(value, ctxt).length === 0) {\n        matchedSchemas.push(schema);\n      }\n    }\n  } catch (e_7_1) {\n    e_7 = {\n      error: e_7_1\n    };\n  } finally {\n    try {\n      if (schemas_7_1 && !schemas_7_1.done && (_a = schemas_7.return)) _a.call(schemas_7);\n    } finally {\n      if (e_7) throw e_7.error;\n    }\n  }\n  return matchedSchemas.length === 1 ? matchedSchemas[0].unmapXml(value, ctxt) : undefined;\n}\nexport { oneOf };",
      "start": 1707437862537,
      "end": 1707437862620,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707437862621,
      "end": 1707437862621,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707437862621,
      "end": 1707437862622,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707437862622,
      "end": 1707437862622,
      "order": "normal"
    }
  ]
}
