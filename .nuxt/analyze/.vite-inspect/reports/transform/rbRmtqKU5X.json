{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants.js';\nimport { limit } from './util.js';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8.js';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = \"[^\".concat(OPENING_PARENS).concat(CLOSING_PARENS, \"]\");\nexport var LEAD_CLASS = \"[\".concat(OPENING_PARENS).concat(PLUS_CHARS, \"]\"); // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidCandidate.js.map",
      "start": 1709272110601,
      "end": 1709272110645,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272110645,
      "end": 1709272110645,
      "order": "normal"
    }
  ]
}
