{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/@apimatic/core/es/apiHelper.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __read } from 'tslib';\nimport { getHeader } from '@apimatic/http-headers';\nimport { detect } from 'detect-browser';\nimport warning from 'tiny-warning';\nimport { JsonPointer } from 'json-ptr';\n\n/**\r\n * Validates the protocol and removes duplicate forward slashes\r\n *\r\n * @param url URL to clean\r\n * @returns Sanitized URL\r\n */\nfunction sanitizeUrl(url) {\n  // ensure that the urls are absolute\n  var protocolRegex = /^https?:\\/\\/[^/]+/;\n  var match = url.match(protocolRegex);\n  if (match === null) {\n    throw new Error(\"Invalid URL format: \" + url);\n  }\n  // remove redundant double-forward slashes\n  var protocol = match[0];\n  var queryUrl = url.substring(protocol.length).replace(/\\/\\/+/g, '/');\n  return protocol + queryUrl;\n}\n/**\r\n * Create warning for deprecated method usage.\r\n *\r\n * This is called once per deprecated method. If this method is called again\r\n * with the same arguments, no warning is generated.\r\n *\r\n * @param methodName Method name for deprecated method\r\n * @param notice Optional message for deprecation\r\n */\nfunction deprecated(methodName, notice) {\n  var message = \"Method \" + methodName + \" is deprecated.\";\n  if (notice) {\n    message += \" \" + notice;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    warning(false, message);\n  }\n}\n/**\r\n * Replace the templated placeholders in user-agent with the platform\r\n * related information.\r\n * @param userAgent User-agent value to be updated\r\n * @returns Updated user-agent value\r\n */\nfunction updateUserAgent(userAgent, apiVersion, detail) {\n  var updatedAgent = userAgent;\n  var result = detect();\n  if (result) {\n    updatedAgent = updatedAgent.replace('{engine}', result.name);\n  }\n  if (result === null || result === void 0 ? void 0 : result.version) {\n    updatedAgent = updatedAgent.replace('{engine-version}', result.version);\n  }\n  if (result === null || result === void 0 ? void 0 : result.os) {\n    updatedAgent = updatedAgent.replace('{os-info}', result.os);\n  }\n  if (typeof apiVersion !== 'undefined') {\n    updatedAgent = updatedAgent.replace('{api-version}', apiVersion);\n  }\n  if (typeof detail !== 'undefined') {\n    assertUserAgentDetail(detail);\n    updatedAgent = updatedAgent.replace('{detail}', encodeURIComponent(detail));\n  }\n  return updatedAgent;\n}\nfunction assertUserAgentDetail(detail) {\n  if (detail.length > 128) {\n    throw new Error('userAgentDetail length exceeds 128 characters limit');\n  }\n}\n/**\r\n * Replace the templated placeholders in error with the platform\r\n * related information.\r\n * @param message message value to be updated\r\n * @returns Updated message value\r\n */\nfunction updateErrorMessage(message, response) {\n  var placeholders = message.match(/\\{\\$.*?\\}/g);\n  var statusCodePlaceholder = placeholders === null || placeholders === void 0 ? void 0 : placeholders.includes('{$statusCode}');\n  var headerPlaceholders = placeholders === null || placeholders === void 0 ? void 0 : placeholders.filter(function (value) {\n    return value.startsWith('{$response.header');\n  });\n  var bodyPlaceholders = placeholders === null || placeholders === void 0 ? void 0 : placeholders.filter(function (value) {\n    return value.startsWith('{$response.body');\n  });\n  message = replaceStatusCodePlaceholder(message, response.statusCode, statusCodePlaceholder);\n  message = replaceHeaderPlaceholders(message, response.headers, headerPlaceholders);\n  if (typeof response.body === 'string') {\n    message = replaceBodyPlaceholders(message, response.body, bodyPlaceholders);\n  }\n  return message;\n}\nfunction replaceStatusCodePlaceholder(message, statusCode, statusCodePlaceholder) {\n  if (statusCodePlaceholder) {\n    return message.replace('{$statusCode}', statusCode.toString());\n  }\n  return message;\n}\nfunction replaceHeaderPlaceholders(message, headers, headerPlaceholders) {\n  if (headerPlaceholders) {\n    headerPlaceholders.forEach(function (element) {\n      var _a, _b;\n      var headerName = (_a = element.split('.').pop()) === null || _a === void 0 ? void 0 : _a.slice(0, -1);\n      if (typeof headerName !== 'undefined') {\n        var value = (_b = getHeader(headers, headerName)) !== null && _b !== void 0 ? _b : '';\n        message = message.replace(element, value);\n      }\n    });\n  }\n  return message;\n}\nfunction replaceBodyPlaceholders(message, body, bodyPlaceholders) {\n  var parsed = '';\n  try {\n    parsed = JSON.parse(body);\n  } catch (error) {\n    // Handle the error if needed, or you can leave the catch block empty\n  }\n  bodyPlaceholders === null || bodyPlaceholders === void 0 ? void 0 : bodyPlaceholders.forEach(function (element) {\n    var _a;\n    if (element.includes('#')) {\n      var _b = __read(element === null || element === void 0 ? void 0 : element.split('#')),\n        rest = _b.slice(1);\n      var nodePointer = (_a = rest.join('#')) === null || _a === void 0 ? void 0 : _a.slice(0, -1);\n      if (nodePointer) {\n        var value = JsonPointer.create(nodePointer).get(parsed);\n        var replaced_value = typeof value !== 'undefined' ? JSON.stringify(value) : '';\n        message = message.replace(element, replaced_value);\n      }\n    } else {\n      message = message.replace(element, JSON.stringify(parsed));\n    }\n  });\n  return message;\n}\nexport { deprecated, sanitizeUrl, updateErrorMessage, updateUserAgent };",
      "start": 1709272109417,
      "end": 1709272109446,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272109446,
      "end": 1709272109446,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { __read } from \"tslib\";\nimport { getHeader } from \"@apimatic/http-headers\";\nimport { detect } from \"detect-browser\";\nimport warning from \"tiny-warning\";\nimport { JsonPointer } from \"json-ptr\";\nfunction sanitizeUrl(url) {\n  var protocolRegex = /^https?:\\/\\/[^/]+/;\n  var match = url.match(protocolRegex);\n  if (match === null) {\n    throw new Error(\"Invalid URL format: \" + url);\n  }\n  var protocol = match[0];\n  var queryUrl = url.substring(protocol.length).replace(/\\/\\/+/g, \"/\");\n  return protocol + queryUrl;\n}\nfunction deprecated(methodName, notice) {\n  var message = \"Method \" + methodName + \" is deprecated.\";\n  if (notice) {\n    message += \" \" + notice;\n  }\n  if (false) {\n    warning(false, message);\n  }\n}\nfunction updateUserAgent(userAgent, apiVersion, detail) {\n  var updatedAgent = userAgent;\n  var result = detect();\n  if (result) {\n    updatedAgent = updatedAgent.replace(\"{engine}\", result.name);\n  }\n  if (result === null || result === void 0 ? void 0 : result.version) {\n    updatedAgent = updatedAgent.replace(\"{engine-version}\", result.version);\n  }\n  if (result === null || result === void 0 ? void 0 : result.os) {\n    updatedAgent = updatedAgent.replace(\"{os-info}\", result.os);\n  }\n  if (typeof apiVersion !== \"undefined\") {\n    updatedAgent = updatedAgent.replace(\"{api-version}\", apiVersion);\n  }\n  if (typeof detail !== \"undefined\") {\n    assertUserAgentDetail(detail);\n    updatedAgent = updatedAgent.replace(\"{detail}\", encodeURIComponent(detail));\n  }\n  return updatedAgent;\n}\nfunction assertUserAgentDetail(detail) {\n  if (detail.length > 128) {\n    throw new Error(\"userAgentDetail length exceeds 128 characters limit\");\n  }\n}\nfunction updateErrorMessage(message, response) {\n  var placeholders = message.match(/\\{\\$.*?\\}/g);\n  var statusCodePlaceholder = placeholders === null || placeholders === void 0 ? void 0 : placeholders.includes(\"{$statusCode}\");\n  var headerPlaceholders = placeholders === null || placeholders === void 0 ? void 0 : placeholders.filter(function(value) {\n    return value.startsWith(\"{$response.header\");\n  });\n  var bodyPlaceholders = placeholders === null || placeholders === void 0 ? void 0 : placeholders.filter(function(value) {\n    return value.startsWith(\"{$response.body\");\n  });\n  message = replaceStatusCodePlaceholder(message, response.statusCode, statusCodePlaceholder);\n  message = replaceHeaderPlaceholders(message, response.headers, headerPlaceholders);\n  if (typeof response.body === \"string\") {\n    message = replaceBodyPlaceholders(message, response.body, bodyPlaceholders);\n  }\n  return message;\n}\nfunction replaceStatusCodePlaceholder(message, statusCode, statusCodePlaceholder) {\n  if (statusCodePlaceholder) {\n    return message.replace(\"{$statusCode}\", statusCode.toString());\n  }\n  return message;\n}\nfunction replaceHeaderPlaceholders(message, headers, headerPlaceholders) {\n  if (headerPlaceholders) {\n    headerPlaceholders.forEach(function(element) {\n      var _a, _b;\n      var headerName = (_a = element.split(\".\").pop()) === null || _a === void 0 ? void 0 : _a.slice(0, -1);\n      if (typeof headerName !== \"undefined\") {\n        var value = (_b = getHeader(headers, headerName)) !== null && _b !== void 0 ? _b : \"\";\n        message = message.replace(element, value);\n      }\n    });\n  }\n  return message;\n}\nfunction replaceBodyPlaceholders(message, body, bodyPlaceholders) {\n  var parsed = \"\";\n  try {\n    parsed = JSON.parse(body);\n  } catch (error) {\n  }\n  bodyPlaceholders === null || bodyPlaceholders === void 0 ? void 0 : bodyPlaceholders.forEach(function(element) {\n    var _a;\n    if (element.includes(\"#\")) {\n      var _b = __read(element === null || element === void 0 ? void 0 : element.split(\"#\")), rest = _b.slice(1);\n      var nodePointer = (_a = rest.join(\"#\")) === null || _a === void 0 ? void 0 : _a.slice(0, -1);\n      if (nodePointer) {\n        var value = JsonPointer.create(nodePointer).get(parsed);\n        var replaced_value = typeof value !== \"undefined\" ? JSON.stringify(value) : \"\";\n        message = message.replace(element, replaced_value);\n      }\n    } else {\n      message = message.replace(element, JSON.stringify(parsed));\n    }\n  });\n  return message;\n}\nexport { deprecated, sanitizeUrl, updateErrorMessage, updateUserAgent };\n",
      "start": 1709272109446,
      "end": 1709272109461,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1709272109461,
      "end": 1709272109461,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272109461,
      "end": 1709272109461,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272109461,
      "end": 1709272109461,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272109461,
      "end": 1709272109461,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272109461,
      "end": 1709272109462,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272109462,
      "end": 1709272109462,
      "order": "normal"
    }
  ]
}
