{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/checkoutApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createCheckoutRequestSchema, } from '../models/createCheckoutRequest';\nimport { createCheckoutResponseSchema, } from '../models/createCheckoutResponse';\nimport { createPaymentLinkRequestSchema, } from '../models/createPaymentLinkRequest';\nimport { createPaymentLinkResponseSchema, } from '../models/createPaymentLinkResponse';\nimport { deletePaymentLinkResponseSchema, } from '../models/deletePaymentLinkResponse';\nimport { listPaymentLinksResponseSchema, } from '../models/listPaymentLinksResponse';\nimport { retrieveLocationSettingsResponseSchema, } from '../models/retrieveLocationSettingsResponse';\nimport { retrieveMerchantSettingsResponseSchema, } from '../models/retrieveMerchantSettingsResponse';\nimport { retrievePaymentLinkResponseSchema, } from '../models/retrievePaymentLinkResponse';\nimport { updateLocationSettingsRequestSchema, } from '../models/updateLocationSettingsRequest';\nimport { updateLocationSettingsResponseSchema, } from '../models/updateLocationSettingsResponse';\nimport { updateMerchantSettingsRequestSchema, } from '../models/updateMerchantSettingsRequest';\nimport { updateMerchantSettingsResponseSchema, } from '../models/updateMerchantSettingsResponse';\nimport { updatePaymentLinkRequestSchema, } from '../models/updatePaymentLinkRequest';\nimport { updatePaymentLinkResponseSchema, } from '../models/updatePaymentLinkResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class CheckoutApi extends BaseApi {\n    /**\n     * Links a `checkoutId` to a `checkout_page_url` that customers are\n     * directed to in order to provide their payment information using a\n     * payment processing workflow hosted on connect.squareup.com.\n     *\n     *\n     * NOTE: The Checkout API has been updated with new features.\n     * For more information, see [Checkout API highlights](https://developer.squareup.com/docs/checkout-\n     * api#checkout-api-highlights).\n     *\n     * @param locationId   The ID of the business location to associate the checkout\n     *                                                     with.\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                     the corresponding object definition for field details.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async createCheckout(locationId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            body: [body, createCheckoutRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/locations/${mapped.locationId}/checkouts`;\n        req.deprecated('CheckoutApi.createCheckout');\n        return req.callAsJson(createCheckoutResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves the location-level settings for a Square-hosted checkout page.\n     *\n     * @param locationId  The ID of the location for which to retrieve settings.\n     * @return Response from the API call\n     */\n    async retrieveLocationSettings(locationId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n        req.appendTemplatePath `/v2/online-checkout/location-settings/${mapped.locationId}`;\n        return req.callAsJson(retrieveLocationSettingsResponseSchema, requestOptions);\n    }\n    /**\n     * Updates the location-level settings for a Square-hosted checkout page.\n     *\n     * @param locationId   The ID of the location for which to retrieve settings.\n     * @param body         An object containing the fields to POST for the\n     *                                                             request.  See the corresponding object definition for\n     *                                                             field details.\n     * @return Response from the API call\n     */\n    async updateLocationSettings(locationId, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            body: [body, updateLocationSettingsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/online-checkout/location-settings/${mapped.locationId}`;\n        return req.callAsJson(updateLocationSettingsResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves the merchant-level settings for a Square-hosted checkout page.\n     *\n     * @return Response from the API call\n     */\n    async retrieveMerchantSettings(requestOptions) {\n        const req = this.createRequest('GET', '/v2/online-checkout/merchant-settings');\n        return req.callAsJson(retrieveMerchantSettingsResponseSchema, requestOptions);\n    }\n    /**\n     * Updates the merchant-level settings for a Square-hosted checkout page.\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                             request.  See the corresponding object definition for\n     *                                                             field details.\n     * @return Response from the API call\n     */\n    async updateMerchantSettings(body, requestOptions) {\n        const req = this.createRequest('PUT', '/v2/online-checkout/merchant-settings');\n        const mapped = req.prepareArgs({\n            body: [body, updateMerchantSettingsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(updateMerchantSettingsResponseSchema, requestOptions);\n    }\n    /**\n     * Lists all payment links.\n     *\n     * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to\n     *                         retrieve the next set of results for the original query. If a cursor is not provided, the\n     *                         endpoint returns the first page of the results. For more  information, see\n     *                         [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n     * @param limit  A limit on the number of results to return per page. The limit is advisory and the\n     *                         implementation might return more or less results. If the supplied limit is negative, zero,\n     *                         or greater than the maximum limit of 1000, it is ignored.  Default value: `100`\n     * @return Response from the API call\n     */\n    async listPaymentLinks(cursor, limit, requestOptions) {\n        const req = this.createRequest('GET', '/v2/online-checkout/payment-links');\n        const mapped = req.prepareArgs({\n            cursor: [cursor, optional(string())],\n            limit: [limit, optional(number())],\n        });\n        req.query('cursor', mapped.cursor);\n        req.query('limit', mapped.limit);\n        return req.callAsJson(listPaymentLinksResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a Square-hosted checkout page. Applications can share the resulting payment link with their\n     * buyer to pay for goods and services.\n     *\n     * @param body         An object containing the fields to POST for the request.\n     *                                                        See the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async createPaymentLink(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/online-checkout/payment-links');\n        const mapped = req.prepareArgs({\n            body: [body, createPaymentLinkRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createPaymentLinkResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a payment link.\n     *\n     * @param id The ID of the payment link to delete.\n     * @return Response from the API call\n     */\n    async deletePaymentLink(id, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({ id: [id, string()] });\n        req.appendTemplatePath `/v2/online-checkout/payment-links/${mapped.id}`;\n        return req.callAsJson(deletePaymentLinkResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a payment link.\n     *\n     * @param id The ID of link to retrieve.\n     * @return Response from the API call\n     */\n    async retrievePaymentLink(id, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({ id: [id, string()] });\n        req.appendTemplatePath `/v2/online-checkout/payment-links/${mapped.id}`;\n        return req.callAsJson(retrievePaymentLinkResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a payment link. You can update the `payment_link` fields such as\n     * `description`, `checkout_options`, and  `pre_populated_data`.\n     * You cannot update other fields such as the `order_id`, `version`, `URL`, or `timestamp` field.\n     *\n     * @param id           The ID of the payment link to update.\n     * @param body         An object containing the fields to POST for the request.\n     *                                                        See the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async updatePaymentLink(id, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            id: [id, string()],\n            body: [body, updatePaymentLinkRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/online-checkout/payment-links/${mapped.id}`;\n        return req.callAsJson(updatePaymentLinkResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=checkoutApi.js.map",
      "start": 1709272108421,
      "end": 1709272108461,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272108461,
      "end": 1709272108461,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272108461,
      "end": 1709272108462,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272108462,
      "end": 1709272108462,
      "order": "normal"
    }
  ]
}
