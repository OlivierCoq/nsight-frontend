{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/@stripe/stripe-js/dist/stripe.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"2.3.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar onErrorListener = null;\nvar onLoadListener = null;\n\nvar onError = function onError(reject) {\n  return function () {\n    reject(new Error('Failed to load Stripe.js'));\n  };\n};\n\nvar onLoad = function onLoad(resolve, reject) {\n  return function () {\n    if (window.Stripe) {\n      resolve(window.Stripe);\n    } else {\n      reject(new Error('Stripe.js not available'));\n    }\n  };\n};\n\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      } else if (script && onLoadListener !== null && onErrorListener !== null) {\n        var _script$parentNode;\n\n        // remove event listeners\n        script.removeEventListener('load', onLoadListener);\n        script.removeEventListener('error', onErrorListener); // if script exists, but we are reloading due to an error,\n        // reload script to trigger 'load' event\n\n        (_script$parentNode = script.parentNode) === null || _script$parentNode === void 0 ? void 0 : _script$parentNode.removeChild(script);\n        script = injectScript(params);\n      }\n\n      onLoadListener = onLoad(resolve, reject);\n      onErrorListener = onError(reject);\n      script.addEventListener('load', onLoadListener);\n      script.addEventListener('error', onErrorListener);\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  }); // Resets stripePromise on error\n\n  return stripePromise[\"catch\"](function (error) {\n    stripePromise = null;\n    return Promise.reject(error);\n  });\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nvar stripePromise$1;\nvar loadCalled = false;\n\nvar getStripePromise = function getStripePromise() {\n  if (stripePromise$1) {\n    return stripePromise$1;\n  }\n\n  stripePromise$1 = loadScript(null)[\"catch\"](function (error) {\n    // clear cache on error\n    stripePromise$1 = null;\n    return Promise.reject(error);\n  });\n  return stripePromise$1;\n}; // Execute our own script injection after a tick to give users time to do their\n// own script injection.\n\n\nPromise.resolve().then(function () {\n  return getStripePromise();\n})[\"catch\"](function (error) {\n  if (!loadCalled) {\n    console.warn(error);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now(); // if previous attempts are unsuccessful, will re-load script\n\n  return getStripePromise().then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nexport { loadStripe };\n",
      "start": 1705807631167,
      "end": 1705807631244,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1705807631244,
      "end": 1705807631244,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1705807631244,
      "end": 1705807631244,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1705807631244,
      "end": 1705807631244,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1705807631244,
      "end": 1705807631244,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1705807631245,
      "end": 1705807631245,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1705807631245,
      "end": 1705807631246,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1705807631246,
      "end": 1705807631246,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1705807631246,
      "end": 1705807631246,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1705807631246,
      "end": 1705807631246,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1705807631246,
      "end": 1705807631246,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1705807631246,
      "end": 1705807631246,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1705807631246,
      "end": 1705807631246,
      "order": "normal"
    }
  ]
}
