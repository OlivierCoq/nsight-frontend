{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/helpers/getNumberType.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returns an empty object — `{}` —\n  // that means that the phone number is malformed,\n  // so it can't possibly be valid.\n\n  if (!input.country && !input.countryCallingCode) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map",
      "start": 1709003849011,
      "end": 1709003849057,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003849057,
      "end": 1709003849057,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003849057,
      "end": 1709003849057,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003849057,
      "end": 1709003849057,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003849057,
      "end": 1709003849057,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003849057,
      "end": 1709003849057,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003849057,
      "end": 1709003849057,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003849057,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003849058,
      "end": 1709003849058,
      "order": "normal"
    }
  ]
}
