{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/catalogApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { batchDeleteCatalogObjectsRequestSchema, } from '../models/batchDeleteCatalogObjectsRequest';\nimport { batchDeleteCatalogObjectsResponseSchema, } from '../models/batchDeleteCatalogObjectsResponse';\nimport { batchRetrieveCatalogObjectsRequestSchema, } from '../models/batchRetrieveCatalogObjectsRequest';\nimport { batchRetrieveCatalogObjectsResponseSchema, } from '../models/batchRetrieveCatalogObjectsResponse';\nimport { batchUpsertCatalogObjectsRequestSchema, } from '../models/batchUpsertCatalogObjectsRequest';\nimport { batchUpsertCatalogObjectsResponseSchema, } from '../models/batchUpsertCatalogObjectsResponse';\nimport { catalogInfoResponseSchema, } from '../models/catalogInfoResponse';\nimport { createCatalogImageRequestSchema, } from '../models/createCatalogImageRequest';\nimport { createCatalogImageResponseSchema, } from '../models/createCatalogImageResponse';\nimport { deleteCatalogObjectResponseSchema, } from '../models/deleteCatalogObjectResponse';\nimport { listCatalogResponseSchema, } from '../models/listCatalogResponse';\nimport { retrieveCatalogObjectResponseSchema, } from '../models/retrieveCatalogObjectResponse';\nimport { searchCatalogItemsRequestSchema, } from '../models/searchCatalogItemsRequest';\nimport { searchCatalogItemsResponseSchema, } from '../models/searchCatalogItemsResponse';\nimport { searchCatalogObjectsRequestSchema, } from '../models/searchCatalogObjectsRequest';\nimport { searchCatalogObjectsResponseSchema, } from '../models/searchCatalogObjectsResponse';\nimport { updateCatalogImageRequestSchema, } from '../models/updateCatalogImageRequest';\nimport { updateCatalogImageResponseSchema, } from '../models/updateCatalogImageResponse';\nimport { updateItemModifierListsRequestSchema, } from '../models/updateItemModifierListsRequest';\nimport { updateItemModifierListsResponseSchema, } from '../models/updateItemModifierListsResponse';\nimport { updateItemTaxesRequestSchema, } from '../models/updateItemTaxesRequest';\nimport { updateItemTaxesResponseSchema, } from '../models/updateItemTaxesResponse';\nimport { upsertCatalogObjectRequestSchema, } from '../models/upsertCatalogObjectRequest';\nimport { upsertCatalogObjectResponseSchema, } from '../models/upsertCatalogObjectResponse';\nimport { bigint, boolean, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class CatalogApi extends BaseApi {\n    /**\n     * Deletes a set of [CatalogItem]($m/CatalogItem)s based on the\n     * provided list of target IDs and returns a set of successfully deleted IDs in\n     * the response. Deletion is a cascading event such that all children of the\n     * targeted object are also deleted. For example, deleting a CatalogItem will\n     * also delete all of its [CatalogItemVariation]($m/CatalogItemVariation)\n     * children.\n     *\n     * `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted\n     * IDs can be deleted. The response will only include IDs that were\n     * actually deleted.\n     *\n     * To ensure consistency, only one delete request is processed at a time per seller account.\n     * While one (batch or non-batch) delete request is being processed, other (batched and non-batched)\n     * delete requests are rejected with the `429` error code.\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                                request.  See the corresponding object definition\n     *                                                                for field details.\n     * @return Response from the API call\n     */\n    async batchDeleteCatalogObjects(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/batch-delete');\n        const mapped = req.prepareArgs({\n            body: [body, batchDeleteCatalogObjectsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(batchDeleteCatalogObjectsResponseSchema, requestOptions);\n    }\n    /**\n     * Returns a set of objects based on the provided ID.\n     * Each [CatalogItem]($m/CatalogItem) returned in the set includes all of its\n     * child information including: all of its\n     * [CatalogItemVariation]($m/CatalogItemVariation) objects, references to\n     * its [CatalogModifierList]($m/CatalogModifierList) objects, and the ids of\n     * any [CatalogTax]($m/CatalogTax) objects that apply to it.\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                                  request.  See the corresponding object definition\n     *                                                                  for field details.\n     * @return Response from the API call\n     */\n    async batchRetrieveCatalogObjects(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/batch-retrieve');\n        const mapped = req.prepareArgs({\n            body: [body, batchRetrieveCatalogObjectsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(batchRetrieveCatalogObjectsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates or updates up to 10,000 target objects based on the provided\n     * list of objects. The target objects are grouped into batches and each batch is\n     * inserted/updated in an all-or-nothing manner. If an object within a batch is\n     * malformed in some way, or violates a database constraint, the entire batch\n     * containing that item will be disregarded. However, other batches in the same\n     * request may still succeed. Each batch may contain up to 1,000 objects, and\n     * batches will be processed in order as long as the total object count for the\n     * request (items, variations, modifier lists, discounts, and taxes) is no more\n     * than 10,000.\n     *\n     * To ensure consistency, only one update request is processed at a time per seller account.\n     * While one (batch or non-batch) update request is being processed, other (batched and non-batched)\n     * update requests are rejected with the `429` error code.\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                                request.  See the corresponding object definition\n     *                                                                for field details.\n     * @return Response from the API call\n     */\n    async batchUpsertCatalogObjects(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/batch-upsert');\n        const mapped = req.prepareArgs({\n            body: [body, batchUpsertCatalogObjectsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(batchUpsertCatalogObjectsResponseSchema, requestOptions);\n    }\n    /**\n     * Uploads an image file to be represented by a [CatalogImage]($m/CatalogImage) object that can be\n     * linked to an existing\n     * [CatalogObject]($m/CatalogObject) instance. The resulting `CatalogImage` is unattached to any\n     * `CatalogObject` if the `object_id`\n     * is not specified.\n     *\n     * This `CreateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an\n     * image file part in\n     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.\n     *\n     * @param request\n     * @param imageFile\n     * @return Response from the API call\n     */\n    async createCatalogImage(request, imageFile, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/images');\n        const mapped = req.prepareArgs({\n            request: [request, optional(createCatalogImageRequestSchema)],\n        });\n        req.formData({\n            request: JSON.stringify(mapped.request),\n            image_file: imageFile,\n        });\n        return req.callAsJson(createCatalogImageResponseSchema, requestOptions);\n    }\n    /**\n     * Uploads a new image file to replace the existing one in the specified\n     * [CatalogImage]($m/CatalogImage) object.\n     *\n     * This `UpdateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an\n     * image file part in\n     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.\n     *\n     * @param imageId    The ID of the `CatalogImage` object to update the\n     *                                                       encapsulated image file.\n     * @param request\n     * @param imageFile\n     * @return Response from the API call\n     */\n    async updateCatalogImage(imageId, request, imageFile, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            imageId: [imageId, string()],\n            request: [request, optional(updateCatalogImageRequestSchema)],\n        });\n        req.formData({\n            request: JSON.stringify(mapped.request),\n            image_file: imageFile,\n        });\n        req.appendTemplatePath `/v2/catalog/images/${mapped.imageId}`;\n        return req.callAsJson(updateCatalogImageResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves information about the Square Catalog API, such as batch size\n     * limits that can be used by the `BatchUpsertCatalogObjects` endpoint.\n     *\n     * @return Response from the API call\n     */\n    async catalogInfo(requestOptions) {\n        const req = this.createRequest('GET', '/v2/catalog/info');\n        return req.callAsJson(catalogInfoResponseSchema, requestOptions);\n    }\n    /**\n     * Returns a list of all [CatalogObject]($m/CatalogObject)s of the specified types in the catalog.\n     *\n     * The `types` parameter is specified as a comma-separated list of the\n     * [CatalogObjectType]($m/CatalogObjectType) values,\n     * for example, \"`ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`,\n     * `IMAGE`\".\n     *\n     * __Important:__ ListCatalog does not return deleted catalog items. To retrieve\n     * deleted catalog items, use [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects)\n     * and set the `include_deleted_objects` attribute value to `true`.\n     *\n     * @param cursor          The pagination cursor returned in the previous response. Leave unset for an\n     *                                  initial request. The page size is currently set to be 100. See [Pagination](https:\n     *                                  //developer.squareup.com/docs/build-basics/common-api-patterns/pagination) for\n     *                                  more information.\n     * @param types           An optional case-insensitive, comma-separated list of object types to retrieve.\n     *                                  The valid values are defined in the [CatalogObjectType](entity:CatalogObjectType)\n     *                                  enum, for example, `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,\n     *                                  `MODIFIER`, `MODIFIER_LIST`, `IMAGE`, etc.  If this is unspecified, the operation\n     *                                  returns objects of all the top level types at the version of the Square API used\n     *                                  to make the request. Object types that are nested onto other object types are not\n     *                                  included in the defaults.  At the current API version the default object types\n     *                                  are: ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,  PRICING_RULE, PRODUCT_SET,\n     *                                  TIME_PERIOD, MEASUREMENT_UNIT, SUBSCRIPTION_PLAN, ITEM_OPTION,\n     *                                  CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.\n     * @param catalogVersion  The specific version of the catalog objects to be included in the response. This\n     *                                  allows you to retrieve historical versions of objects. The specified version\n     *                                  value is matched against the [CatalogObject]($m/CatalogObject)s' `version`\n     *                                  attribute.  If not included, results will be from the current version of the\n     *                                  catalog.\n     * @return Response from the API call\n     */\n    async listCatalog(cursor, types, catalogVersion, requestOptions) {\n        const req = this.createRequest('GET', '/v2/catalog/list');\n        const mapped = req.prepareArgs({\n            cursor: [cursor, optional(string())],\n            types: [types, optional(string())],\n            catalogVersion: [catalogVersion, optional(bigint())],\n        });\n        req.query('cursor', mapped.cursor);\n        req.query('types', mapped.types);\n        req.query('catalog_version', mapped.catalogVersion);\n        return req.callAsJson(listCatalogResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a new or updates the specified [CatalogObject]($m/CatalogObject).\n     *\n     * To ensure consistency, only one update request is processed at a time per seller account.\n     * While one (batch or non-batch) update request is being processed, other (batched and non-batched)\n     * update requests are rejected with the `429` error code.\n     *\n     * @param body         An object containing the fields to POST for the request.\n     *                                                          See the corresponding object definition for field\n     *                                                          details.\n     * @return Response from the API call\n     */\n    async upsertCatalogObject(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/object');\n        const mapped = req.prepareArgs({\n            body: [body, upsertCatalogObjectRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(upsertCatalogObjectResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a single [CatalogObject]($m/CatalogObject) based on the\n     * provided ID and returns the set of successfully deleted IDs in the response.\n     * Deletion is a cascading event such that all children of the targeted object\n     * are also deleted. For example, deleting a [CatalogItem]($m/CatalogItem)\n     * will also delete all of its\n     * [CatalogItemVariation]($m/CatalogItemVariation) children.\n     *\n     * To ensure consistency, only one delete request is processed at a time per seller account.\n     * While one (batch or non-batch) delete request is being processed, other (batched and non-batched)\n     * delete requests are rejected with the `429` error code.\n     *\n     * @param objectId  The ID of the catalog object to be deleted. When an object is deleted, other objects\n     *                            in the graph that depend on that object will be deleted as well (for example, deleting\n     *                            a catalog item will delete its catalog item variations).\n     * @return Response from the API call\n     */\n    async deleteCatalogObject(objectId, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({ objectId: [objectId, string()] });\n        req.appendTemplatePath `/v2/catalog/object/${mapped.objectId}`;\n        return req.callAsJson(deleteCatalogObjectResponseSchema, requestOptions);\n    }\n    /**\n     * Returns a single [CatalogItem]($m/CatalogItem) as a\n     * [CatalogObject]($m/CatalogObject) based on the provided ID. The returned\n     * object includes all of the relevant [CatalogItem]($m/CatalogItem)\n     * information including: [CatalogItemVariation]($m/CatalogItemVariation)\n     * children, references to its\n     * [CatalogModifierList]($m/CatalogModifierList) objects, and the ids of\n     * any [CatalogTax]($m/CatalogTax) objects that apply to it.\n     *\n     * @param objectId                      The object ID of any type of catalog objects to be retrieved.\n     * @param includeRelatedObjects         If `true`, the response will include additional objects that are\n     *                                                 related to the requested objects. Related objects are defined as\n     *                                                 any objects referenced by ID by the results in the `objects` field\n     *                                                 of the response. These objects are put in the `related_objects`\n     *                                                 field. Setting this to `true` is helpful when the objects are\n     *                                                 needed for immediate display to a user. This process only goes one\n     *                                                 level deep. Objects referenced by the related objects will not be\n     *                                                 included. For example,  if the `objects` field of the response\n     *                                                 contains a CatalogItem, its associated CatalogCategory objects,\n     *                                                 CatalogTax objects, CatalogImage objects and CatalogModifierLists\n     *                                                 will be returned in the `related_objects` field of the response.\n     *                                                 If the `objects` field of the response contains a\n     *                                                 CatalogItemVariation, its parent CatalogItem will be returned in\n     *                                                 the `related_objects` field of the response.  Default value:\n     *                                                 `false`\n     * @param catalogVersion                Requests objects as of a specific version of the catalog. This\n     *                                                 allows you to retrieve historical versions of objects. The value\n     *                                                 to retrieve a specific version of an object can be found in the\n     *                                                 version field of [CatalogObject]($m/CatalogObject)s. If not\n     *                                                 included, results will be from the current version of the catalog.\n     * @param includeCategoryPathToRoot     Specifies whether or not to include the `path_to_root` list for\n     *                                                 each returned category instance. The `path_to_root` list consists\n     *                                                 of `CategoryPathToRootNode` objects and specifies the path that\n     *                                                 starts with the immediate parent category of the returned category\n     *                                                 and ends with its root category. If the returned category is a top-\n     *                                                 level category, the `path_to_root` list is empty and is not\n     *                                                 returned in the response payload.\n     * @return Response from the API call\n     */\n    async retrieveCatalogObject(objectId, includeRelatedObjects, catalogVersion, includeCategoryPathToRoot, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            objectId: [objectId, string()],\n            includeRelatedObjects: [includeRelatedObjects, optional(boolean())],\n            catalogVersion: [catalogVersion, optional(bigint())],\n            includeCategoryPathToRoot: [\n                includeCategoryPathToRoot,\n                optional(boolean()),\n            ],\n        });\n        req.query('include_related_objects', mapped.includeRelatedObjects);\n        req.query('catalog_version', mapped.catalogVersion);\n        req.query('include_category_path_to_root', mapped.includeCategoryPathToRoot);\n        req.appendTemplatePath `/v2/catalog/object/${mapped.objectId}`;\n        return req.callAsJson(retrieveCatalogObjectResponseSchema, requestOptions);\n    }\n    /**\n     * Searches for [CatalogObject]($m/CatalogObject) of any type by matching supported search attribute\n     * values,\n     * excluding custom attribute values on items or item variations, against one or more of the specified\n     * query filters.\n     *\n     * This (`SearchCatalogObjects`) endpoint differs from the\n     * [SearchCatalogItems]($e/Catalog/SearchCatalogItems)\n     * endpoint in the following aspects:\n     *\n     * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects`\n     * can search for any type of catalog objects.\n     * - `SearchCatalogItems` supports the custom attribute query filters to return items or item\n     * variations that contain custom attribute values, where `SearchCatalogObjects` does not.\n     * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted\n     * items or item variations, whereas `SearchCatalogObjects` does.\n     * - The both endpoints have different call conventions, including the query filter formats.\n     *\n     * @param body         An object containing the fields to POST for the request.\n     *                                                           See the corresponding object definition for field\n     *                                                           details.\n     * @return Response from the API call\n     */\n    async searchCatalogObjects(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/search');\n        const mapped = req.prepareArgs({\n            body: [body, searchCatalogObjectsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(searchCatalogObjectsResponseSchema, requestOptions);\n    }\n    /**\n     * Searches for catalog items or item variations by matching supported search attribute values,\n     * including\n     * custom attribute values, against one or more of the specified query filters.\n     *\n     * This (`SearchCatalogItems`) endpoint differs from the\n     * [SearchCatalogObjects]($e/Catalog/SearchCatalogObjects)\n     * endpoint in the following aspects:\n     *\n     * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects`\n     * can search for any type of catalog objects.\n     * - `SearchCatalogItems` supports the custom attribute query filters to return items or item\n     * variations that contain custom attribute values, where `SearchCatalogObjects` does not.\n     * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted\n     * items or item variations, whereas `SearchCatalogObjects` does.\n     * - The both endpoints use different call conventions, including the query filter formats.\n     *\n     * @param body         An object containing the fields to POST for the request.\n     *                                                         See the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async searchCatalogItems(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/search-catalog-items');\n        const mapped = req.prepareArgs({\n            body: [body, searchCatalogItemsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(searchCatalogItemsResponseSchema, requestOptions);\n    }\n    /**\n     * Updates the [CatalogModifierList]($m/CatalogModifierList) objects\n     * that apply to the targeted [CatalogItem]($m/CatalogItem) without having\n     * to perform an upsert on the entire item.\n     *\n     * @param body         An object containing the fields to POST for the\n     *                                                              request.  See the corresponding object definition for\n     *                                                              field details.\n     * @return Response from the API call\n     */\n    async updateItemModifierLists(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/update-item-modifier-lists');\n        const mapped = req.prepareArgs({\n            body: [body, updateItemModifierListsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(updateItemModifierListsResponseSchema, requestOptions);\n    }\n    /**\n     * Updates the [CatalogTax]($m/CatalogTax) objects that apply to the\n     * targeted [CatalogItem]($m/CatalogItem) without having to perform an\n     * upsert on the entire item.\n     *\n     * @param body         An object containing the fields to POST for the request.\n     *                                                      See the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async updateItemTaxes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/catalog/update-item-taxes');\n        const mapped = req.prepareArgs({\n            body: [body, updateItemTaxesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(updateItemTaxesResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=catalogApi.js.map",
      "start": 1709003846712,
      "end": 1709003846782,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846782,
      "end": 1709003846782,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003846783,
      "end": 1709003846783,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003846783,
      "end": 1709003846784,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003846784,
      "end": 1709003846784,
      "order": "normal"
    }
  ]
}
