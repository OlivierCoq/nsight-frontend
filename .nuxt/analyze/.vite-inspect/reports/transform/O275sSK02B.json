{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/@apimatic/schema/es/types/object.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign, __rest, __spreadArray, __read } from 'tslib';\nimport { objectKeyEncode, objectEntries, omitKeysFromObject, literalToString } from '../utils.js';\n\n/**\r\n * Create a Strict Object type schema.\r\n *\r\n * A strict-object does not allow additional properties during mapping or\r\n * unmapping. Additional properties will result in a validation error.\r\n */\nfunction strictObject(objectSchema) {\n  var schema = internalObject(objectSchema, false, false);\n  schema.type = function () {\n    return \"StrictObject<{\" + Object.keys(objectSchema).map(objectKeyEncode).join(',') + \"}>\";\n  };\n  return schema;\n}\n/**\r\n * Create an Expandable Object type schema.\r\n *\r\n * The object schema allows additional properties during mapping and unmapping. The\r\n * additional properties are copied over as is.\r\n */\nfunction expandoObject(objectSchema) {\n  return internalObject(objectSchema, true, true);\n}\n/**\r\n * Create an Object Type schema.\r\n *\r\n * The Object schema allows additional properties during mapping and unmapping\r\n * but discards them.\r\n */\nfunction object(objectSchema) {\n  var schema = internalObject(objectSchema, true, false);\n  schema.type = function () {\n    return \"Object<{\" + Object.keys(objectSchema).map(objectKeyEncode).join(',') + \"}>\";\n  };\n  return schema;\n}\n/**\r\n * Create a strict-object schema that extends an existing schema.\r\n */\nfunction extendStrictObject(parentObjectSchema, objectSchema) {\n  return strictObject(__assign(__assign({}, parentObjectSchema.objectSchema), objectSchema));\n}\n/**\r\n * Create an object schema that extends an existing schema.\r\n */\nfunction extendExpandoObject(parentObjectSchema, objectSchema) {\n  return expandoObject(__assign(__assign({}, parentObjectSchema.objectSchema), objectSchema));\n}\n/**\r\n * Create an Object schema that extends an existing object schema.\r\n */\nfunction extendObject(parentObjectSchema, objectSchema) {\n  return object(__assign(__assign({}, parentObjectSchema.objectSchema), objectSchema));\n}\n/**\r\n * Internal utility to create object schema with different options.\r\n */\nfunction internalObject(objectSchema, skipValidateAdditionalProps, mapAdditionalProps) {\n  var keys = Object.keys(objectSchema);\n  var reverseObjectSchema = createReverseObjectSchema(objectSchema);\n  var xmlMappingInfo = getXmlPropMappingForObjectSchema(objectSchema);\n  var xmlObjectSchema = createXmlObjectSchema(objectSchema);\n  var reverseXmlObjectSchema = createReverseXmlObjectSchema(xmlObjectSchema);\n  return {\n    type: function () {\n      return \"Object<{\" + keys.map(objectKeyEncode).join(',') + \",...}>\";\n    },\n    validateBeforeMap: validateObject(objectSchema, 'validateBeforeMap', skipValidateAdditionalProps),\n    validateBeforeUnmap: validateObject(reverseObjectSchema, 'validateBeforeUnmap', skipValidateAdditionalProps),\n    map: mapObject(objectSchema, 'map', mapAdditionalProps),\n    unmap: mapObject(reverseObjectSchema, 'unmap', mapAdditionalProps),\n    validateBeforeMapXml: validateObjectBeforeMapXml(objectSchema, xmlMappingInfo, skipValidateAdditionalProps),\n    mapXml: mapObjectFromXml(xmlObjectSchema, mapAdditionalProps),\n    unmapXml: unmapObjectToXml(reverseXmlObjectSchema, mapAdditionalProps),\n    objectSchema: objectSchema\n  };\n}\nfunction validateObjectBeforeMapXml(objectSchema, xmlMappingInfo, allowAdditionalProperties) {\n  var elementsToProps = xmlMappingInfo.elementsToProps,\n    attributesToProps = xmlMappingInfo.attributesToProps;\n  return function (value, ctxt) {\n    if (typeof value !== 'object' || value === null) {\n      return ctxt.fail();\n    }\n    if (Array.isArray(value)) {\n      return ctxt.fail(\"Expected value to be of type '\" + ctxt.type + \"' but found 'Array<\" + typeof value + \">'.\");\n    }\n    var valueObject = value;\n    var attrs = valueObject.$,\n      elements = __rest(valueObject, [\"$\"]);\n    var attributes = attrs !== null && attrs !== void 0 ? attrs : {};\n    // Validate all known elements and attributes using the schema\n    return __spreadArray(__spreadArray([], __read(validateValueObject({\n      validationMethod: 'validateBeforeMapXml',\n      propTypeName: 'child elements',\n      propTypePrefix: 'element',\n      valueTypeName: 'element',\n      propMapping: elementsToProps,\n      objectSchema: objectSchema,\n      valueObject: elements,\n      ctxt: ctxt,\n      allowAdditionalProperties: allowAdditionalProperties\n    }))), __read(validateValueObject({\n      validationMethod: 'validateBeforeMapXml',\n      propTypeName: 'attributes',\n      propTypePrefix: '@',\n      valueTypeName: 'element',\n      propMapping: attributesToProps,\n      objectSchema: objectSchema,\n      valueObject: attributes,\n      ctxt: ctxt,\n      allowAdditionalProperties: allowAdditionalProperties\n    })));\n  };\n}\nfunction mapObjectFromXml(xmlObjectSchema, allowAdditionalProps) {\n  var elementsSchema = xmlObjectSchema.elementsSchema,\n    attributesSchema = xmlObjectSchema.attributesSchema;\n  var mapElements = mapObject(elementsSchema, 'mapXml', allowAdditionalProps);\n  var mapAttributes = mapObject(attributesSchema, 'mapXml', false // Always false; additional attributes are handled differently below.\n  );\n  // These are later used to omit know attribute props from the attributes object\n  // so that the remaining props can be copied over as additional props.\n  var attributeKeys = objectEntries(attributesSchema).map(function (_a) {\n    var _b = __read(_a, 2);\n    _b[0];\n    var _c = __read(_b[1], 1),\n      name = _c[0];\n    return name;\n  });\n  return function (value, ctxt) {\n    var valueObject = value;\n    var attrs = valueObject.$,\n      elements = __rest(valueObject, [\"$\"]);\n    var attributes = attrs !== null && attrs !== void 0 ? attrs : {};\n    var output = __assign(__assign({}, mapAttributes(attributes, ctxt)), mapElements(elements, ctxt));\n    if (allowAdditionalProps) {\n      // Omit known attributes and copy the rest as additional attributes.\n      var additionalAttrs = omitKeysFromObject(attributes, attributeKeys);\n      if (Object.keys(additionalAttrs).length > 0) {\n        // These additional attrs are set in the '$' property by convention.\n        output.$ = additionalAttrs;\n      }\n    }\n    return output;\n  };\n}\nfunction unmapObjectToXml(xmlObjectSchema, allowAdditionalProps) {\n  var elementsSchema = xmlObjectSchema.elementsSchema,\n    attributesSchema = xmlObjectSchema.attributesSchema;\n  var mapElements = mapObject(elementsSchema, 'unmapXml', allowAdditionalProps);\n  var mapAttributes = mapObject(attributesSchema, 'unmapXml', false // Always false so that element props are not copied during mapping\n  );\n  // These are later used to omit attribute props from the value object so that they\n  // do not get mapped during element mapping, if the allowAdditionalProps is true.\n  var attributeKeys = objectEntries(attributesSchema).map(function (_a) {\n    var _b = __read(_a, 2);\n    _b[0];\n    var _c = __read(_b[1], 1),\n      name = _c[0];\n    return name;\n  });\n  return function (value, ctxt) {\n    // Get additional attributes which are set in the '$' property by convention\n    var _a = value,\n      attributes = _a.$,\n      rest = __rest(_a, [\"$\"]);\n    // Ensure 'attributes' is an object and non-null\n    var additionalAttributes = typeof attributes === 'object' && attributes !== null && allowAdditionalProps ? attributes : {};\n    return __assign(__assign({}, mapElements(omitKeysFromObject(rest, attributeKeys), ctxt)), {\n      $: __assign(__assign({}, additionalAttributes), mapAttributes(value, ctxt))\n    });\n  };\n}\nfunction validateValueObject(_a) {\n  var validationMethod = _a.validationMethod,\n    propTypeName = _a.propTypeName,\n    propTypePrefix = _a.propTypePrefix,\n    valueTypeName = _a.valueTypeName,\n    propMapping = _a.propMapping,\n    objectSchema = _a.objectSchema,\n    valueObject = _a.valueObject,\n    ctxt = _a.ctxt,\n    allowAdditionalProperties = _a.allowAdditionalProperties;\n  var errors = [];\n  var missingProps = new Set();\n  var unknownProps = new Set(Object.keys(valueObject));\n  // Validate all known properties using the schema\n  for (var key in propMapping) {\n    if (Object.prototype.hasOwnProperty.call(propMapping, key)) {\n      var propName = propMapping[key];\n      var schema = objectSchema[propName][1];\n      unknownProps.delete(key);\n      if (key in valueObject) {\n        errors.push.apply(errors, __spreadArray([], __read(schema[validationMethod](valueObject[key], ctxt.createChild(propTypePrefix + key, valueObject[key], schema)))));\n      } else if (schema.type().indexOf('Optional<') !== 0) {\n        // Add to missing keys if it is not an optional property\n        missingProps.add(key);\n      }\n    }\n  }\n  // Create validation error for unknown properties encountered\n  var unknownPropsArray = Array.from(unknownProps);\n  if (unknownPropsArray.length > 0 && !allowAdditionalProperties) {\n    errors.push.apply(errors, __spreadArray([], __read(ctxt.fail(\"Some unknown \" + propTypeName + \" were found in the \" + valueTypeName + \": \" + unknownPropsArray.map(literalToString).join(', ') + \".\"))));\n  }\n  // Create validation error for missing required properties\n  var missingPropsArray = Array.from(missingProps);\n  if (missingPropsArray.length > 0) {\n    errors.push.apply(errors, __spreadArray([], __read(ctxt.fail(\"Some \" + propTypeName + \" are missing in the \" + valueTypeName + \": \" + missingPropsArray.map(literalToString).join(', ') + \".\"))));\n  }\n  return errors;\n}\nfunction validateObject(objectSchema, validationMethod, allowAdditionalProperties) {\n  var propsMapping = getPropMappingForObjectSchema(objectSchema);\n  return function (value, ctxt) {\n    if (typeof value !== 'object' || value === null) {\n      return ctxt.fail();\n    }\n    if (Array.isArray(value)) {\n      return ctxt.fail(\"Expected value to be of type '\" + ctxt.type + \"' but found 'Array<\" + typeof value + \">'.\");\n    }\n    return validateValueObject({\n      validationMethod: validationMethod,\n      propTypeName: 'properties',\n      propTypePrefix: '',\n      valueTypeName: 'object',\n      propMapping: propsMapping,\n      objectSchema: objectSchema,\n      valueObject: value,\n      ctxt: ctxt,\n      allowAdditionalProperties: allowAdditionalProperties\n    });\n  };\n}\nfunction mapObject(objectSchema, mappingFn, allowAdditionalProperties) {\n  return function (value, ctxt) {\n    var output = {};\n    var objectValue = value;\n    /** Properties seen in the object but not in the schema */\n    var unknownKeys = new Set(Object.keys(objectValue));\n    // Map known properties using the schema\n    for (var key in objectSchema) {\n      /* istanbul ignore else */\n      if (Object.prototype.hasOwnProperty.call(objectSchema, key)) {\n        var element = objectSchema[key];\n        var propName = element[0];\n        var propValue = objectValue[propName];\n        unknownKeys.delete(propName);\n        // Skip mapping for optional properties to avoid creating properties with value 'undefined'\n        if (element[1].type().indexOf('Optional<') !== 0 || propValue !== undefined) {\n          output[key] = element[1][mappingFn](propValue, ctxt.createChild(propName, propValue, element[1]));\n        }\n      }\n    }\n    // Copy unknown properties over if additional properties flag is set\n    if (allowAdditionalProperties) {\n      unknownKeys.forEach(function (unknownKey) {\n        output[unknownKey] = objectValue[unknownKey];\n      });\n    }\n    return output;\n  };\n}\nfunction getXmlPropMappingForObjectSchema(objectSchema) {\n  var _a, _b;\n  var elementsToProps = {};\n  var attributesToProps = {};\n  for (var key in objectSchema) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(objectSchema, key)) {\n      var _c = __read(objectSchema[key], 3),\n        propName = _c[0],\n        xmlOptions = _c[2];\n      if ((xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.isAttr) === true) {\n        attributesToProps[(_a = xmlOptions.xmlName) !== null && _a !== void 0 ? _a : propName] = key;\n      } else {\n        elementsToProps[(_b = xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.xmlName) !== null && _b !== void 0 ? _b : propName] = key;\n      }\n    }\n  }\n  return {\n    elementsToProps: elementsToProps,\n    attributesToProps: attributesToProps\n  };\n}\nfunction getPropMappingForObjectSchema(objectSchema) {\n  var propsMapping = {};\n  for (var key in objectSchema) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(objectSchema, key)) {\n      var propDef = objectSchema[key];\n      propsMapping[propDef[0]] = key;\n    }\n  }\n  return propsMapping;\n}\nfunction createReverseObjectSchema(objectSchema) {\n  var reverseObjectSchema = {};\n  for (var key in objectSchema) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(objectSchema, key)) {\n      var element = objectSchema[key];\n      reverseObjectSchema[element[0]] = [key, element[1], element[2]];\n    }\n  }\n  return reverseObjectSchema;\n}\nfunction createXmlObjectSchema(objectSchema) {\n  var _a;\n  var elementsSchema = {};\n  var attributesSchema = {};\n  for (var key in objectSchema) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(objectSchema, key)) {\n      var element = objectSchema[key];\n      var _b = __read(element, 3),\n        serializedName = _b[0],\n        schema = _b[1],\n        xmlOptions = _b[2];\n      var xmlObjectSchema = (xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.isAttr) ? attributesSchema : elementsSchema;\n      xmlObjectSchema[key] = [(_a = xmlOptions === null || xmlOptions === void 0 ? void 0 : xmlOptions.xmlName) !== null && _a !== void 0 ? _a : serializedName, schema, xmlOptions];\n    }\n  }\n  return {\n    elementsSchema: elementsSchema,\n    attributesSchema: attributesSchema\n  };\n}\nfunction createReverseXmlObjectSchema(xmlObjectSchema) {\n  return {\n    attributesSchema: createReverseObjectSchema(xmlObjectSchema.attributesSchema),\n    elementsSchema: createReverseObjectSchema(xmlObjectSchema.elementsSchema)\n  };\n}\nexport { expandoObject, extendExpandoObject, extendObject, extendStrictObject, object, strictObject };",
      "start": 1707437862532,
      "end": 1707437862616,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707437862616,
      "end": 1707437862616,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707437862617,
      "end": 1707437862617,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707437862617,
      "end": 1707437862618,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707437862618,
      "end": 1707437862618,
      "order": "normal"
    }
  ]
}
