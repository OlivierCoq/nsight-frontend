{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/v1TransactionsApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { v1CreateRefundRequestSchema, } from '../models/v1CreateRefundRequest';\nimport { v1OrderSchema } from '../models/v1Order';\nimport { v1PaymentSchema } from '../models/v1Payment';\nimport { v1RefundSchema } from '../models/v1Refund';\nimport { v1SettlementSchema } from '../models/v1Settlement';\nimport { v1UpdateOrderRequestSchema, } from '../models/v1UpdateOrderRequest';\nimport { array, boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class V1TransactionsApi extends BaseApi {\n    /**\n     * Provides summary information for a merchant's online store orders.\n     *\n     * @param locationId  The ID of the location to list online store orders for.\n     * @param order       The order in which payments are listed in the response.\n     * @param limit       The maximum number of payments to return in a single response. This value cannot\n     *                              exceed 200.\n     * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n     *                              the endpoint.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1ListOrders(locationId, order, limit, batchToken, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            order: [order, optional(string())],\n            limit: [limit, optional(number())],\n            batchToken: [batchToken, optional(string())],\n        });\n        req.query('order', mapped.order);\n        req.query('limit', mapped.limit);\n        req.query('batch_token', mapped.batchToken);\n        req.appendTemplatePath `/v1/${mapped.locationId}/orders`;\n        req.deprecated('V1TransactionsApi.v1ListOrders');\n        return req.callAsJson(array(v1OrderSchema), requestOptions);\n    }\n    /**\n     * Provides comprehensive information for a single online store order, including the order's history.\n     *\n     * @param locationId  The ID of the order's associated location.\n     * @param orderId     The order's Square-issued ID. You obtain this value from Order objects returned by\n     *                              the List Orders endpoint\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1RetrieveOrder(locationId, orderId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            orderId: [orderId, string()],\n        });\n        req.appendTemplatePath `/v1/${mapped.locationId}/orders/${mapped.orderId}`;\n        req.deprecated('V1TransactionsApi.v1RetrieveOrder');\n        return req.callAsJson(v1OrderSchema, requestOptions);\n    }\n    /**\n     * Updates the details of an online store order. Every update you perform on an order corresponds to\n     * one of three actions:\n     *\n     * @param locationId   The ID of the order's associated location.\n     * @param orderId      The order's Square-issued ID. You obtain this value from Order\n     *                                                    objects returned by the List Orders endpoint\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                    the corresponding object definition for field details.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1UpdateOrder(locationId, orderId, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            orderId: [orderId, string()],\n            body: [body, v1UpdateOrderRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v1/${mapped.locationId}/orders/${mapped.orderId}`;\n        req.deprecated('V1TransactionsApi.v1UpdateOrder');\n        return req.callAsJson(v1OrderSchema, requestOptions);\n    }\n    /**\n     * Provides summary information for all payments taken for a given\n     * Square account during a date range. Date ranges cannot exceed 1 year in\n     * length. See Date ranges for details of inclusive and exclusive dates.\n     *\n     * *Note**: Details for payments processed with Square Point of Sale while\n     * in offline mode may not be transmitted to Square for up to 72 hours.\n     * Offline payments have a `created_at` value that reflects the time the\n     * payment was originally processed, not the time it was subsequently\n     * transmitted to Square. Consequently, the ListPayments endpoint might\n     * list an offline payment chronologically between online payments that\n     * were seen in a previous request.\n     *\n     * @param locationId      The ID of the location to list payments for. If you specify me, this endpoint\n     *                                   returns payments aggregated from all of the business's locations.\n     * @param order           The order in which payments are listed in the response.\n     * @param beginTime       The beginning of the requested reporting period, in ISO 8601 format. If this\n     *                                   value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an\n     *                                   error. Default value: The current time minus one year.\n     * @param endTime         The end of the requested reporting period, in ISO 8601 format. If this value is\n     *                                   more than one year greater than begin_time, this endpoint returns an error.\n     *                                   Default value: The current time.\n     * @param limit           The maximum number of payments to return in a single response. This value\n     *                                   cannot exceed 200.\n     * @param batchToken      A pagination cursor to retrieve the next set of results for your original query\n     *                                   to the endpoint.\n     * @param includePartial  Indicates whether or not to include partial payments in the response. Partial\n     *                                   payments will have the tenders collected so far, but the itemizations will be\n     *                                   empty until the payment is completed.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1ListPayments(locationId, order, beginTime, endTime, limit, batchToken, includePartial, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            order: [order, optional(string())],\n            beginTime: [beginTime, optional(string())],\n            endTime: [endTime, optional(string())],\n            limit: [limit, optional(number())],\n            batchToken: [batchToken, optional(string())],\n            includePartial: [includePartial, optional(boolean())],\n        });\n        req.query('order', mapped.order);\n        req.query('begin_time', mapped.beginTime);\n        req.query('end_time', mapped.endTime);\n        req.query('limit', mapped.limit);\n        req.query('batch_token', mapped.batchToken);\n        req.query('include_partial', mapped.includePartial);\n        req.appendTemplatePath `/v1/${mapped.locationId}/payments`;\n        req.deprecated('V1TransactionsApi.v1ListPayments');\n        return req.callAsJson(array(v1PaymentSchema), requestOptions);\n    }\n    /**\n     * Provides comprehensive information for a single payment.\n     *\n     * @param locationId  The ID of the payment's associated location.\n     * @param paymentId   The Square-issued payment ID. payment_id comes from Payment objects returned by the\n     *                              List Payments endpoint, Settlement objects returned by the List Settlements endpoint,\n     *                              or Refund objects returned by the List Refunds endpoint.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1RetrievePayment(locationId, paymentId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            paymentId: [paymentId, string()],\n        });\n        req.appendTemplatePath `/v1/${mapped.locationId}/payments/${mapped.paymentId}`;\n        req.deprecated('V1TransactionsApi.v1RetrievePayment');\n        return req.callAsJson(v1PaymentSchema, requestOptions);\n    }\n    /**\n     * Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff\n     * during a date range. Date ranges cannot exceed one year in length.\n     *\n     * @param locationId  The ID of the location to list refunds for.\n     * @param order       The order in which payments are listed in the response.\n     * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value\n     *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.\n     *                              Default value: The current time minus one year.\n     * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more\n     *                              than one year greater than begin_time, this endpoint returns an error. Default value:\n     *                              The current time.\n     * @param limit       The approximate number of refunds to return in a single response. Default: 100. Max:\n     *                              200. Response may contain more results than the prescribed limit when refunds are\n     *                              made simultaneously to multiple tenders in a payment or when refunds are generated in\n     *                              an exchange to account for the value of returned goods.\n     * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n     *                              the endpoint.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1ListRefunds(locationId, order, beginTime, endTime, limit, batchToken, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            order: [order, optional(string())],\n            beginTime: [beginTime, optional(string())],\n            endTime: [endTime, optional(string())],\n            limit: [limit, optional(number())],\n            batchToken: [batchToken, optional(string())],\n        });\n        req.query('order', mapped.order);\n        req.query('begin_time', mapped.beginTime);\n        req.query('end_time', mapped.endTime);\n        req.query('limit', mapped.limit);\n        req.query('batch_token', mapped.batchToken);\n        req.appendTemplatePath `/v1/${mapped.locationId}/refunds`;\n        req.deprecated('V1TransactionsApi.v1ListRefunds');\n        return req.callAsJson(array(v1RefundSchema), requestOptions);\n    }\n    /**\n     * Issues a refund for a previously processed payment. You must issue\n     * a refund within 60 days of the associated payment.\n     *\n     * You cannot issue a partial refund for a split tender payment. You must\n     * instead issue a full or partial refund for a particular tender, by\n     * providing the applicable tender id to the V1CreateRefund endpoint.\n     * Issuing a full refund for a split tender payment refunds all tenders\n     * associated with the payment.\n     *\n     * Issuing a refund for a card payment is not reversible. For development\n     * purposes, you can create fake cash payments in Square Point of Sale and\n     * refund them.\n     *\n     * @param locationId   The ID of the original payment's associated location.\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                     the corresponding object definition for field details.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1CreateRefund(locationId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            body: [body, v1CreateRefundRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v1/${mapped.locationId}/refunds`;\n        req.deprecated('V1TransactionsApi.v1CreateRefund');\n        return req.callAsJson(v1RefundSchema, requestOptions);\n    }\n    /**\n     * Provides summary information for all deposits and withdrawals\n     * initiated by Square to a linked bank account during a date range. Date\n     * ranges cannot exceed one year in length.\n     *\n     * *Note**: the ListSettlements endpoint does not provide entry\n     * information.\n     *\n     * @param locationId  The ID of the location to list settlements for. If you specify me, this endpoint\n     *                              returns settlements aggregated from all of the business's locations.\n     * @param order       The order in which settlements are listed in the response.\n     * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value\n     *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.\n     *                              Default value: The current time minus one year.\n     * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more\n     *                              than one year greater than begin_time, this endpoint returns an error. Default value:\n     *                              The current time.\n     * @param limit       The maximum number of settlements to return in a single response. This value cannot\n     *                              exceed 200.\n     * @param status      Provide this parameter to retrieve only settlements with a particular status (SENT\n     *                              or FAILED).\n     * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n     *                              the endpoint.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1ListSettlements(locationId, order, beginTime, endTime, limit, status, batchToken, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            order: [order, optional(string())],\n            beginTime: [beginTime, optional(string())],\n            endTime: [endTime, optional(string())],\n            limit: [limit, optional(number())],\n            status: [status, optional(string())],\n            batchToken: [batchToken, optional(string())],\n        });\n        req.query('order', mapped.order);\n        req.query('begin_time', mapped.beginTime);\n        req.query('end_time', mapped.endTime);\n        req.query('limit', mapped.limit);\n        req.query('status', mapped.status);\n        req.query('batch_token', mapped.batchToken);\n        req.appendTemplatePath `/v1/${mapped.locationId}/settlements`;\n        req.deprecated('V1TransactionsApi.v1ListSettlements');\n        return req.callAsJson(array(v1SettlementSchema), requestOptions);\n    }\n    /**\n     * Provides comprehensive information for a single settlement.\n     *\n     * The returned `Settlement` objects include an `entries` field that lists\n     * the transactions that contribute to the settlement total. Most\n     * settlement entries correspond to a payment payout, but settlement\n     * entries are also generated for less common events, like refunds, manual\n     * adjustments, or chargeback holds.\n     *\n     * Square initiates its regular deposits as indicated in the\n     * [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)\n     * help article. Details for a regular deposit are usually not available\n     * from Connect API endpoints before 10 p.m. PST the same day.\n     *\n     * Square does not know when an initiated settlement **completes**, only\n     * whether it has failed. A completed settlement is typically reflected in\n     * a bank account within 3 business days, but in exceptional cases it may\n     * take longer.\n     *\n     * @param locationId    The ID of the settlements's associated location.\n     * @param settlementId  The settlement's Square-issued ID. You obtain this value from Settlement objects\n     *                                returned by the List Settlements endpoint.\n     * @return Response from the API call\n     * @deprecated\n     */\n    async v1RetrieveSettlement(locationId, settlementId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            settlementId: [settlementId, string()],\n        });\n        req.appendTemplatePath `/v1/${mapped.locationId}/settlements/${mapped.settlementId}`;\n        req.deprecated('V1TransactionsApi.v1RetrieveSettlement');\n        return req.callAsJson(v1SettlementSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=v1TransactionsApi.js.map",
      "start": 1709003846808,
      "end": 1709003846907,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846907,
      "end": 1709003846907,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003846907,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003846908,
      "end": 1709003846908,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003846908,
      "end": 1709003846909,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003846909,
      "end": 1709003846909,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003846909,
      "end": 1709003846909,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003846909,
      "end": 1709003846909,
      "order": "normal"
    }
  ]
}
