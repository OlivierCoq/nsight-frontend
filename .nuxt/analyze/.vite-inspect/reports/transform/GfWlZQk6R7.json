{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/subscriptionsApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { bulkSwapPlanRequestSchema, } from '../models/bulkSwapPlanRequest';\nimport { bulkSwapPlanResponseSchema, } from '../models/bulkSwapPlanResponse';\nimport { cancelSubscriptionResponseSchema, } from '../models/cancelSubscriptionResponse';\nimport { changeBillingAnchorDateRequestSchema, } from '../models/changeBillingAnchorDateRequest';\nimport { changeBillingAnchorDateResponseSchema, } from '../models/changeBillingAnchorDateResponse';\nimport { createSubscriptionRequestSchema, } from '../models/createSubscriptionRequest';\nimport { createSubscriptionResponseSchema, } from '../models/createSubscriptionResponse';\nimport { deleteSubscriptionActionResponseSchema, } from '../models/deleteSubscriptionActionResponse';\nimport { listSubscriptionEventsResponseSchema, } from '../models/listSubscriptionEventsResponse';\nimport { pauseSubscriptionRequestSchema, } from '../models/pauseSubscriptionRequest';\nimport { pauseSubscriptionResponseSchema, } from '../models/pauseSubscriptionResponse';\nimport { resumeSubscriptionRequestSchema, } from '../models/resumeSubscriptionRequest';\nimport { resumeSubscriptionResponseSchema, } from '../models/resumeSubscriptionResponse';\nimport { retrieveSubscriptionResponseSchema, } from '../models/retrieveSubscriptionResponse';\nimport { searchSubscriptionsRequestSchema, } from '../models/searchSubscriptionsRequest';\nimport { searchSubscriptionsResponseSchema, } from '../models/searchSubscriptionsResponse';\nimport { swapPlanRequestSchema, } from '../models/swapPlanRequest';\nimport { swapPlanResponseSchema, } from '../models/swapPlanResponse';\nimport { updateSubscriptionRequestSchema, } from '../models/updateSubscriptionRequest';\nimport { updateSubscriptionResponseSchema, } from '../models/updateSubscriptionResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class SubscriptionsApi extends BaseApi {\n    /**\n     * Enrolls a customer in a subscription.\n     *\n     * If you provide a card on file in the request, Square charges the card for\n     * the subscription. Otherwise, Square sends an invoice to the customer's email\n     * address. The subscription starts immediately, unless the request includes\n     * the optional `start_date`. Each individual subscription is associated with a particular location.\n     *\n     * For more information, see [Create a subscription](https://developer.squareup.com/docs/subscriptions-\n     * api/manage-subscriptions#create-a-subscription).\n     *\n     * @param body         An object containing the fields to POST for the request.\n     *                                                         See the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async createSubscription(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/subscriptions');\n        const mapped = req.prepareArgs({\n            body: [body, createSubscriptionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Schedules a plan variation change for all active subscriptions under a given plan\n     * variation. For more information, see [Swap Subscription Plan Variations](https://developer.squareup.\n     * com/docs/subscriptions-api/swap-plan-variations).\n     *\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                   the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async bulkSwapPlan(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/subscriptions/bulk-swap-plan');\n        const mapped = req.prepareArgs({ body: [body, bulkSwapPlanRequestSchema] });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkSwapPlanResponseSchema, requestOptions);\n    }\n    /**\n     * Searches for subscriptions.\n     *\n     * Results are ordered chronologically by subscription creation date. If\n     * the request specifies more than one location ID,\n     * the endpoint orders the result\n     * by location ID, and then by creation date within each location. If no locations are given\n     * in the query, all locations are searched.\n     *\n     * You can also optionally specify `customer_ids` to search by customer.\n     * If left unset, all customers\n     * associated with the specified locations are returned.\n     * If the request specifies customer IDs, the endpoint orders results\n     * first by location, within location by customer ID, and within\n     * customer by subscription creation date.\n     *\n     * @param body         An object containing the fields to POST for the request.\n     *                                                          See the corresponding object definition for field\n     *                                                          details.\n     * @return Response from the API call\n     */\n    async searchSubscriptions(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/subscriptions/search');\n        const mapped = req.prepareArgs({\n            body: [body, searchSubscriptionsRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(searchSubscriptionsResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a specific subscription.\n     *\n     * @param subscriptionId  The ID of the subscription to retrieve.\n     * @param include         A query parameter to specify related information to be included in the response.\n     *                                  The supported query parameter values are:   - `actions`: to include scheduled\n     *                                  actions on the targeted subscription.\n     * @return Response from the API call\n     */\n    async retrieveSubscription(subscriptionId, include, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            include: [include, optional(string())],\n        });\n        req.query('include', mapped.include);\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}`;\n        return req.callAsJson(retrieveSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a subscription by modifying or clearing `subscription` field values.\n     * To clear a field, set its value to `null`.\n     *\n     * @param subscriptionId  The ID of the subscription to update.\n     * @param body            An object containing the fields to POST for the\n     *                                                            request.  See the corresponding object definition for\n     *                                                            field details.\n     * @return Response from the API call\n     */\n    async updateSubscription(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, updateSubscriptionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}`;\n        return req.callAsJson(updateSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a scheduled action for a subscription.\n     *\n     * @param subscriptionId  The ID of the subscription the targeted action is to act upon.\n     * @param actionId        The ID of the targeted action to be deleted.\n     * @return Response from the API call\n     */\n    async deleteSubscriptionAction(subscriptionId, actionId, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            actionId: [actionId, string()],\n        });\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}/actions/${mapped.actionId}`;\n        return req.callAsJson(deleteSubscriptionActionResponseSchema, requestOptions);\n    }\n    /**\n     * Changes the [billing anchor date](https://developer.squareup.com/docs/subscriptions-api/subscription-\n     * billing#billing-dates)\n     * for a subscription.\n     *\n     * @param subscriptionId  The ID of the subscription to update the billing\n     *                                                                 anchor date.\n     * @param body            An object containing the fields to POST for the\n     *                                                                 request.  See the corresponding object definition\n     *                                                                 for field details.\n     * @return Response from the API call\n     */\n    async changeBillingAnchorDate(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, changeBillingAnchorDateRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}/billing-anchor`;\n        return req.callAsJson(changeBillingAnchorDateResponseSchema, requestOptions);\n    }\n    /**\n     * Schedules a `CANCEL` action to cancel an active subscription. This\n     * sets the `canceled_date` field to the end of the active billing period. After this date,\n     * the subscription status changes from ACTIVE to CANCELED.\n     *\n     * @param subscriptionId  The ID of the subscription to cancel.\n     * @return Response from the API call\n     */\n    async cancelSubscription(subscriptionId, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n        });\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}/cancel`;\n        return req.callAsJson(cancelSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Lists all [events](https://developer.squareup.com/docs/subscriptions-api/actions-events) for a\n     * specific subscription.\n     *\n     * @param subscriptionId  The ID of the subscription to retrieve the events for.\n     * @param cursor          When the total number of resulting subscription events exceeds the limit of a\n     *                                  paged response,  specify the cursor returned from a preceding response here to\n     *                                  fetch the next set of results. If the cursor is unset, the response contains the\n     *                                  last page of the results.  For more information, see [Pagination](https:\n     *                                  //developer.squareup.com/docs/build-basics/common-api-patterns/pagination).\n     * @param limit           The upper limit on the number of subscription events to return in a paged\n     *                                  response.\n     * @return Response from the API call\n     */\n    async listSubscriptionEvents(subscriptionId, cursor, limit, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            cursor: [cursor, optional(string())],\n            limit: [limit, optional(number())],\n        });\n        req.query('cursor', mapped.cursor);\n        req.query('limit', mapped.limit);\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}/events`;\n        return req.callAsJson(listSubscriptionEventsResponseSchema, requestOptions);\n    }\n    /**\n     * Schedules a `PAUSE` action to pause an active subscription.\n     *\n     * @param subscriptionId  The ID of the subscription to pause.\n     * @param body            An object containing the fields to POST for the request.\n     *                                                           See the corresponding object definition for field\n     *                                                           details.\n     * @return Response from the API call\n     */\n    async pauseSubscription(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, pauseSubscriptionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}/pause`;\n        return req.callAsJson(pauseSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Schedules a `RESUME` action to resume a paused or a deactivated subscription.\n     *\n     * @param subscriptionId  The ID of the subscription to resume.\n     * @param body            An object containing the fields to POST for the\n     *                                                            request.  See the corresponding object definition for\n     *                                                            field details.\n     * @return Response from the API call\n     */\n    async resumeSubscription(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, resumeSubscriptionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}/resume`;\n        return req.callAsJson(resumeSubscriptionResponseSchema, requestOptions);\n    }\n    /**\n     * Schedules a `SWAP_PLAN` action to swap a subscription plan variation in an existing subscription.\n     * For more information, see [Swap Subscription Plan Variations](https://developer.squareup.\n     * com/docs/subscriptions-api/swap-plan-variations).\n     *\n     * @param subscriptionId  The ID of the subscription to swap the subscription plan for.\n     * @param body            An object containing the fields to POST for the request.  See\n     *                                                  the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async swapPlan(subscriptionId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            subscriptionId: [subscriptionId, string()],\n            body: [body, swapPlanRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/subscriptions/${mapped.subscriptionId}/swap-plan`;\n        return req.callAsJson(swapPlanResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=subscriptionsApi.js.map",
      "start": 1709003846803,
      "end": 1709003846899,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846899,
      "end": 1709003846899,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846899,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003846900,
      "end": 1709003846900,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003846901,
      "end": 1709003846901,
      "order": "normal"
    }
  ]
}
