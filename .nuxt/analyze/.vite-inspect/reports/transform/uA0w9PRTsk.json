{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/bookingCustomAttributesApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { bulkDeleteBookingCustomAttributesRequestSchema, } from '../models/bulkDeleteBookingCustomAttributesRequest';\nimport { bulkDeleteBookingCustomAttributesResponseSchema, } from '../models/bulkDeleteBookingCustomAttributesResponse';\nimport { bulkUpsertBookingCustomAttributesRequestSchema, } from '../models/bulkUpsertBookingCustomAttributesRequest';\nimport { bulkUpsertBookingCustomAttributesResponseSchema, } from '../models/bulkUpsertBookingCustomAttributesResponse';\nimport { createBookingCustomAttributeDefinitionRequestSchema, } from '../models/createBookingCustomAttributeDefinitionRequest';\nimport { createBookingCustomAttributeDefinitionResponseSchema, } from '../models/createBookingCustomAttributeDefinitionResponse';\nimport { deleteBookingCustomAttributeDefinitionResponseSchema, } from '../models/deleteBookingCustomAttributeDefinitionResponse';\nimport { deleteBookingCustomAttributeResponseSchema, } from '../models/deleteBookingCustomAttributeResponse';\nimport { listBookingCustomAttributeDefinitionsResponseSchema, } from '../models/listBookingCustomAttributeDefinitionsResponse';\nimport { listBookingCustomAttributesResponseSchema, } from '../models/listBookingCustomAttributesResponse';\nimport { retrieveBookingCustomAttributeDefinitionResponseSchema, } from '../models/retrieveBookingCustomAttributeDefinitionResponse';\nimport { retrieveBookingCustomAttributeResponseSchema, } from '../models/retrieveBookingCustomAttributeResponse';\nimport { updateBookingCustomAttributeDefinitionRequestSchema, } from '../models/updateBookingCustomAttributeDefinitionRequest';\nimport { updateBookingCustomAttributeDefinitionResponseSchema, } from '../models/updateBookingCustomAttributeDefinitionResponse';\nimport { upsertBookingCustomAttributeRequestSchema, } from '../models/upsertBookingCustomAttributeRequest';\nimport { upsertBookingCustomAttributeResponseSchema, } from '../models/upsertBookingCustomAttributeResponse';\nimport { boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class BookingCustomAttributesApi extends BaseApi {\n    /**\n     * Get all bookings custom attribute definitions.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and\n     * `APPOINTMENTS_READ` for the OAuth scope.\n     *\n     * @param limit  The maximum number of results to return in a single paged response. This limit is\n     *                         advisory. The response might contain more or fewer results. The minimum value is 1 and the\n     *                         maximum value is 100. The default value is 20. For more information, see\n     *                         [Pagination](https://developer.squareup.com/docs/build-basics/common-api-\n     *                         patterns/pagination).\n     * @param cursor The cursor returned in the paged response from the previous call to this endpoint.\n     *                         Provide this cursor to retrieve the next page of results for your original request. For\n     *                         more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-\n     *                         api-patterns/pagination).\n     * @return Response from the API call\n     */\n    async listBookingCustomAttributeDefinitions(limit, cursor, requestOptions) {\n        const req = this.createRequest('GET', '/v2/bookings/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n        });\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        return req.callAsJson(listBookingCustomAttributeDefinitionsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a bookings custom attribute definition.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n     * `APPOINTMENTS_WRITE` for the OAuth scope.\n     *\n     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed\n     * to *Appointments Plus*\n     * or *Appointments Premium*.\n     *\n     * @param body         An object containing the fields to\n     *                                                                             POST for the request.  See the\n     *                                                                             corresponding object definition for\n     *                                                                             field details.\n     * @return Response from the API call\n     */\n    async createBookingCustomAttributeDefinition(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/bookings/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            body: [body, createBookingCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createBookingCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a bookings custom attribute definition.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n     * `APPOINTMENTS_WRITE` for the OAuth scope.\n     *\n     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed\n     * to *Appointments Plus*\n     * or *Appointments Premium*.\n     *\n     * @param key The key of the custom attribute definition to delete.\n     * @return Response from the API call\n     */\n    async deleteBookingCustomAttributeDefinition(key, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({ key: [key, string()] });\n        req.appendTemplatePath `/v2/bookings/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(deleteBookingCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a bookings custom attribute definition.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and\n     * `APPOINTMENTS_READ` for the OAuth scope.\n     *\n     * @param key     The key of the custom attribute definition to retrieve. If the requesting application is\n     *                          not the definition owner, you must use the qualified key.\n     * @param version The current version of the custom attribute definition, which is used for strongly\n     *                          consistent reads to guarantee that you receive the most up-to-date data. When included in\n     *                          the request, Square returns the specified version or a higher version if one exists. If\n     *                          the specified version is higher than the current version, Square returns a `BAD_REQUEST`\n     *                          error.\n     * @return Response from the API call\n     */\n    async retrieveBookingCustomAttributeDefinition(key, version, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            version: [version, optional(number())],\n        });\n        req.query('version', mapped.version);\n        req.appendTemplatePath `/v2/bookings/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(retrieveBookingCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a bookings custom attribute definition.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n     * `APPOINTMENTS_WRITE` for the OAuth scope.\n     *\n     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed\n     * to *Appointments Plus*\n     * or *Appointments Premium*.\n     *\n     * @param key          The key of the custom attribute\n     *                                                                             definition to update.\n     * @param body         An object containing the fields to\n     *                                                                             POST for the request.  See the\n     *                                                                             corresponding object definition for\n     *                                                                             field details.\n     * @return Response from the API call\n     */\n    async updateBookingCustomAttributeDefinition(key, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            body: [body, updateBookingCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/bookings/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(updateBookingCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Bulk deletes bookings custom attributes.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n     * `APPOINTMENTS_WRITE` for the OAuth scope.\n     *\n     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed\n     * to *Appointments Plus*\n     * or *Appointments Premium*.\n     *\n     * @param body         An object containing the fields to POST\n     *                                                                        for the request.  See the corresponding\n     *                                                                        object definition for field details.\n     * @return Response from the API call\n     */\n    async bulkDeleteBookingCustomAttributes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/bookings/custom-attributes/bulk-delete');\n        const mapped = req.prepareArgs({\n            body: [body, bulkDeleteBookingCustomAttributesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkDeleteBookingCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Bulk upserts bookings custom attributes.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n     * `APPOINTMENTS_WRITE` for the OAuth scope.\n     *\n     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed\n     * to *Appointments Plus*\n     * or *Appointments Premium*.\n     *\n     * @param body         An object containing the fields to POST\n     *                                                                        for the request.  See the corresponding\n     *                                                                        object definition for field details.\n     * @return Response from the API call\n     */\n    async bulkUpsertBookingCustomAttributes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/bookings/custom-attributes/bulk-upsert');\n        const mapped = req.prepareArgs({\n            body: [body, bulkUpsertBookingCustomAttributesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkUpsertBookingCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Lists a booking's custom attributes.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and\n     * `APPOINTMENTS_READ` for the OAuth scope.\n     *\n     * @param bookingId        The ID of the target [booking](entity:Booking).\n     * @param limit            The maximum number of results to return in a single paged response. This limit\n     *                                    is advisory. The response might contain more or fewer results. The minimum\n     *                                    value is 1 and the maximum value is 100. The default value is 20. For more\n     *                                    information, see [Pagination](https://developer.squareup.com/docs/build-\n     *                                    basics/common-api-patterns/pagination).\n     * @param cursor           The cursor returned in the paged response from the previous call to this\n     *                                    endpoint. Provide this cursor to retrieve the next page of results for your\n     *                                    original request. For more information, see [Pagination](https://developer.\n     *                                    squareup.com/docs/build-basics/common-api-patterns/pagination).\n     * @param withDefinitions  Indicates whether to return the [custom attribute definition](entity:\n     *                                    CustomAttributeDefinition) in the `definition` field of each custom attribute.\n     *                                    Set this parameter to `true` to get the name and description of each custom\n     *                                    attribute, information about the data type, or other definition details. The\n     *                                    default value is `false`.\n     * @return Response from the API call\n     */\n    async listBookingCustomAttributes(bookingId, limit, cursor, withDefinitions, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            bookingId: [bookingId, string()],\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n            withDefinitions: [withDefinitions, optional(boolean())],\n        });\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        req.query('with_definitions', mapped.withDefinitions);\n        req.appendTemplatePath `/v2/bookings/${mapped.bookingId}/custom-attributes`;\n        return req.callAsJson(listBookingCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a bookings custom attribute.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n     * `APPOINTMENTS_WRITE` for the OAuth scope.\n     *\n     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed\n     * to *Appointments Plus*\n     * or *Appointments Premium*.\n     *\n     * @param bookingId  The ID of the target [booking](entity:Booking).\n     * @param key        The key of the custom attribute to delete. This key must match the `key` of a custom\n     *                             attribute definition in the Square seller account. If the requesting application is\n     *                             not the definition owner, you must use the qualified key.\n     * @return Response from the API call\n     */\n    async deleteBookingCustomAttribute(bookingId, key, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({\n            bookingId: [bookingId, string()],\n            key: [key, string()],\n        });\n        req.appendTemplatePath `/v2/bookings/${mapped.bookingId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(deleteBookingCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a bookings custom attribute.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and\n     * `APPOINTMENTS_READ` for the OAuth scope.\n     *\n     * @param bookingId       The ID of the target [booking](entity:Booking).\n     * @param key             The key of the custom attribute to retrieve. This key must match the `key` of a\n     *                                   custom attribute definition in the Square seller account. If the requesting\n     *                                   application is not the definition owner, you must use the qualified key.\n     * @param withDefinition  Indicates whether to return the [custom attribute definition](entity:\n     *                                   CustomAttributeDefinition) in the `definition` field of the custom attribute.\n     *                                   Set this parameter to `true` to get the name and description of the custom\n     *                                   attribute, information about the data type, or other definition details. The\n     *                                   default value is `false`.\n     * @param version         The current version of the custom attribute, which is used for strongly\n     *                                   consistent reads to guarantee that you receive the most up-to-date data. When\n     *                                   included in the request, Square returns the specified version or a higher\n     *                                   version if one exists. If the specified version is higher than the current\n     *                                   version, Square returns a `BAD_REQUEST` error.\n     * @return Response from the API call\n     */\n    async retrieveBookingCustomAttribute(bookingId, key, withDefinition, version, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            bookingId: [bookingId, string()],\n            key: [key, string()],\n            withDefinition: [withDefinition, optional(boolean())],\n            version: [version, optional(number())],\n        });\n        req.query('with_definition', mapped.withDefinition);\n        req.query('version', mapped.version);\n        req.appendTemplatePath `/v2/bookings/${mapped.bookingId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(retrieveBookingCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Upserts a bookings custom attribute.\n     *\n     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.\n     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and\n     * `APPOINTMENTS_WRITE` for the OAuth scope.\n     *\n     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed\n     * to *Appointments Plus*\n     * or *Appointments Premium*.\n     *\n     * @param bookingId    The ID of the target [booking](entity:Booking).\n     * @param key          The key of the custom attribute to create or\n     *                                                                   update. This key must match the `key` of a\n     *                                                                   custom attribute definition in the Square seller\n     *                                                                   account. If the requesting application is not\n     *                                                                   the definition owner, you must use the qualified\n     *                                                                   key.\n     * @param body         An object containing the fields to POST for the\n     *                                                                   request.  See the corresponding object\n     *                                                                   definition for field details.\n     * @return Response from the API call\n     */\n    async upsertBookingCustomAttribute(bookingId, key, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            bookingId: [bookingId, string()],\n            key: [key, string()],\n            body: [body, upsertBookingCustomAttributeRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/bookings/${mapped.bookingId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(upsertBookingCustomAttributeResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=bookingCustomAttributesApi.js.map",
      "start": 1707436156453,
      "end": 1707436156501,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707436156501,
      "end": 1707436156501,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156501,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707436156502,
      "end": 1707436156502,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707436156502,
      "end": 1707436156503,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707436156503,
      "end": 1707436156503,
      "order": "normal"
    }
  ]
}
