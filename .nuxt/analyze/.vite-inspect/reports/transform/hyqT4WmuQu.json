{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/@apimatic/schema/es/utils.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __assign } from 'tslib';\n\n/**\r\n * Utilities for internal library usage\r\n */\nfunction arrayEntries(arr) {\n  var entries = [];\n  for (var index = 0; index < arr.length; index++) {\n    var element = arr[index];\n    entries.push([index, element]);\n  }\n  return entries;\n}\nfunction objectEntries(obj) {\n  var ownProps = Object.keys(obj);\n  var i = ownProps.length;\n  var resArray = new Array(i); // preallocate the Array\n  while (i--) {\n    resArray[i] = [ownProps[i], obj[ownProps[i]]];\n  }\n  return resArray;\n}\nfunction literalToString(value) {\n  return typeof value === 'string' ? \"\\\"\" + value.replace(/\"/g, '\"') + \"\\\"\" : \"\" + value;\n}\nfunction identityFn(value) {\n  return value;\n}\nfunction toValidator(fn) {\n  return function (value, ctxt) {\n    return fn(value, ctxt.strictValidation) ? [] : ctxt.fail();\n  };\n}\n/**\r\n * Create a schema in which the mapping and unmapping is done the same way\r\n */\nfunction createSymmetricSchema(schema) {\n  return createBasicSchema({\n    type: function () {\n      return schema.type;\n    },\n    validateBeforeMap: schema.validate,\n    validateBeforeUnmap: schema.validate,\n    map: schema.map,\n    unmap: schema.map\n  });\n}\n/** Create a basic schema where XML mapping and validation is the same as for JSON */\nfunction createBasicSchema(basicSchema) {\n  return __assign(__assign({}, basicSchema), {\n    validateBeforeMapXml: basicSchema.validateBeforeUnmap,\n    mapXml: basicSchema.map,\n    unmapXml: basicSchema.unmap\n  });\n}\nfunction isNumericString(value, strict) {\n  return strict ? typeof value === 'number' : typeof value === 'number' || typeof value === 'string' && !isNaN(value);\n}\nfunction coerceNumericStringToNumber(value) {\n  return typeof value === 'number' ? value : +value;\n}\nfunction coerceStringOrNumberToBigInt(value) {\n  return typeof value === 'bigint' ? value : BigInt(value);\n}\nfunction once(func) {\n  var ran = false;\n  var memo;\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (ran) {\n      return memo;\n    }\n    ran = true;\n    memo = func.apply(this, args);\n    return memo;\n  };\n}\n/**\r\n * Returns a copy of the object with the given keys omitted.\r\n */\nfunction omitKeysFromObject(object, keysToOmit) {\n  var omitSet = new Set(keysToOmit);\n  var output = {};\n  for (var key in object) {\n    if (Object.prototype.hasOwnProperty.call(object, key) && !omitSet.has(key)) {\n      output[key] = object[key];\n    }\n  }\n  return output;\n}\nfunction objectKeyEncode(key) {\n  return key.indexOf(' ') !== -1 ? literalToString(key) : key;\n}\nexport { arrayEntries, coerceNumericStringToNumber, coerceStringOrNumberToBigInt, createSymmetricSchema, identityFn, isNumericString, literalToString, objectEntries, objectKeyEncode, omitKeysFromObject, once, toValidator };",
      "start": 1707437862827,
      "end": 1707437862855,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707437862855,
      "end": 1707437862855,
      "order": "normal"
    }
  ]
}
