{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/disputesApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { acceptDisputeResponseSchema, } from '../models/acceptDisputeResponse';\nimport { createDisputeEvidenceFileRequestSchema, } from '../models/createDisputeEvidenceFileRequest';\nimport { createDisputeEvidenceFileResponseSchema, } from '../models/createDisputeEvidenceFileResponse';\nimport { createDisputeEvidenceTextRequestSchema, } from '../models/createDisputeEvidenceTextRequest';\nimport { createDisputeEvidenceTextResponseSchema, } from '../models/createDisputeEvidenceTextResponse';\nimport { deleteDisputeEvidenceResponseSchema, } from '../models/deleteDisputeEvidenceResponse';\nimport { listDisputeEvidenceResponseSchema, } from '../models/listDisputeEvidenceResponse';\nimport { listDisputesResponseSchema, } from '../models/listDisputesResponse';\nimport { retrieveDisputeEvidenceResponseSchema, } from '../models/retrieveDisputeEvidenceResponse';\nimport { retrieveDisputeResponseSchema, } from '../models/retrieveDisputeResponse';\nimport { submitEvidenceResponseSchema, } from '../models/submitEvidenceResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class DisputesApi extends BaseApi {\n    /**\n     * Returns a list of disputes associated with a particular account.\n     *\n     * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n     *                              cursor to retrieve the next set of results for the original query. For more\n     *                              information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-\n     *                              api-patterns/pagination).\n     * @param states      The dispute states used to filter the result. If not specified, the endpoint returns\n     *                              all disputes.\n     * @param locationId  The ID of the location for which to return a list of disputes. If not specified, the\n     *                              endpoint returns disputes associated with all locations.\n     * @return Response from the API call\n     */\n    async listDisputes(cursor, states, locationId, requestOptions) {\n        const req = this.createRequest('GET', '/v2/disputes');\n        const mapped = req.prepareArgs({\n            cursor: [cursor, optional(string())],\n            states: [states, optional(string())],\n            locationId: [locationId, optional(string())],\n        });\n        req.query('cursor', mapped.cursor);\n        req.query('states', mapped.states);\n        req.query('location_id', mapped.locationId);\n        return req.callAsJson(listDisputesResponseSchema, requestOptions);\n    }\n    /**\n     * Returns details about a specific dispute.\n     *\n     * @param disputeId  The ID of the dispute you want more details about.\n     * @return Response from the API call\n     */\n    async retrieveDispute(disputeId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}`;\n        return req.callAsJson(retrieveDisputeResponseSchema, requestOptions);\n    }\n    /**\n     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and\n     * updates the dispute state to ACCEPTED.\n     *\n     * Square debits the disputed amount from the sellerâ€™s Square account. If the Square account\n     * does not have sufficient funds, Square debits the associated bank account.\n     *\n     * @param disputeId  The ID of the dispute you want to accept.\n     * @return Response from the API call\n     */\n    async acceptDispute(disputeId, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}/accept`;\n        return req.callAsJson(acceptDisputeResponseSchema, requestOptions);\n    }\n    /**\n     * Returns a list of evidence associated with a dispute.\n     *\n     * @param disputeId  The ID of the dispute.\n     * @param cursor     A pagination cursor returned by a previous call to this endpoint. Provide this cursor\n     *                             to retrieve the next set of results for the original query. For more information, see\n     *                             [Pagination](https://developer.squareup.com/docs/build-basics/common-api-\n     *                             patterns/pagination).\n     * @return Response from the API call\n     */\n    async listDisputeEvidence(disputeId, cursor, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            disputeId: [disputeId, string()],\n            cursor: [cursor, optional(string())],\n        });\n        req.query('cursor', mapped.cursor);\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}/evidence`;\n        return req.callAsJson(listDisputeEvidenceResponseSchema, requestOptions);\n    }\n    /**\n     * Uploads a file to use as evidence in a dispute challenge. The endpoint accepts HTTP\n     * multipart/form-data file uploads in HEIC, HEIF, JPEG, PDF, PNG, and TIFF formats.\n     *\n     * @param disputeId  The ID of the dispute for which you want to upload\n     *                                                              evidence.\n     * @param request    Defines the parameters for a\n     *                                                              `CreateDisputeEvidenceFile` request.\n     * @param imageFile\n     * @return Response from the API call\n     */\n    async createDisputeEvidenceFile(disputeId, request, imageFile, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            disputeId: [disputeId, string()],\n            request: [request, optional(createDisputeEvidenceFileRequestSchema)],\n        });\n        req.formData({\n            request: JSON.stringify(mapped.request),\n            image_file: imageFile,\n        });\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}/evidence-files`;\n        return req.callAsJson(createDisputeEvidenceFileResponseSchema, requestOptions);\n    }\n    /**\n     * Uploads text to use as evidence for a dispute challenge.\n     *\n     * @param disputeId    The ID of the dispute for which you want to upload\n     *                                                                evidence.\n     * @param body         An object containing the fields to POST for the\n     *                                                                request.  See the corresponding object definition\n     *                                                                for field details.\n     * @return Response from the API call\n     */\n    async createDisputeEvidenceText(disputeId, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            disputeId: [disputeId, string()],\n            body: [body, createDisputeEvidenceTextRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}/evidence-text`;\n        return req.callAsJson(createDisputeEvidenceTextResponseSchema, requestOptions);\n    }\n    /**\n     * Removes specified evidence from a dispute.\n     * Square does not send the bank any evidence that is removed.\n     *\n     * @param disputeId   The ID of the dispute from which you want to remove evidence.\n     * @param evidenceId  The ID of the evidence you want to remove.\n     * @return Response from the API call\n     */\n    async deleteDisputeEvidence(disputeId, evidenceId, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({\n            disputeId: [disputeId, string()],\n            evidenceId: [evidenceId, string()],\n        });\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}/evidence/${mapped.evidenceId}`;\n        return req.callAsJson(deleteDisputeEvidenceResponseSchema, requestOptions);\n    }\n    /**\n     * Returns the metadata for the evidence specified in the request URL path.\n     *\n     * You must maintain a copy of any evidence uploaded if you want to reference it later. Evidence cannot\n     * be downloaded after you upload it.\n     *\n     * @param disputeId   The ID of the dispute from which you want to retrieve evidence metadata.\n     * @param evidenceId  The ID of the evidence to retrieve.\n     * @return Response from the API call\n     */\n    async retrieveDisputeEvidence(disputeId, evidenceId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            disputeId: [disputeId, string()],\n            evidenceId: [evidenceId, string()],\n        });\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}/evidence/${mapped.evidenceId}`;\n        return req.callAsJson(retrieveDisputeEvidenceResponseSchema, requestOptions);\n    }\n    /**\n     * Submits evidence to the cardholder's bank.\n     *\n     * The evidence submitted by this endpoint includes evidence uploaded\n     * using the [CreateDisputeEvidenceFile]($e/Disputes/CreateDisputeEvidenceFile) and\n     * [CreateDisputeEvidenceText]($e/Disputes/CreateDisputeEvidenceText) endpoints and\n     * evidence automatically provided by Square, when available. Evidence cannot be removed from\n     * a dispute after submission.\n     *\n     * @param disputeId  The ID of the dispute for which you want to submit evidence.\n     * @return Response from the API call\n     */\n    async submitEvidence(disputeId, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n        req.appendTemplatePath `/v2/disputes/${mapped.disputeId}/submit-evidence`;\n        return req.callAsJson(submitEvidenceResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=disputesApi.js.map",
      "start": 1709003846719,
      "end": 1709003846801,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846801,
      "end": 1709003846801,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846801,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003846802,
      "end": 1709003846802,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003846802,
      "end": 1709003846803,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003846803,
      "end": 1709003846803,
      "order": "normal"
    }
  ]
}
