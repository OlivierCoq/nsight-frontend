{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/merchantCustomAttributesApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { bulkDeleteMerchantCustomAttributesRequestSchema, } from '../models/bulkDeleteMerchantCustomAttributesRequest';\nimport { bulkDeleteMerchantCustomAttributesResponseSchema, } from '../models/bulkDeleteMerchantCustomAttributesResponse';\nimport { bulkUpsertMerchantCustomAttributesRequestSchema, } from '../models/bulkUpsertMerchantCustomAttributesRequest';\nimport { bulkUpsertMerchantCustomAttributesResponseSchema, } from '../models/bulkUpsertMerchantCustomAttributesResponse';\nimport { createMerchantCustomAttributeDefinitionRequestSchema, } from '../models/createMerchantCustomAttributeDefinitionRequest';\nimport { createMerchantCustomAttributeDefinitionResponseSchema, } from '../models/createMerchantCustomAttributeDefinitionResponse';\nimport { deleteMerchantCustomAttributeDefinitionResponseSchema, } from '../models/deleteMerchantCustomAttributeDefinitionResponse';\nimport { deleteMerchantCustomAttributeResponseSchema, } from '../models/deleteMerchantCustomAttributeResponse';\nimport { listMerchantCustomAttributeDefinitionsResponseSchema, } from '../models/listMerchantCustomAttributeDefinitionsResponse';\nimport { listMerchantCustomAttributesResponseSchema, } from '../models/listMerchantCustomAttributesResponse';\nimport { retrieveMerchantCustomAttributeDefinitionResponseSchema, } from '../models/retrieveMerchantCustomAttributeDefinitionResponse';\nimport { retrieveMerchantCustomAttributeResponseSchema, } from '../models/retrieveMerchantCustomAttributeResponse';\nimport { updateMerchantCustomAttributeDefinitionRequestSchema, } from '../models/updateMerchantCustomAttributeDefinitionRequest';\nimport { updateMerchantCustomAttributeDefinitionResponseSchema, } from '../models/updateMerchantCustomAttributeDefinitionResponse';\nimport { upsertMerchantCustomAttributeRequestSchema, } from '../models/upsertMerchantCustomAttributeRequest';\nimport { upsertMerchantCustomAttributeResponseSchema, } from '../models/upsertMerchantCustomAttributeResponse';\nimport { boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class MerchantCustomAttributesApi extends BaseApi {\n    /**\n     * Lists the merchant-related [custom attribute definitions]($m/CustomAttributeDefinition) that belong\n     * to a Square seller account.\n     * When all response pages are retrieved, the results include all custom attribute definitions\n     * that are visible to the requesting application, including those that are created by other\n     * applications and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param visibilityFilter  Filters the `CustomAttributeDefinition` results by their `visibility` values.\n     * @param limit             The maximum number of results to return in a single paged response. This limit\n     *                                    is advisory. The response might contain more or fewer results. The minimum\n     *                                    value is 1 and the maximum value is 100. The default value is 20. For more\n     *                                    information, see [Pagination](https://developer.squareup.com/docs/build-\n     *                                    basics/common-api-patterns/pagination).\n     * @param cursor            The cursor returned in the paged response from the previous call to this\n     *                                    endpoint. Provide this cursor to retrieve the next page of results for your\n     *                                    original request. For more information, see [Pagination](https://developer.\n     *                                    squareup.com/docs/build-basics/common-api-patterns/pagination).\n     * @return Response from the API call\n     */\n    async listMerchantCustomAttributeDefinitions(visibilityFilter, limit, cursor, requestOptions) {\n        const req = this.createRequest('GET', '/v2/merchants/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            visibilityFilter: [visibilityFilter, optional(string())],\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n        });\n        req.query('visibility_filter', mapped.visibilityFilter);\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        return req.callAsJson(listMerchantCustomAttributeDefinitionsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a merchant-related [custom attribute definition]($m/CustomAttributeDefinition) for a Square\n     * seller account.\n     * Use this endpoint to define a custom attribute that can be associated with a merchant connecting to\n     * your application.\n     * A custom attribute definition specifies the `key`, `visibility`, `schema`, and other properties\n     * for a custom attribute. After the definition is created, you can call\n     * [UpsertMerchantCustomAttribute]($e/MerchantCustomAttributes/UpsertMerchantCustomAttribute) or\n     * [BulkUpsertMerchantCustomAttributes]($e/MerchantCustomAttributes/BulkUpsertMerchantCustomAttributes)\n     * to set the custom attribute for a merchant.\n     *\n     * @param body         An object containing the fields to\n     *                                                                              POST for the request.  See the\n     *                                                                              corresponding object definition for\n     *                                                                              field details.\n     * @return Response from the API call\n     */\n    async createMerchantCustomAttributeDefinition(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/merchants/custom-attribute-definitions');\n        const mapped = req.prepareArgs({\n            body: [body, createMerchantCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createMerchantCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a merchant-related [custom attribute definition]($m/CustomAttributeDefinition) from a Square\n     * seller account.\n     * Deleting a custom attribute definition also deletes the corresponding custom attribute from\n     * the merchant.\n     * Only the definition owner can delete a custom attribute definition.\n     *\n     * @param key The key of the custom attribute definition to delete.\n     * @return Response from the API call\n     */\n    async deleteMerchantCustomAttributeDefinition(key, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({ key: [key, string()] });\n        req.appendTemplatePath `/v2/merchants/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(deleteMerchantCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a merchant-related [custom attribute definition]($m/CustomAttributeDefinition) from a\n     * Square seller account.\n     * To retrieve a custom attribute definition created by another application, the `visibility`\n     * setting must be `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param key     The key of the custom attribute definition to retrieve. If the requesting application is\n     *                          not the definition owner, you must use the qualified key.\n     * @param version The current version of the custom attribute definition, which is used for strongly\n     *                          consistent reads to guarantee that you receive the most up-to-date data. When included in\n     *                          the request, Square returns the specified version or a higher version if one exists. If\n     *                          the specified version is higher than the current version, Square returns a `BAD_REQUEST`\n     *                          error.\n     * @return Response from the API call\n     */\n    async retrieveMerchantCustomAttributeDefinition(key, version, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            version: [version, optional(number())],\n        });\n        req.query('version', mapped.version);\n        req.appendTemplatePath `/v2/merchants/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(retrieveMerchantCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a merchant-related [custom attribute definition]($m/CustomAttributeDefinition) for a Square\n     * seller account.\n     * Use this endpoint to update the following fields: `name`, `description`, `visibility`, or the\n     * `schema` for a `Selection` data type.\n     * Only the definition owner can update a custom attribute definition.\n     *\n     * @param key          The key of the custom attribute\n     *                                                                              definition to update.\n     * @param body         An object containing the fields to\n     *                                                                              POST for the request.  See the\n     *                                                                              corresponding object definition for\n     *                                                                              field details.\n     * @return Response from the API call\n     */\n    async updateMerchantCustomAttributeDefinition(key, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            key: [key, string()],\n            body: [body, updateMerchantCustomAttributeDefinitionRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/merchants/custom-attribute-definitions/${mapped.key}`;\n        return req.callAsJson(updateMerchantCustomAttributeDefinitionResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes [custom attributes]($m/CustomAttribute) for a merchant as a bulk operation.\n     * To delete a custom attribute owned by another application, the `visibility` setting must be\n     * `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param body         An object containing the fields to POST\n     *                                                                         for the request.  See the corresponding\n     *                                                                         object definition for field details.\n     * @return Response from the API call\n     */\n    async bulkDeleteMerchantCustomAttributes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/merchants/custom-attributes/bulk-delete');\n        const mapped = req.prepareArgs({\n            body: [body, bulkDeleteMerchantCustomAttributesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkDeleteMerchantCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Creates or updates [custom attributes]($m/CustomAttribute) for a merchant as a bulk operation.\n     * Use this endpoint to set the value of one or more custom attributes for a merchant.\n     * A custom attribute is based on a custom attribute definition in a Square seller account, which is\n     * created using the\n     * [CreateMerchantCustomAttributeDefinition]($e/MerchantCustomAttributes/CreateMerchantCustomAttributeD\n     * efinition) endpoint.\n     * This `BulkUpsertMerchantCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert\n     * requests and returns a map of individual upsert responses. Each upsert request has a unique ID\n     * and provides a merchant ID and custom attribute. Each upsert response is returned with the ID\n     * of the corresponding request.\n     * To create or update a custom attribute owned by another application, the `visibility` setting\n     * must be `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param body         An object containing the fields to POST\n     *                                                                         for the request.  See the corresponding\n     *                                                                         object definition for field details.\n     * @return Response from the API call\n     */\n    async bulkUpsertMerchantCustomAttributes(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/merchants/custom-attributes/bulk-upsert');\n        const mapped = req.prepareArgs({\n            body: [body, bulkUpsertMerchantCustomAttributesRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(bulkUpsertMerchantCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Lists the [custom attributes]($m/CustomAttribute) associated with a merchant.\n     * You can use the `with_definitions` query parameter to also retrieve custom attribute definitions\n     * in the same call.\n     * When all response pages are retrieved, the results include all custom attributes that are\n     * visible to the requesting application, including those that are owned by other applications\n     * and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param merchantId        The ID of the target [merchant](entity:Merchant).\n     * @param visibilityFilter  Filters the `CustomAttributeDefinition` results by their `visibility` values.\n     * @param limit             The maximum number of results to return in a single paged response. This\n     *                                     limit is advisory. The response might contain more or fewer results. The\n     *                                     minimum value is 1 and the maximum value is 100. The default value is 20. For\n     *                                     more information, see [Pagination](https://developer.squareup.com/docs/build-\n     *                                     basics/common-api-patterns/pagination).\n     * @param cursor            The cursor returned in the paged response from the previous call to this\n     *                                     endpoint. Provide this cursor to retrieve the next page of results for your\n     *                                     original request. For more information, see [Pagination](https://developer.\n     *                                     squareup.com/docs/build-basics/common-api-patterns/pagination).\n     * @param withDefinitions   Indicates whether to return the [custom attribute definition](entity:\n     *                                     CustomAttributeDefinition) in the `definition` field of each custom attribute.\n     *                                     Set this parameter to `true` to get the name and description of each custom\n     *                                     attribute, information about the data type, or other definition details. The\n     *                                     default value is `false`.\n     * @return Response from the API call\n     */\n    async listMerchantCustomAttributes(merchantId, visibilityFilter, limit, cursor, withDefinitions, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            merchantId: [merchantId, string()],\n            visibilityFilter: [visibilityFilter, optional(string())],\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n            withDefinitions: [withDefinitions, optional(boolean())],\n        });\n        req.query('visibility_filter', mapped.visibilityFilter);\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        req.query('with_definitions', mapped.withDefinitions);\n        req.appendTemplatePath `/v2/merchants/${mapped.merchantId}/custom-attributes`;\n        return req.callAsJson(listMerchantCustomAttributesResponseSchema, requestOptions);\n    }\n    /**\n     * Deletes a [custom attribute]($m/CustomAttribute) associated with a merchant.\n     * To delete a custom attribute owned by another application, the `visibility` setting must be\n     * `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param merchantId  The ID of the target [merchant](entity:Merchant).\n     * @param key         The key of the custom attribute to delete. This key must match the `key` of a custom\n     *                              attribute definition in the Square seller account. If the requesting application is\n     *                              not the definition owner, you must use the qualified key.\n     * @return Response from the API call\n     */\n    async deleteMerchantCustomAttribute(merchantId, key, requestOptions) {\n        const req = this.createRequest('DELETE');\n        const mapped = req.prepareArgs({\n            merchantId: [merchantId, string()],\n            key: [key, string()],\n        });\n        req.appendTemplatePath `/v2/merchants/${mapped.merchantId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(deleteMerchantCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves a [custom attribute]($m/CustomAttribute) associated with a merchant.\n     * You can use the `with_definition` query parameter to also retrieve the custom attribute definition\n     * in the same call.\n     * To retrieve a custom attribute owned by another application, the `visibility` setting must be\n     * `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param merchantId      The ID of the target [merchant](entity:Merchant).\n     * @param key             The key of the custom attribute to retrieve. This key must match the `key` of a\n     *                                   custom attribute definition in the Square seller account. If the requesting\n     *                                   application is not the definition owner, you must use the qualified key.\n     * @param withDefinition  Indicates whether to return the [custom attribute definition](entity:\n     *                                   CustomAttributeDefinition) in the `definition` field of the custom attribute.\n     *                                   Set this parameter to `true` to get the name and description of the custom\n     *                                   attribute, information about the data type, or other definition details. The\n     *                                   default value is `false`.\n     * @param version         The current version of the custom attribute, which is used for strongly\n     *                                   consistent reads to guarantee that you receive the most up-to-date data. When\n     *                                   included in the request, Square returns the specified version or a higher\n     *                                   version if one exists. If the specified version is higher than the current\n     *                                   version, Square returns a `BAD_REQUEST` error.\n     * @return Response from the API call\n     */\n    async retrieveMerchantCustomAttribute(merchantId, key, withDefinition, version, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            merchantId: [merchantId, string()],\n            key: [key, string()],\n            withDefinition: [withDefinition, optional(boolean())],\n            version: [version, optional(number())],\n        });\n        req.query('with_definition', mapped.withDefinition);\n        req.query('version', mapped.version);\n        req.appendTemplatePath `/v2/merchants/${mapped.merchantId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(retrieveMerchantCustomAttributeResponseSchema, requestOptions);\n    }\n    /**\n     * Creates or updates a [custom attribute]($m/CustomAttribute) for a merchant.\n     * Use this endpoint to set the value of a custom attribute for a specified merchant.\n     * A custom attribute is based on a custom attribute definition in a Square seller account, which\n     * is created using the\n     * [CreateMerchantCustomAttributeDefinition]($e/MerchantCustomAttributes/CreateMerchantCustomAttributeD\n     * efinition) endpoint.\n     * To create or update a custom attribute owned by another application, the `visibility` setting\n     * must be `VISIBILITY_READ_WRITE_VALUES`.\n     *\n     * @param merchantId   The ID of the target [merchant](entity:\n     *                                                                    Merchant).\n     * @param key          The key of the custom attribute to create or\n     *                                                                    update. This key must match the `key` of a\n     *                                                                    custom attribute definition in the Square\n     *                                                                    seller account. If the requesting application\n     *                                                                    is not the definition owner, you must use the\n     *                                                                    qualified key.\n     * @param body         An object containing the fields to POST for\n     *                                                                    the request.  See the corresponding object\n     *                                                                    definition for field details.\n     * @return Response from the API call\n     */\n    async upsertMerchantCustomAttribute(merchantId, key, body, requestOptions) {\n        const req = this.createRequest('POST');\n        const mapped = req.prepareArgs({\n            merchantId: [merchantId, string()],\n            key: [key, string()],\n            body: [body, upsertMerchantCustomAttributeRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/merchants/${mapped.merchantId}/custom-attributes/${mapped.key}`;\n        return req.callAsJson(upsertMerchantCustomAttributeResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=merchantCustomAttributesApi.js.map",
      "start": 1709003846739,
      "end": 1709003846834,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003846834,
      "end": 1709003846834,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003846834,
      "end": 1709003846835,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003846835,
      "end": 1709003846835,
      "order": "normal"
    }
  ]
}
