{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {\n    var index = _dangling_braces[_i];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {\n    var digit = _step2.value;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}\n//# sourceMappingURL=AsYouTypeFormatter.util.js.map",
      "start": 1709003848929,
      "end": 1709003848979,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003848980,
      "end": 1709003848980,
      "order": "normal"
    }
  ]
}
