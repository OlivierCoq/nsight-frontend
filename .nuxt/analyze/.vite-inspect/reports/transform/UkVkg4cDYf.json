{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/pages/dashboard.vue?macro=true&vue&type=script&setup=true&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-2d5cfa78\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = {\n  key: 0,\n  id: \"dashboard\",\n  class: \"h-[100vh] w-full bg-zinc-200 dark:bg-zinc-800 flex flex-col\"\n}\nconst _hoisted_2 = { class: \"h-full w-full flex flex-row\" }\nconst _hoisted_3 = { class: \"h-full w-1/5 invisible md:visible px-3 pt-10 pb-4\" }\nconst _hoisted_4 = { class: \"h-full w-full flex flex-col\" }\nconst _hoisted_5 = { class: \"text-neutral-900 dark:text-white\" }\n\nimport moment from \"moment\";\nimport qs from \"qs\";\nimport { parsePhoneNumber, AsYouType } from \"libphonenumber-js\";\n\n// oFetch\nimport { ofetch } from \"ofetch\";\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'dashboard',\n  setup(__props) {\n\n// Page meta\ndefinePageMeta({\n  title: \"Dashboard\",\n  description: \"Dashboard\",\n  url: \"/dashboard\",\n  middleware: [\"auth\"],\n  layout: \"inner\",\n});\n\n// necessary imports\nconst runtimeConfig = useRuntimeConfig();\n\n// globalThis.$fetch = ofetch.create({\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'X-Authorization': runtimeConfig.apiSecret\n//   }\n// })\n\n// Stores\nconst auth = authStore();\nconst prodStore = productsStore();\n\n// State\nconst state = reactive({\n  current_user: authStore.user,\n  current_tab: null,\n  dark_mode: false,\n  error: false,\n  use_the_force: false,\n  tabs: [\n    {\n      name: \"My Profile\",\n      data: {},\n    },\n    {\n      name: \"My Friends\",\n      data: {\n        adding_new: false,\n        posting_new: false,\n        post: null,\n        new_member: {\n          email: \"\",\n          first_name: \"\",\n          last_name: \"\",\n          phone_number: \"\",\n          n_id: `nsight-${auth.user.id}-${moment().format(\"MMDDYYYY-hmmss\")}`,\n        },\n      },\n    },\n  ],\n  validate: false,\n});\n\n// Methods\nconst generate_random_password = () => {\n  let pass = ``,\n    str = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$`;\n  for (let i = 1; i <= 8; i++) {\n    var char = Math.floor(Math.random() * str.length + 1);\n    pass += str.charAt(char);\n  }\n  return pass;\n};\n\nconst validateEmail = (email: string) => {\n  return (\n    email.length &&\n    email\n      .toString()\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      )\n  );\n};\n\nconst validatePhone = (number: string) => {\n  const regex = /^\\+\\d{1,3}-\\d{3}-\\d{3}-\\d{4}$/;\n  return regex.test(number);\n};\n// const new_n_id = () => {\n//   state.tabs[1].data.new_member.n_id = `nsight-${auth.user.id}-${moment().format('MMDDYYYY-hmmss')}`\n// }\n\n/*\n  Steps:\n  1. Do a search to /api/nsight-ids to see if the n_id is already taken. Use the qs library to stringify the params:\n    qs.stringify({ n_id: state.tabs[1].data.new_member.n_id })\n  2. If the n_id is taken, generate a new one and try again? maybe\n    state.tabs[1].data.new_member.n_id = `nsight-${auth.user.id}-${moment().format('MMDDYYYY-hmmss')}`\n  3. Add the nsight_id to /api/nsight-ids:\n    globalThis.$fetch.post('/api/nsight-ids', { n_id: state.tabs[1].data.new_member.n_id })\n  4. Add the user to /api/users:\n    globalThis.$fetch.post('/api/users', {\n      email: state.tabs[1].data.new_member.email,\n      first_name: state.tabs[1].data.new_member.first_name,\n      last_name: state.tabs[1].data.new_member.last_name,\n      password: generate_random_password(),\n      nsight_id: state.tabs[1].data.new_member.n_id\n    })\n  5. Add user to Square by using local API endpoint /api/square/create-customer\n  6. Add user to your friends list\n  7. Send email confirmation to new member\n  8. Update on your DB that the user has been added\n\n*/\n\nconst post_new_member = async () => {\n  let active_tab = state.tabs[1];\n  active_tab.data.posting_new = true;\n\n  const headers_obj = {\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\",\n    Authorization: `Bearer ${auth.token}`,\n  };\n\n  active_tab.post = $fetch(\n    `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?${qs.stringify({\n      filters: {\n        nsight_id: state.tabs[1].data.new_member.n_id,\n      },\n    })}`,\n    {\n      method: \"GET\",\n      headers: headers_obj,\n    }\n  )\n    .then((nsight_id_check) => {\n      // If none found, add the nsight_id to the nsight-ids table\n      if (!nsight_id_check.data.length) {\n        // Add the nsight_id to the nsight-ids table\n        let new_nsight_id = {\n          data: {\n            authentic: true,\n            nsight_id: active_tab.data.new_member.n_id,\n          },\n        };\n        $fetch(\n          `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?populate=*`,\n          {\n            method: \"POST\",\n            headers: headers_obj,\n            body: JSON.stringify(new_nsight_id),\n          }\n        )\n          .then((new_nsight_id_data) => {\n            console.log(\"New nsight id added\", new_nsight_id_data);\n            const new_strapi_nsight_id = new_nsight_id_data.data;\n\n            // Add the user to the users table\n            let new_nsight_member = {\n              blocked: false,\n              confirmed: false,\n              email: active_tab.data.new_member.email,\n              first_name: active_tab.data.new_member.first_name,\n              last_name: active_tab.data.new_member.last_name,\n              phone_number: active_tab.data.new_member.phone_number,\n              nsight_id: new_strapi_nsight_id,\n              square_id: \"\",\n              preferences: [\n                {\n                  dark_mode: true,\n                },\n              ],\n              username: active_tab.data.new_member.email,\n              // password: thisObj.generate_random_password()\n              password: \"P@ssW3rd9756\",\n              users: [auth.user],\n              friends: [auth.user],\n              addresses: {\n                shipping: [],\n                billing: [],\n              },\n              selected_addresses: {\n                shipping: null,\n                billing: null,\n              },\n              selected_payment_method: null,\n              payment_methods: {\n                data: [],\n              },\n              orders: {\n                data: [],\n              },\n              returns: {\n                data: [],\n              },\n              cancelled_orders: {\n                data: [],\n              },\n              role: {\n                id: 1,\n                name: \"Authenticated\",\n                description: \"Default role given to authenticated user.\",\n                type: \"authenticated\",\n                connect: [\n                  {\n                    id: 1,\n                  },\n                ],\n              },\n            };\n\n            $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/users`, {\n              method: \"POST\",\n              headers: headers_obj,\n              body: JSON.stringify(new_nsight_member),\n            })\n              .then((new_strapi_user_data) => {\n                console.log(\n                  \"created new strapi member: \",\n                  new_strapi_user_data\n                );\n                const new_strapi_user = new_strapi_user_data;\n\n                // update nsight_id with new user\n                $fetch(\n                  `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids/${new_strapi_nsight_id.id}`,\n                  {\n                    method: \"PUT\",\n                    headers: headers_obj,\n                    body: JSON.stringify({\n                      data: {\n                        user: [new_strapi_user],\n                      },\n                    }),\n                  }\n                )\n                  .then(async (updated_nsight_id_data) => {\n                    console.log(\n                      \"updated nsight_id with new user: \",\n                      updated_nsight_id_data\n                    );\n\n                    // Add the user to Square\n                    const new_square_customer = {\n                      givenName: new_nsight_member.first_name,\n                      familyName: new_nsight_member.last_name,\n                      emailAddress: new_nsight_member.email,\n                      phoneNumber: new_nsight_member.phone_number,\n                    };\n\n                    // Add customer to Square\n\n                    const square_data = await $fetch(\n                      \"/api/square/create-customer\",\n                      {\n                        method: \"POST\",\n                        headers: headers_obj,\n                        body: JSON.stringify(new_square_customer),\n                      }\n                    );\n                    new_nsight_member.square_id = square_data.customer.id;\n\n                    if (square_data.customer && square_data.customer.id) {\n                      new_nsight_member.square_id = square_data.customer.id;\n\n                      // console.log(\"holup!!!!!!\", new_nsight_member);\n                      // Update Strapi with square_id\n                      nextTick(() => {\n                        new_nsight_member.square_id = square_data.customer.id;\n                        console.log(\n                          \"updated new_nsight_member with square_id: \",\n                          new_nsight_member\n                        );\n\n                        const updated_new_sight_member = new_nsight_member;\n\n                        $fetch(\n                          `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${new_strapi_user.id}`,\n                          {\n                            method: \"PUT\",\n                            headers: headers_obj,\n                            body: JSON.stringify({\n                              square_id: square_data.customer.id,\n                            }),\n                          }\n                        )\n                          .then((square_id_update_data) => {\n                            console.log(\n                              \"updated strapi user with square_id: \",\n                              square_id_update_data\n                            );\n\n                            // Add the user to your friends list\n                            // There's an issue right now with friends vs users. I'm adding to both for now.\n                            auth.user.friends.push(square_id_update_data);\n                            auth.user.users.push(square_id_update_data);\n                            state.tabs[1].data.adding_new = false;\n\n                            nextTick(() => {\n                              $fetch(\n                                `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${auth.user.id}`,\n                                {\n                                  method: \"PUT\",\n                                  headers: headers_obj,\n                                  body: JSON.stringify({ data: auth.user }),\n                                }\n                              )\n                                .then((data) => {\n                                  console.log(\n                                    \"updated strapi user with new member: \",\n                                    data\n                                  );\n                                  active_tab.data.posting_new = false;\n\n                                  // Send email confirmation to new member. Let's refrain for now. SendGrid doesn't like it.\n                                  // $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/auth/send-email-confirmation`, {\n                                  //   method: 'POST',\n                                  //   headers: headers_obj,\n                                  //   body: JSON.stringify({ email: active_tab.data.new_member.email })\n                                  // })\n                                  //   .then((data) => {\n                                  //     console.log('email confirmation sent to new member: ', data)\n                                  //     active_tab.data.posting_new = false\n                                  //   })\n                                  //   .catch((err) => { console.log('error sending email confirmation to new member: ', err); state.error = err })\n                                })\n                                .catch((err) => {\n                                  console.log(\n                                    \"error updating strapi user with new member: \",\n                                    err\n                                  );\n                                  state.error = err;\n                                });\n                            });\n                          })\n                          .catch((err) => {\n                            console.log(\n                              \"error updating strapi user with square_id: \",\n                              err\n                            );\n                            state.error = err;\n                          });\n                      });\n                    }\n                  })\n                  .catch((err) => {\n                    console.log(\n                      \"error updating nsight_id with new user: \",\n                      err\n                    );\n                    state.error = err;\n                  });\n              })\n              .catch((err) => {\n                console.log(\"error creating new member: \", err);\n                state.error = err;\n              });\n          })\n          .catch((err) => {\n            state.error = err;\n          });\n      } else {\n        const mssg = `nsight id already exists. Please try again.`;\n        console.log(mssg, res.data);\n        state.error = mssg;\n      }\n    })\n    .catch((err) => {\n      console.log(\"nsight error\", err);\n      return err;\n    });\n};\n\n// Watch\n// watch all attributes of new_member:\nwatch(\n  () => state.tabs[1].data.new_member,\n  (val: object) => {\n    state.validate =\n      val.email.length > 0 &&\n      validateEmail(val.email) &&\n      val.first_name.length > 0 &&\n      val.last_name.length > 0 &&\n      validatePhone(val.phone_number);\n  },\n  { deep: true }\n);\n\n// email:\n// watch(() => state.tabs[1].data.new_member.email, (val) => {\n//   state.validate = (val.length > 0) && (validateEmail(val))\n// })\n// // first_name:\n// watch(() => state.tabs[1].data.new_member.first_name, (val) => {\n//   state.validate = val.length > 0\n// })\n// // last_name:\n// watch(() => state.tabs[1].data.new_member.last_name, (val) => {\n//   state.validate = val.length > 0\n// })\n// // phone_number:\n// watch(() => state.tabs[1].data.new_member.phone_number, (val) => {\n//   state.validate = val.length > 0\n// })\n\nreturn (_ctx: any,_cache: any) => {\n  return (_unref(auth)?.user)\n    ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n        _createElementVNode(\"div\", _hoisted_2, [\n          _createElementVNode(\"div\", _hoisted_3, [\n            _createElementVNode(\"div\", _hoisted_4, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(state).tabs, (tab, a) => {\n                return (_openBlock(), _createElementBlock(\"div\", {\n                  key: a,\n                  class: \"w-full p-8 hover:shadow-xl hover:cursor-pointer hover:bg-zinc-700 rounded-lg\"\n                }, [\n                  _createElementVNode(\"button\", _hoisted_5, [\n                    _createElementVNode(\"span\", null, _toDisplayString(tab.name), 1)\n                  ])\n                ]))\n              }), 128))\n            ])\n          ])\n        ])\n      ]))\n    : _createCommentVNode(\"\", true)\n}\n}\n\n})",
      "start": 1709272109451,
      "end": 1709272109451
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272109451,
      "end": 1709272109451,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272109451,
      "end": 1709272109451,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272109451,
      "end": 1709272109451,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272109451,
      "end": 1709272109451,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = (n) => (_pushScopeId(\"data-v-2d5cfa78\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  id: \"dashboard\",\n  class: \"h-[100vh] w-full bg-zinc-200 dark:bg-zinc-800 flex flex-col\"\n};\nconst _hoisted_2 = { class: \"h-full w-full flex flex-row\" };\nconst _hoisted_3 = { class: \"h-full w-1/5 invisible md:visible px-3 pt-10 pb-4\" };\nconst _hoisted_4 = { class: \"h-full w-full flex flex-col\" };\nconst _hoisted_5 = { class: \"text-neutral-900 dark:text-white\" };\nimport moment from \"moment\";\nimport qs from \"qs\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"dashboard\",\n  setup(__props) {\n    definePageMeta({\n      title: \"Dashboard\",\n      description: \"Dashboard\",\n      url: \"/dashboard\",\n      middleware: [\"auth\"],\n      layout: \"inner\"\n    });\n    const runtimeConfig = useRuntimeConfig();\n    const auth = authStore();\n    const prodStore = productsStore();\n    const state = reactive({\n      current_user: authStore.user,\n      current_tab: null,\n      dark_mode: false,\n      error: false,\n      use_the_force: false,\n      tabs: [\n        {\n          name: \"My Profile\",\n          data: {}\n        },\n        {\n          name: \"My Friends\",\n          data: {\n            adding_new: false,\n            posting_new: false,\n            post: null,\n            new_member: {\n              email: \"\",\n              first_name: \"\",\n              last_name: \"\",\n              phone_number: \"\",\n              n_id: `nsight-${auth.user.id}-${moment().format(\"MMDDYYYY-hmmss\")}`\n            }\n          }\n        }\n      ],\n      validate: false\n    });\n    const generate_random_password = () => {\n      let pass = ``, str = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$`;\n      for (let i = 1; i <= 8; i++) {\n        var char = Math.floor(Math.random() * str.length + 1);\n        pass += str.charAt(char);\n      }\n      return pass;\n    };\n    const validateEmail = (email) => {\n      return email.length && email.toString().toLowerCase().match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n    };\n    const validatePhone = (number) => {\n      const regex = /^\\+\\d{1,3}-\\d{3}-\\d{3}-\\d{4}$/;\n      return regex.test(number);\n    };\n    const post_new_member = async () => {\n      let active_tab = state.tabs[1];\n      active_tab.data.posting_new = true;\n      const headers_obj = {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\",\n        Authorization: `Bearer ${auth.token}`\n      };\n      active_tab.post = $fetch(\n        `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?${qs.stringify({\n          filters: {\n            nsight_id: state.tabs[1].data.new_member.n_id\n          }\n        })}`,\n        {\n          method: \"GET\",\n          headers: headers_obj\n        }\n      ).then((nsight_id_check) => {\n        if (!nsight_id_check.data.length) {\n          let new_nsight_id = {\n            data: {\n              authentic: true,\n              nsight_id: active_tab.data.new_member.n_id\n            }\n          };\n          $fetch(\n            `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?populate=*`,\n            {\n              method: \"POST\",\n              headers: headers_obj,\n              body: JSON.stringify(new_nsight_id)\n            }\n          ).then((new_nsight_id_data) => {\n            console.log(\"New nsight id added\", new_nsight_id_data);\n            const new_strapi_nsight_id = new_nsight_id_data.data;\n            let new_nsight_member = {\n              blocked: false,\n              confirmed: false,\n              email: active_tab.data.new_member.email,\n              first_name: active_tab.data.new_member.first_name,\n              last_name: active_tab.data.new_member.last_name,\n              phone_number: active_tab.data.new_member.phone_number,\n              nsight_id: new_strapi_nsight_id,\n              square_id: \"\",\n              preferences: [\n                {\n                  dark_mode: true\n                }\n              ],\n              username: active_tab.data.new_member.email,\n              // password: thisObj.generate_random_password()\n              password: \"P@ssW3rd9756\",\n              users: [auth.user],\n              friends: [auth.user],\n              addresses: {\n                shipping: [],\n                billing: []\n              },\n              selected_addresses: {\n                shipping: null,\n                billing: null\n              },\n              selected_payment_method: null,\n              payment_methods: {\n                data: []\n              },\n              orders: {\n                data: []\n              },\n              returns: {\n                data: []\n              },\n              cancelled_orders: {\n                data: []\n              },\n              role: {\n                id: 1,\n                name: \"Authenticated\",\n                description: \"Default role given to authenticated user.\",\n                type: \"authenticated\",\n                connect: [\n                  {\n                    id: 1\n                  }\n                ]\n              }\n            };\n            $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/users`, {\n              method: \"POST\",\n              headers: headers_obj,\n              body: JSON.stringify(new_nsight_member)\n            }).then((new_strapi_user_data) => {\n              console.log(\n                \"created new strapi member: \",\n                new_strapi_user_data\n              );\n              const new_strapi_user = new_strapi_user_data;\n              $fetch(\n                `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids/${new_strapi_nsight_id.id}`,\n                {\n                  method: \"PUT\",\n                  headers: headers_obj,\n                  body: JSON.stringify({\n                    data: {\n                      user: [new_strapi_user]\n                    }\n                  })\n                }\n              ).then(async (updated_nsight_id_data) => {\n                console.log(\n                  \"updated nsight_id with new user: \",\n                  updated_nsight_id_data\n                );\n                const new_square_customer = {\n                  givenName: new_nsight_member.first_name,\n                  familyName: new_nsight_member.last_name,\n                  emailAddress: new_nsight_member.email,\n                  phoneNumber: new_nsight_member.phone_number\n                };\n                const square_data = await $fetch(\n                  \"/api/square/create-customer\",\n                  {\n                    method: \"POST\",\n                    headers: headers_obj,\n                    body: JSON.stringify(new_square_customer)\n                  }\n                );\n                new_nsight_member.square_id = square_data.customer.id;\n                if (square_data.customer && square_data.customer.id) {\n                  new_nsight_member.square_id = square_data.customer.id;\n                  nextTick(() => {\n                    new_nsight_member.square_id = square_data.customer.id;\n                    console.log(\n                      \"updated new_nsight_member with square_id: \",\n                      new_nsight_member\n                    );\n                    const updated_new_sight_member = new_nsight_member;\n                    $fetch(\n                      `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${new_strapi_user.id}`,\n                      {\n                        method: \"PUT\",\n                        headers: headers_obj,\n                        body: JSON.stringify({\n                          square_id: square_data.customer.id\n                        })\n                      }\n                    ).then((square_id_update_data) => {\n                      console.log(\n                        \"updated strapi user with square_id: \",\n                        square_id_update_data\n                      );\n                      auth.user.friends.push(square_id_update_data);\n                      auth.user.users.push(square_id_update_data);\n                      state.tabs[1].data.adding_new = false;\n                      nextTick(() => {\n                        $fetch(\n                          `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${auth.user.id}`,\n                          {\n                            method: \"PUT\",\n                            headers: headers_obj,\n                            body: JSON.stringify({ data: auth.user })\n                          }\n                        ).then((data) => {\n                          console.log(\n                            \"updated strapi user with new member: \",\n                            data\n                          );\n                          active_tab.data.posting_new = false;\n                        }).catch((err) => {\n                          console.log(\n                            \"error updating strapi user with new member: \",\n                            err\n                          );\n                          state.error = err;\n                        });\n                      });\n                    }).catch((err) => {\n                      console.log(\n                        \"error updating strapi user with square_id: \",\n                        err\n                      );\n                      state.error = err;\n                    });\n                  });\n                }\n              }).catch((err) => {\n                console.log(\n                  \"error updating nsight_id with new user: \",\n                  err\n                );\n                state.error = err;\n              });\n            }).catch((err) => {\n              console.log(\"error creating new member: \", err);\n              state.error = err;\n            });\n          }).catch((err) => {\n            state.error = err;\n          });\n        } else {\n          const mssg = `nsight id already exists. Please try again.`;\n          console.log(mssg, res.data);\n          state.error = mssg;\n        }\n      }).catch((err) => {\n        console.log(\"nsight error\", err);\n        return err;\n      });\n    };\n    watch(\n      () => state.tabs[1].data.new_member,\n      (val) => {\n        state.validate = val.email.length > 0 && validateEmail(val.email) && val.first_name.length > 0 && val.last_name.length > 0 && validatePhone(val.phone_number);\n      },\n      { deep: true }\n    );\n    return (_ctx, _cache) => {\n      return _unref(auth)?.user ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n        _createElementVNode(\"div\", _hoisted_2, [\n          _createElementVNode(\"div\", _hoisted_3, [\n            _createElementVNode(\"div\", _hoisted_4, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(state).tabs, (tab, a) => {\n                return _openBlock(), _createElementBlock(\"div\", {\n                  key: a,\n                  class: \"w-full p-8 hover:shadow-xl hover:cursor-pointer hover:bg-zinc-700 rounded-lg\"\n                }, [\n                  _createElementVNode(\"button\", _hoisted_5, [\n                    _createElementVNode(\"span\", null, _toDisplayString(tab.name), 1)\n                  ])\n                ]);\n              }), 128))\n            ])\n          ])\n        ])\n      ])) : _createCommentVNode(\"\", true);\n    };\n  }\n});\n",
      "start": 1709272109451,
      "end": 1709272109552,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/pages/dashboard.vue?macro=true&vue&type=script&setup=true&lang.ts"
        ],
        "sourcesContent": [
          "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-2d5cfa78\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = {\n  key: 0,\n  id: \"dashboard\",\n  class: \"h-[100vh] w-full bg-zinc-200 dark:bg-zinc-800 flex flex-col\"\n}\nconst _hoisted_2 = { class: \"h-full w-full flex flex-row\" }\nconst _hoisted_3 = { class: \"h-full w-1/5 invisible md:visible px-3 pt-10 pb-4\" }\nconst _hoisted_4 = { class: \"h-full w-full flex flex-col\" }\nconst _hoisted_5 = { class: \"text-neutral-900 dark:text-white\" }\n\nimport moment from \"moment\";\nimport qs from \"qs\";\nimport { parsePhoneNumber, AsYouType } from \"libphonenumber-js\";\n\n// oFetch\nimport { ofetch } from \"ofetch\";\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'dashboard',\n  setup(__props) {\n\n// Page meta\ndefinePageMeta({\n  title: \"Dashboard\",\n  description: \"Dashboard\",\n  url: \"/dashboard\",\n  middleware: [\"auth\"],\n  layout: \"inner\",\n});\n\n// necessary imports\nconst runtimeConfig = useRuntimeConfig();\n\n// globalThis.$fetch = ofetch.create({\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'X-Authorization': runtimeConfig.apiSecret\n//   }\n// })\n\n// Stores\nconst auth = authStore();\nconst prodStore = productsStore();\n\n// State\nconst state = reactive({\n  current_user: authStore.user,\n  current_tab: null,\n  dark_mode: false,\n  error: false,\n  use_the_force: false,\n  tabs: [\n    {\n      name: \"My Profile\",\n      data: {},\n    },\n    {\n      name: \"My Friends\",\n      data: {\n        adding_new: false,\n        posting_new: false,\n        post: null,\n        new_member: {\n          email: \"\",\n          first_name: \"\",\n          last_name: \"\",\n          phone_number: \"\",\n          n_id: `nsight-${auth.user.id}-${moment().format(\"MMDDYYYY-hmmss\")}`,\n        },\n      },\n    },\n  ],\n  validate: false,\n});\n\n// Methods\nconst generate_random_password = () => {\n  let pass = ``,\n    str = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$`;\n  for (let i = 1; i <= 8; i++) {\n    var char = Math.floor(Math.random() * str.length + 1);\n    pass += str.charAt(char);\n  }\n  return pass;\n};\n\nconst validateEmail = (email: string) => {\n  return (\n    email.length &&\n    email\n      .toString()\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      )\n  );\n};\n\nconst validatePhone = (number: string) => {\n  const regex = /^\\+\\d{1,3}-\\d{3}-\\d{3}-\\d{4}$/;\n  return regex.test(number);\n};\n// const new_n_id = () => {\n//   state.tabs[1].data.new_member.n_id = `nsight-${auth.user.id}-${moment().format('MMDDYYYY-hmmss')}`\n// }\n\n/*\n  Steps:\n  1. Do a search to /api/nsight-ids to see if the n_id is already taken. Use the qs library to stringify the params:\n    qs.stringify({ n_id: state.tabs[1].data.new_member.n_id })\n  2. If the n_id is taken, generate a new one and try again? maybe\n    state.tabs[1].data.new_member.n_id = `nsight-${auth.user.id}-${moment().format('MMDDYYYY-hmmss')}`\n  3. Add the nsight_id to /api/nsight-ids:\n    globalThis.$fetch.post('/api/nsight-ids', { n_id: state.tabs[1].data.new_member.n_id })\n  4. Add the user to /api/users:\n    globalThis.$fetch.post('/api/users', {\n      email: state.tabs[1].data.new_member.email,\n      first_name: state.tabs[1].data.new_member.first_name,\n      last_name: state.tabs[1].data.new_member.last_name,\n      password: generate_random_password(),\n      nsight_id: state.tabs[1].data.new_member.n_id\n    })\n  5. Add user to Square by using local API endpoint /api/square/create-customer\n  6. Add user to your friends list\n  7. Send email confirmation to new member\n  8. Update on your DB that the user has been added\n\n*/\n\nconst post_new_member = async () => {\n  let active_tab = state.tabs[1];\n  active_tab.data.posting_new = true;\n\n  const headers_obj = {\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\",\n    Authorization: `Bearer ${auth.token}`,\n  };\n\n  active_tab.post = $fetch(\n    `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?${qs.stringify({\n      filters: {\n        nsight_id: state.tabs[1].data.new_member.n_id,\n      },\n    })}`,\n    {\n      method: \"GET\",\n      headers: headers_obj,\n    }\n  )\n    .then((nsight_id_check) => {\n      // If none found, add the nsight_id to the nsight-ids table\n      if (!nsight_id_check.data.length) {\n        // Add the nsight_id to the nsight-ids table\n        let new_nsight_id = {\n          data: {\n            authentic: true,\n            nsight_id: active_tab.data.new_member.n_id,\n          },\n        };\n        $fetch(\n          `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?populate=*`,\n          {\n            method: \"POST\",\n            headers: headers_obj,\n            body: JSON.stringify(new_nsight_id),\n          }\n        )\n          .then((new_nsight_id_data) => {\n            console.log(\"New nsight id added\", new_nsight_id_data);\n            const new_strapi_nsight_id = new_nsight_id_data.data;\n\n            // Add the user to the users table\n            let new_nsight_member = {\n              blocked: false,\n              confirmed: false,\n              email: active_tab.data.new_member.email,\n              first_name: active_tab.data.new_member.first_name,\n              last_name: active_tab.data.new_member.last_name,\n              phone_number: active_tab.data.new_member.phone_number,\n              nsight_id: new_strapi_nsight_id,\n              square_id: \"\",\n              preferences: [\n                {\n                  dark_mode: true,\n                },\n              ],\n              username: active_tab.data.new_member.email,\n              // password: thisObj.generate_random_password()\n              password: \"P@ssW3rd9756\",\n              users: [auth.user],\n              friends: [auth.user],\n              addresses: {\n                shipping: [],\n                billing: [],\n              },\n              selected_addresses: {\n                shipping: null,\n                billing: null,\n              },\n              selected_payment_method: null,\n              payment_methods: {\n                data: [],\n              },\n              orders: {\n                data: [],\n              },\n              returns: {\n                data: [],\n              },\n              cancelled_orders: {\n                data: [],\n              },\n              role: {\n                id: 1,\n                name: \"Authenticated\",\n                description: \"Default role given to authenticated user.\",\n                type: \"authenticated\",\n                connect: [\n                  {\n                    id: 1,\n                  },\n                ],\n              },\n            };\n\n            $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/users`, {\n              method: \"POST\",\n              headers: headers_obj,\n              body: JSON.stringify(new_nsight_member),\n            })\n              .then((new_strapi_user_data) => {\n                console.log(\n                  \"created new strapi member: \",\n                  new_strapi_user_data\n                );\n                const new_strapi_user = new_strapi_user_data;\n\n                // update nsight_id with new user\n                $fetch(\n                  `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids/${new_strapi_nsight_id.id}`,\n                  {\n                    method: \"PUT\",\n                    headers: headers_obj,\n                    body: JSON.stringify({\n                      data: {\n                        user: [new_strapi_user],\n                      },\n                    }),\n                  }\n                )\n                  .then(async (updated_nsight_id_data) => {\n                    console.log(\n                      \"updated nsight_id with new user: \",\n                      updated_nsight_id_data\n                    );\n\n                    // Add the user to Square\n                    const new_square_customer = {\n                      givenName: new_nsight_member.first_name,\n                      familyName: new_nsight_member.last_name,\n                      emailAddress: new_nsight_member.email,\n                      phoneNumber: new_nsight_member.phone_number,\n                    };\n\n                    // Add customer to Square\n\n                    const square_data = await $fetch(\n                      \"/api/square/create-customer\",\n                      {\n                        method: \"POST\",\n                        headers: headers_obj,\n                        body: JSON.stringify(new_square_customer),\n                      }\n                    );\n                    new_nsight_member.square_id = square_data.customer.id;\n\n                    if (square_data.customer && square_data.customer.id) {\n                      new_nsight_member.square_id = square_data.customer.id;\n\n                      // console.log(\"holup!!!!!!\", new_nsight_member);\n                      // Update Strapi with square_id\n                      nextTick(() => {\n                        new_nsight_member.square_id = square_data.customer.id;\n                        console.log(\n                          \"updated new_nsight_member with square_id: \",\n                          new_nsight_member\n                        );\n\n                        const updated_new_sight_member = new_nsight_member;\n\n                        $fetch(\n                          `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${new_strapi_user.id}`,\n                          {\n                            method: \"PUT\",\n                            headers: headers_obj,\n                            body: JSON.stringify({\n                              square_id: square_data.customer.id,\n                            }),\n                          }\n                        )\n                          .then((square_id_update_data) => {\n                            console.log(\n                              \"updated strapi user with square_id: \",\n                              square_id_update_data\n                            );\n\n                            // Add the user to your friends list\n                            // There's an issue right now with friends vs users. I'm adding to both for now.\n                            auth.user.friends.push(square_id_update_data);\n                            auth.user.users.push(square_id_update_data);\n                            state.tabs[1].data.adding_new = false;\n\n                            nextTick(() => {\n                              $fetch(\n                                `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${auth.user.id}`,\n                                {\n                                  method: \"PUT\",\n                                  headers: headers_obj,\n                                  body: JSON.stringify({ data: auth.user }),\n                                }\n                              )\n                                .then((data) => {\n                                  console.log(\n                                    \"updated strapi user with new member: \",\n                                    data\n                                  );\n                                  active_tab.data.posting_new = false;\n\n                                  // Send email confirmation to new member. Let's refrain for now. SendGrid doesn't like it.\n                                  // $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/auth/send-email-confirmation`, {\n                                  //   method: 'POST',\n                                  //   headers: headers_obj,\n                                  //   body: JSON.stringify({ email: active_tab.data.new_member.email })\n                                  // })\n                                  //   .then((data) => {\n                                  //     console.log('email confirmation sent to new member: ', data)\n                                  //     active_tab.data.posting_new = false\n                                  //   })\n                                  //   .catch((err) => { console.log('error sending email confirmation to new member: ', err); state.error = err })\n                                })\n                                .catch((err) => {\n                                  console.log(\n                                    \"error updating strapi user with new member: \",\n                                    err\n                                  );\n                                  state.error = err;\n                                });\n                            });\n                          })\n                          .catch((err) => {\n                            console.log(\n                              \"error updating strapi user with square_id: \",\n                              err\n                            );\n                            state.error = err;\n                          });\n                      });\n                    }\n                  })\n                  .catch((err) => {\n                    console.log(\n                      \"error updating nsight_id with new user: \",\n                      err\n                    );\n                    state.error = err;\n                  });\n              })\n              .catch((err) => {\n                console.log(\"error creating new member: \", err);\n                state.error = err;\n              });\n          })\n          .catch((err) => {\n            state.error = err;\n          });\n      } else {\n        const mssg = `nsight id already exists. Please try again.`;\n        console.log(mssg, res.data);\n        state.error = mssg;\n      }\n    })\n    .catch((err) => {\n      console.log(\"nsight error\", err);\n      return err;\n    });\n};\n\n// Watch\n// watch all attributes of new_member:\nwatch(\n  () => state.tabs[1].data.new_member,\n  (val: object) => {\n    state.validate =\n      val.email.length > 0 &&\n      validateEmail(val.email) &&\n      val.first_name.length > 0 &&\n      val.last_name.length > 0 &&\n      validatePhone(val.phone_number);\n  },\n  { deep: true }\n);\n\n// email:\n// watch(() => state.tabs[1].data.new_member.email, (val) => {\n//   state.validate = (val.length > 0) && (validateEmail(val))\n// })\n// // first_name:\n// watch(() => state.tabs[1].data.new_member.first_name, (val) => {\n//   state.validate = val.length > 0\n// })\n// // last_name:\n// watch(() => state.tabs[1].data.new_member.last_name, (val) => {\n//   state.validate = val.length > 0\n// })\n// // phone_number:\n// watch(() => state.tabs[1].data.new_member.phone_number, (val) => {\n//   state.validate = val.length > 0\n// })\n\nreturn (_ctx: any,_cache: any) => {\n  return (_unref(auth)?.user)\n    ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n        _createElementVNode(\"div\", _hoisted_2, [\n          _createElementVNode(\"div\", _hoisted_3, [\n            _createElementVNode(\"div\", _hoisted_4, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(state).tabs, (tab, a) => {\n                return (_openBlock(), _createElementBlock(\"div\", {\n                  key: a,\n                  class: \"w-full p-8 hover:shadow-xl hover:cursor-pointer hover:bg-zinc-700 rounded-lg\"\n                }, [\n                  _createElementVNode(\"button\", _hoisted_5, [\n                    _createElementVNode(\"span\", null, _toDisplayString(tab.name), 1)\n                  ])\n                ]))\n              }), 128))\n            ])\n          ])\n        ])\n      ]))\n    : _createCommentVNode(\"\", true)\n}\n}\n\n})"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272109552,
      "end": 1709272109552,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { definePageMeta } from '/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/nuxt/dist/pages/runtime/composables';\nimport { useRuntimeConfig } from '#app/nuxt';\nimport { authStore } from '/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/stores/auth.js';\nimport { productsStore } from '/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/stores/products.js';\nimport { reactive, nextTick, watch } from 'vue';\nimport { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = (n) => (_pushScopeId(\"data-v-2d5cfa78\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  id: \"dashboard\",\n  class: \"h-[100vh] w-full bg-zinc-200 dark:bg-zinc-800 flex flex-col\"\n};\nconst _hoisted_2 = { class: \"h-full w-full flex flex-row\" };\nconst _hoisted_3 = { class: \"h-full w-1/5 invisible md:visible px-3 pt-10 pb-4\" };\nconst _hoisted_4 = { class: \"h-full w-full flex flex-col\" };\nconst _hoisted_5 = { class: \"text-neutral-900 dark:text-white\" };\nimport moment from \"moment\";\nimport qs from \"qs\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"dashboard\",\n  setup(__props) {\n    definePageMeta({\n      title: \"Dashboard\",\n      description: \"Dashboard\",\n      url: \"/dashboard\",\n      middleware: [\"auth\"],\n      layout: \"inner\"\n    });\n    const runtimeConfig = useRuntimeConfig();\n    const auth = authStore();\n    const prodStore = productsStore();\n    const state = reactive({\n      current_user: authStore.user,\n      current_tab: null,\n      dark_mode: false,\n      error: false,\n      use_the_force: false,\n      tabs: [\n        {\n          name: \"My Profile\",\n          data: {}\n        },\n        {\n          name: \"My Friends\",\n          data: {\n            adding_new: false,\n            posting_new: false,\n            post: null,\n            new_member: {\n              email: \"\",\n              first_name: \"\",\n              last_name: \"\",\n              phone_number: \"\",\n              n_id: `nsight-${auth.user.id}-${moment().format(\"MMDDYYYY-hmmss\")}`\n            }\n          }\n        }\n      ],\n      validate: false\n    });\n    const generate_random_password = () => {\n      let pass = ``, str = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$`;\n      for (let i = 1; i <= 8; i++) {\n        var char = Math.floor(Math.random() * str.length + 1);\n        pass += str.charAt(char);\n      }\n      return pass;\n    };\n    const validateEmail = (email) => {\n      return email.length && email.toString().toLowerCase().match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n    };\n    const validatePhone = (number) => {\n      const regex = /^\\+\\d{1,3}-\\d{3}-\\d{3}-\\d{4}$/;\n      return regex.test(number);\n    };\n    const post_new_member = async () => {\n      let active_tab = state.tabs[1];\n      active_tab.data.posting_new = true;\n      const headers_obj = {\n        \"Content-Type\": \"application/json\",\n        accept: \"application/json\",\n        Authorization: `Bearer ${auth.token}`\n      };\n      active_tab.post = $fetch(\n        `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?${qs.stringify({\n          filters: {\n            nsight_id: state.tabs[1].data.new_member.n_id\n          }\n        })}`,\n        {\n          method: \"GET\",\n          headers: headers_obj\n        }\n      ).then((nsight_id_check) => {\n        if (!nsight_id_check.data.length) {\n          let new_nsight_id = {\n            data: {\n              authentic: true,\n              nsight_id: active_tab.data.new_member.n_id\n            }\n          };\n          $fetch(\n            `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids?populate=*`,\n            {\n              method: \"POST\",\n              headers: headers_obj,\n              body: JSON.stringify(new_nsight_id)\n            }\n          ).then((new_nsight_id_data) => {\n            console.log(\"New nsight id added\", new_nsight_id_data);\n            const new_strapi_nsight_id = new_nsight_id_data.data;\n            let new_nsight_member = {\n              blocked: false,\n              confirmed: false,\n              email: active_tab.data.new_member.email,\n              first_name: active_tab.data.new_member.first_name,\n              last_name: active_tab.data.new_member.last_name,\n              phone_number: active_tab.data.new_member.phone_number,\n              nsight_id: new_strapi_nsight_id,\n              square_id: \"\",\n              preferences: [\n                {\n                  dark_mode: true\n                }\n              ],\n              username: active_tab.data.new_member.email,\n              // password: thisObj.generate_random_password()\n              password: \"P@ssW3rd9756\",\n              users: [auth.user],\n              friends: [auth.user],\n              addresses: {\n                shipping: [],\n                billing: []\n              },\n              selected_addresses: {\n                shipping: null,\n                billing: null\n              },\n              selected_payment_method: null,\n              payment_methods: {\n                data: []\n              },\n              orders: {\n                data: []\n              },\n              returns: {\n                data: []\n              },\n              cancelled_orders: {\n                data: []\n              },\n              role: {\n                id: 1,\n                name: \"Authenticated\",\n                description: \"Default role given to authenticated user.\",\n                type: \"authenticated\",\n                connect: [\n                  {\n                    id: 1\n                  }\n                ]\n              }\n            };\n            $fetch(`${runtimeConfig.public.NUXT_STRAPI_URL}/api/users`, {\n              method: \"POST\",\n              headers: headers_obj,\n              body: JSON.stringify(new_nsight_member)\n            }).then((new_strapi_user_data) => {\n              console.log(\n                \"created new strapi member: \",\n                new_strapi_user_data\n              );\n              const new_strapi_user = new_strapi_user_data;\n              $fetch(\n                `${runtimeConfig.public.NUXT_STRAPI_URL}/api/nsight-ids/${new_strapi_nsight_id.id}`,\n                {\n                  method: \"PUT\",\n                  headers: headers_obj,\n                  body: JSON.stringify({\n                    data: {\n                      user: [new_strapi_user]\n                    }\n                  })\n                }\n              ).then(async (updated_nsight_id_data) => {\n                console.log(\n                  \"updated nsight_id with new user: \",\n                  updated_nsight_id_data\n                );\n                const new_square_customer = {\n                  givenName: new_nsight_member.first_name,\n                  familyName: new_nsight_member.last_name,\n                  emailAddress: new_nsight_member.email,\n                  phoneNumber: new_nsight_member.phone_number\n                };\n                const square_data = await $fetch(\n                  \"/api/square/create-customer\",\n                  {\n                    method: \"POST\",\n                    headers: headers_obj,\n                    body: JSON.stringify(new_square_customer)\n                  }\n                );\n                new_nsight_member.square_id = square_data.customer.id;\n                if (square_data.customer && square_data.customer.id) {\n                  new_nsight_member.square_id = square_data.customer.id;\n                  nextTick(() => {\n                    new_nsight_member.square_id = square_data.customer.id;\n                    console.log(\n                      \"updated new_nsight_member with square_id: \",\n                      new_nsight_member\n                    );\n                    const updated_new_sight_member = new_nsight_member;\n                    $fetch(\n                      `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${new_strapi_user.id}`,\n                      {\n                        method: \"PUT\",\n                        headers: headers_obj,\n                        body: JSON.stringify({\n                          square_id: square_data.customer.id\n                        })\n                      }\n                    ).then((square_id_update_data) => {\n                      console.log(\n                        \"updated strapi user with square_id: \",\n                        square_id_update_data\n                      );\n                      auth.user.friends.push(square_id_update_data);\n                      auth.user.users.push(square_id_update_data);\n                      state.tabs[1].data.adding_new = false;\n                      nextTick(() => {\n                        $fetch(\n                          `${runtimeConfig.public.NUXT_STRAPI_URL}/api/users/${auth.user.id}`,\n                          {\n                            method: \"PUT\",\n                            headers: headers_obj,\n                            body: JSON.stringify({ data: auth.user })\n                          }\n                        ).then((data) => {\n                          console.log(\n                            \"updated strapi user with new member: \",\n                            data\n                          );\n                          active_tab.data.posting_new = false;\n                        }).catch((err) => {\n                          console.log(\n                            \"error updating strapi user with new member: \",\n                            err\n                          );\n                          state.error = err;\n                        });\n                      });\n                    }).catch((err) => {\n                      console.log(\n                        \"error updating strapi user with square_id: \",\n                        err\n                      );\n                      state.error = err;\n                    });\n                  });\n                }\n              }).catch((err) => {\n                console.log(\n                  \"error updating nsight_id with new user: \",\n                  err\n                );\n                state.error = err;\n              });\n            }).catch((err) => {\n              console.log(\"error creating new member: \", err);\n              state.error = err;\n            });\n          }).catch((err) => {\n            state.error = err;\n          });\n        } else {\n          const mssg = `nsight id already exists. Please try again.`;\n          console.log(mssg, res.data);\n          state.error = mssg;\n        }\n      }).catch((err) => {\n        console.log(\"nsight error\", err);\n        return err;\n      });\n    };\n    watch(\n      () => state.tabs[1].data.new_member,\n      (val) => {\n        state.validate = val.email.length > 0 && validateEmail(val.email) && val.first_name.length > 0 && val.last_name.length > 0 && validatePhone(val.phone_number);\n      },\n      { deep: true }\n    );\n    return (_ctx, _cache) => {\n      return _unref(auth)?.user ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n        _createElementVNode(\"div\", _hoisted_2, [\n          _createElementVNode(\"div\", _hoisted_3, [\n            _createElementVNode(\"div\", _hoisted_4, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(state).tabs, (tab, a) => {\n                return _openBlock(), _createElementBlock(\"div\", {\n                  key: a,\n                  class: \"w-full p-8 hover:shadow-xl hover:cursor-pointer hover:bg-zinc-700 rounded-lg\"\n                }, [\n                  _createElementVNode(\"button\", _hoisted_5, [\n                    _createElementVNode(\"span\", null, _toDisplayString(tab.name), 1)\n                  ])\n                ]);\n              }), 128))\n            ])\n          ])\n        ])\n      ])) : _createCommentVNode(\"\", true);\n    };\n  }\n});\n",
      "start": 1709272109552,
      "end": 1709272109557,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappingszF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtljE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClhK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACznhF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACbnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChpjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrpG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvhG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChtK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpzF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpnH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzvG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACppF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1709272109557,
      "end": 1709272109563,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "result": "const __nuxt_page_meta = {\n      title: \"Dashboard\",\n      description: \"Dashboard\",\n      url: \"/dashboard\",\n      middleware: [\"auth\"],\n      layout: \"inner\"\n    }\nexport default __nuxt_page_meta",
      "start": 1709272109563,
      "end": 1709272109565,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
      }
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272109566,
      "end": 1709272109566,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272109566,
      "end": 1709272109566,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272109566,
      "end": 1709272109566,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272109566,
      "end": 1709272109566,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272109566,
      "end": 1709272109566,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272109566,
      "end": 1709272109566,
      "order": "normal"
    }
  ]
}
