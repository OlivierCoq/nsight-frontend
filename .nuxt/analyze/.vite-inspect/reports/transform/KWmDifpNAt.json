{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/normalizeArguments.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport isObject from './helpers/isObject.js'; // Extracts the following properties from function arguments:\n// * input `text`\n// * `options` object\n// * `metadata` JSON\n\nexport default function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n}\n//# sourceMappingURL=normalizeArguments.js.map",
      "start": 1709272110576,
      "end": 1709272110623,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272110623,
      "end": 1709272110624,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272110624,
      "end": 1709272110624,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272110624,
      "end": 1709272110624,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272110624,
      "end": 1709272110624,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272110624,
      "end": 1709272110624,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272110624,
      "end": 1709272110624,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272110627,
      "end": 1709272110627,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272110627,
      "end": 1709272110628,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272110628,
      "end": 1709272110628,
      "order": "normal"
    }
  ]
}
