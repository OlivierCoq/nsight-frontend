{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/libphonenumber-js/es6/isValid.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata);\n  /**\r\n   * Checks if a phone number is \"possible\" (basically just checks its length).\r\n   *\r\n   * @param  {object|PhoneNumber} input â€” If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n   * @param  {object} [options]\r\n   * @param  {object} metadata\r\n   * @return {string}\r\n   */\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=isValid.js.map",
      "start": 1709003848993,
      "end": 1709003849041,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003849041,
      "end": 1709003849041,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003849041,
      "end": 1709003849042,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003849042,
      "end": 1709003849042,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003849042,
      "end": 1709003849042,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003849042,
      "end": 1709003849042,
      "order": "normal"
    }
  ]
}
