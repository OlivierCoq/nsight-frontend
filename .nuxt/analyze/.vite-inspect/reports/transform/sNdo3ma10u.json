{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/locationsApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createLocationRequestSchema, } from '../models/createLocationRequest';\nimport { createLocationResponseSchema, } from '../models/createLocationResponse';\nimport { listLocationsResponseSchema, } from '../models/listLocationsResponse';\nimport { retrieveLocationResponseSchema, } from '../models/retrieveLocationResponse';\nimport { updateLocationRequestSchema, } from '../models/updateLocationRequest';\nimport { updateLocationResponseSchema, } from '../models/updateLocationResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class LocationsApi extends BaseApi {\n    /**\n     * Provides details about all of the seller's [locations](https://developer.squareup.com/docs/locations-\n     * api),\n     * including those with an inactive status.\n     *\n     * @return Response from the API call\n     */\n    async listLocations(requestOptions) {\n        const req = this.createRequest('GET', '/v2/locations');\n        return req.callAsJson(listLocationsResponseSchema, requestOptions);\n    }\n    /**\n     * Creates a [location](https://developer.squareup.com/docs/locations-api).\n     * Creating new locations allows for separate configuration of receipt layouts, item prices,\n     * and sales reports. Developers can use locations to separate sales activity through applications\n     * that integrate with Square from sales activity elsewhere in a seller's account.\n     * Locations created programmatically with the Locations API last forever and\n     * are visible to the seller for their own management. Therefore, ensure that\n     * each location has a sensible and unique name.\n     *\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                     the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async createLocation(body, requestOptions) {\n        const req = this.createRequest('POST', '/v2/locations');\n        const mapped = req.prepareArgs({\n            body: [body, createLocationRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        return req.callAsJson(createLocationResponseSchema, requestOptions);\n    }\n    /**\n     * Retrieves details of a single location. Specify \"main\"\n     * as the location ID to retrieve details of the [main location](https://developer.squareup.\n     * com/docs/locations-api#about-the-main-location).\n     *\n     * @param locationId  The ID of the location to retrieve. Specify the string \"main\" to return the main\n     *                              location.\n     * @return Response from the API call\n     */\n    async retrieveLocation(locationId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n        req.appendTemplatePath `/v2/locations/${mapped.locationId}`;\n        return req.callAsJson(retrieveLocationResponseSchema, requestOptions);\n    }\n    /**\n     * Updates a [location](https://developer.squareup.com/docs/locations-api).\n     *\n     * @param locationId   The ID of the location to update.\n     * @param body         An object containing the fields to POST for the request.  See\n     *                                                     the corresponding object definition for field details.\n     * @return Response from the API call\n     */\n    async updateLocation(locationId, body, requestOptions) {\n        const req = this.createRequest('PUT');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            body: [body, updateLocationRequestSchema],\n        });\n        req.header('Content-Type', 'application/json');\n        req.json(mapped.body);\n        req.appendTemplatePath `/v2/locations/${mapped.locationId}`;\n        return req.callAsJson(updateLocationResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=locationsApi.js.map",
      "start": 1709272108452,
      "end": 1709272108542,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272108542,
      "end": 1709272108542,
      "order": "normal"
    }
  ]
}
