{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/api/cashDrawersApi.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { listCashDrawerShiftEventsResponseSchema, } from '../models/listCashDrawerShiftEventsResponse';\nimport { listCashDrawerShiftsResponseSchema, } from '../models/listCashDrawerShiftsResponse';\nimport { retrieveCashDrawerShiftResponseSchema, } from '../models/retrieveCashDrawerShiftResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\nexport class CashDrawersApi extends BaseApi {\n    /**\n     * Provides the details for all of the cash drawer shifts for a location\n     * in a date range.\n     *\n     * @param locationId  The ID of the location to query for a list of cash drawer shifts.\n     * @param sortOrder   The order in which cash drawer shifts are listed in the response, based on their\n     *                              opened_at field. Default value: ASC\n     * @param beginTime   The inclusive start time of the query on opened_at, in ISO 8601 format.\n     * @param endTime     The exclusive end date of the query on opened_at, in ISO 8601 format.\n     * @param limit       Number of cash drawer shift events in a page of results (200 by default, 1000 max).\n     * @param cursor      Opaque cursor for fetching the next page of results.\n     * @return Response from the API call\n     */\n    async listCashDrawerShifts(locationId, sortOrder, beginTime, endTime, limit, cursor, requestOptions) {\n        const req = this.createRequest('GET', '/v2/cash-drawers/shifts');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            sortOrder: [sortOrder, optional(string())],\n            beginTime: [beginTime, optional(string())],\n            endTime: [endTime, optional(string())],\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n        });\n        req.query('location_id', mapped.locationId);\n        req.query('sort_order', mapped.sortOrder);\n        req.query('begin_time', mapped.beginTime);\n        req.query('end_time', mapped.endTime);\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        return req.callAsJson(listCashDrawerShiftsResponseSchema, requestOptions);\n    }\n    /**\n     * Provides the summary details for a single cash drawer shift. See\n     * [ListCashDrawerShiftEvents]($e/CashDrawers/ListCashDrawerShiftEvents) for a list of cash drawer\n     * shift events.\n     *\n     * @param locationId  The ID of the location to retrieve cash drawer shifts from.\n     * @param shiftId     The shift ID.\n     * @return Response from the API call\n     */\n    async retrieveCashDrawerShift(locationId, shiftId, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            shiftId: [shiftId, string()],\n        });\n        req.query('location_id', mapped.locationId);\n        req.appendTemplatePath `/v2/cash-drawers/shifts/${mapped.shiftId}`;\n        return req.callAsJson(retrieveCashDrawerShiftResponseSchema, requestOptions);\n    }\n    /**\n     * Provides a paginated list of events for a single cash drawer shift.\n     *\n     * @param locationId  The ID of the location to list cash drawer shifts for.\n     * @param shiftId     The shift ID.\n     * @param limit       Number of resources to be returned in a page of results (200 by default, 1000 max).\n     * @param cursor      Opaque cursor for fetching the next page of results.\n     * @return Response from the API call\n     */\n    async listCashDrawerShiftEvents(locationId, shiftId, limit, cursor, requestOptions) {\n        const req = this.createRequest('GET');\n        const mapped = req.prepareArgs({\n            locationId: [locationId, string()],\n            shiftId: [shiftId, string()],\n            limit: [limit, optional(number())],\n            cursor: [cursor, optional(string())],\n        });\n        req.query('location_id', mapped.locationId);\n        req.query('limit', mapped.limit);\n        req.query('cursor', mapped.cursor);\n        req.appendTemplatePath `/v2/cash-drawers/shifts/${mapped.shiftId}/events`;\n        return req.callAsJson(listCashDrawerShiftEventsResponseSchema, requestOptions);\n    }\n}\n//# sourceMappingURL=cashDrawersApi.js.map",
      "start": 1707437860269,
      "end": 1707437860319,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1707437860319,
      "end": 1707437860319,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1707437860319,
      "end": 1707437860320,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1707437860320,
      "end": 1707437860320,
      "order": "normal"
    }
  ]
}
