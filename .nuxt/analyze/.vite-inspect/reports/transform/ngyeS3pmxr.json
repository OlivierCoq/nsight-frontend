{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/square/dist/esm/errors/apiError.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import JSONBig from '@apimatic/json-bigint';\n/**\n * Thrown when the HTTP status code is not okay.\n *\n * The ApiError extends the ApiResponse interface, so all ApiResponse\n * properties are available.\n */\nexport class ApiError extends Error {\n    constructor(context, message) {\n        var _a;\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        const { request, response } = context;\n        this.request = request;\n        this.statusCode = response.statusCode;\n        this.headers = response.headers;\n        this.body = response.body;\n        if (typeof response.body === 'string' && response.body !== '') {\n            const JSON = JSONBig();\n            try {\n                this.result = JSON.parse(response.body);\n                if (typeof this.result === 'object') {\n                    const result = this.result;\n                    if ('errors' in result) {\n                        this.errors = result['errors'];\n                    }\n                    else {\n                        this.errors = [\n                            {\n                                category: 'V1_ERROR',\n                                code: (_a = result['type']) !== null && _a !== void 0 ? _a : 'Unknown',\n                                detail: result['message'],\n                                field: result['field'],\n                            },\n                        ];\n                    }\n                }\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    if (console) {\n                        console.warn(`Unexpected error: Could not parse HTTP response body as JSON. ${error.message}`);\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=apiError.js.map",
      "start": 1709003846815,
      "end": 1709003846910,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709003846910,
      "end": 1709003846910,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import JSONBig from \"@apimatic/json-bigint\";\nexport class ApiError extends Error {\n  constructor(context, message) {\n    var _a;\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n    const { request, response } = context;\n    this.request = request;\n    this.statusCode = response.statusCode;\n    this.headers = response.headers;\n    this.body = response.body;\n    if (typeof response.body === \"string\" && response.body !== \"\") {\n      const JSON = JSONBig();\n      try {\n        this.result = JSON.parse(response.body);\n        if (typeof this.result === \"object\") {\n          const result = this.result;\n          if (\"errors\" in result) {\n            this.errors = result[\"errors\"];\n          } else {\n            this.errors = [\n              {\n                category: \"V1_ERROR\",\n                code: (_a = result[\"type\"]) !== null && _a !== void 0 ? _a : \"Unknown\",\n                detail: result[\"message\"],\n                field: result[\"field\"]\n              }\n            ];\n          }\n        }\n      } catch (error) {\n        if (false) {\n          if (console) {\n            console.warn(`Unexpected error: Could not parse HTTP response body as JSON. ${error.message}`);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "start": 1709003846910,
      "end": 1709003847900,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709003847900,
      "end": 1709003847900,
      "order": "normal"
    }
  ]
}
