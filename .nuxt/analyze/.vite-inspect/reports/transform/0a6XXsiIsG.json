{
  "resolvedId": "/Applications/MAMP/htdocs/www/NSIGHT_PROJECT/nsight-frontend/node_modules/@apimatic/http-headers/es/httpHeaders.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { __values } from 'tslib';\n\n/**\r\n * Set a header in the headers map.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n * @param value Header value\r\n */\nfunction setHeader(headers, name, value) {\n  var realHeaderName = lookupCaseInsensitive(headers, name);\n  setHeaderInternal(headers, realHeaderName, name, value);\n}\nfunction setHeaderInternal(headers, realHeaderName, name, value) {\n  if (realHeaderName) {\n    delete headers[realHeaderName];\n  }\n  if (value) {\n    headers[name] = value;\n  }\n}\n/**\r\n * Set a header in the headers map if it is not already set.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n * @param value Header value\r\n */\nfunction setHeaderIfNotSet(headers, name, value) {\n  var realHeaderName = lookupCaseInsensitive(headers, name);\n  if (!realHeaderName) {\n    setHeaderInternal(headers, realHeaderName, name, value);\n  }\n}\n/**\r\n * Get header from a map of headers.\r\n *\r\n * This method performs case-insensitive handling of header names.\r\n *\r\n * @param headers Map of headers\r\n * @param name Header name\r\n */\nfunction getHeader(headers, name) {\n  var prop = lookupCaseInsensitive(headers, name);\n  if (prop) {\n    return headers[prop];\n  }\n  return null;\n}\n/**\r\n * Looks up and returns the matching property name from the object.\r\n *\r\n * This method returns the matching property name in the object which might or might\r\n * not have the same case as the prop argument.\r\n *\r\n * @param obj Object with string property names\r\n * @param prop Property to lookup\r\n */\nfunction lookupCaseInsensitive(obj, prop) {\n  prop = prop.toLowerCase();\n  for (var p in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, p) && prop === p.toLowerCase()) {\n      return p;\n    }\n  }\n  return null;\n}\n/**\r\n * Merge headers\r\n *\r\n * Header names are compared using case-insensitive comparison. This method\r\n * preserves the original header name. If the headersToMerge overrides an existing\r\n * header, then the new header name (with its casing) is used.\r\n *\r\n * @param headers Headers to merge into\r\n * @param headersToMerge Headers to set\r\n */\nfunction mergeHeaders(headers, headersToMerge) {\n  var e_1, _a, e_2, _b;\n  var headerKeys = {};\n  try {\n    // Create a map of lower-cased-header-name to original-header-names\n    for (var _c = __values(Object.getOwnPropertyNames(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var headerName = _d.value;\n      headerKeys[headerName.toLowerCase()] = headerName;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  try {\n    // Override headers with new values\n    for (var _e = __values(Object.getOwnPropertyNames(headersToMerge)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var headerName = _f.value;\n      var lowerCasedName = headerName.toLowerCase();\n      if (headerKeys[lowerCasedName]) {\n        delete headers[headerKeys[lowerCasedName]];\n      }\n      headerKeys[lowerCasedName] = headerName;\n      headers[headerName] = headersToMerge[headerName];\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n/**\r\n * Assert headers object is valid\r\n */\nfunction assertHeaders(headers) {\n  var e_3, _a;\n  if (headers === null || typeof headers !== 'object') {\n    throw new TypeError('Headers must be an object.');\n  }\n  try {\n    for (var _b = __values(Object.getOwnPropertyNames(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n      if (!isValidHeaderName(headerName)) {\n        throw new Error(\"\\\"\" + headerName + \"\\\" is not a valid header name.\");\n      }\n      var headerValue = headers[headerName];\n      if (typeof headerValue !== 'string') {\n        throw new TypeError(\"Header value must be string but \" + typeof headerValue + \" provided.\");\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n/**\r\n * Return true if header name is valid\r\n * @param headerName Header name\r\n */\nfunction isValidHeaderName(headerName) {\n  return /^[\\w!#$%&'*+.^`|~-]+$/.test(headerName);\n}\nvar CONTENT_TYPE_HEADER = 'content-type';\nvar ACCEPT_HEADER = 'accept';\nvar CONTENT_LENGTH_HEADER = 'content-length';\nvar AUTHORIZATION_HEADER = 'authorization';\nvar FORM_URLENCODED_CONTENT_TYPE = 'application/x-www-form-urlencoded';\nvar JSON_CONTENT_TYPE = 'application/json';\nvar TEXT_CONTENT_TYPE = 'text/plain; charset=utf-8';\nvar XML_CONTENT_TYPE = 'application/xml';\nexport { ACCEPT_HEADER, AUTHORIZATION_HEADER, CONTENT_LENGTH_HEADER, CONTENT_TYPE_HEADER, FORM_URLENCODED_CONTENT_TYPE, JSON_CONTENT_TYPE, TEXT_CONTENT_TYPE, XML_CONTENT_TYPE, assertHeaders, getHeader, isValidHeaderName, lookupCaseInsensitive, mergeHeaders, setHeader, setHeaderIfNotSet };",
      "start": 1709272109701,
      "end": 1709272109775,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709272109775,
      "end": 1709272109775,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709272109775,
      "end": 1709272109776,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709272109776,
      "end": 1709272109776,
      "order": "normal"
    }
  ]
}
